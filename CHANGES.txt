pantheios - Changes
===================

Created:    2nd September 2006
Updated:    24th October 2024


    ************************************
    * Change key:                      *
    *                                  *
    *  ~  means something has changed  *
    *  +  means a new addition         *
    *  -  means removal of something   *
    *  *  means a general bullet-point *
    *                                  *
    ************************************


24th October 2024 - 1.0.1 beta 221
==================================

Summary:
--------

 * Major CMake configuration enhancements;
 * Now optionally dependent on **b64** library (for `pantheios::b64' inserter class);
 * Removed large number of warning suppressions;
 * Defect fixes;
 * MinGW compatibility;
 * VC++17 compatibility;

Details:
--------

Major CMake configuration enhancements:
 * standardised and enhanced main script;
 * added and applied several macros and functions for simplifying target configurations;
 * added `EXPORT project-targets` to all targets' `install()` entries;
 * adds `PANTHEIOS_NO_B64` to general defines when **b64** project not found;
 * CMake build scripts enhancements

Removed large number of warning suppressions:
 * removed suppression of GCC 'deprecated-copy-with-user-provided-copy' warning;
 * removed suppression of GCC 'unused-but-set-parameter' warning;
 * removed suppression of GCC 'unused-but-set-variable' warning;
 * removed suppression of GCC 'unused-parameter' warning;
 * removed suppression of GCC 'unused-variable' warning;
 * removed suppression of misc GCC warnings;

Defect fixes:
 * **bec.WindowsConsole** : ~ fixed error in `map_type_` specification;
 * `pantheios::pointer` : ~ full compatibility with different architectures and compilers; ~ inserter formatting and layout;


16th July 2024 - 1.0.1 beta 220
===============================

Summary:
--------

 * C++14, C++17
 * CMake compatibility (Linux, macOS, Windows)
 * New widestring bail-out API functions
 * Full widestring compatibility on Windows
 * Forwards/backwards compatibility with STLSoft (1.9, ..., 1.11)
 * GCC compatibility
 * Visual C++17 compatibility

Details:
--------

Too many to mention. Note that there are no functionality changes.


5th July 2020 - 1.0.1 beta 219
==============================

Summary:
--------

 * added ::pantheios_char_t with all appropriate changes in library
 * added support for PANTHEIOS_NO_B64 preprocessor symbol, which causes build and use of application layer inserters to be done without the b64 library (and the pantheios::b64 inserter)
 * added support (including implicit-linking support) for Visual C++ 15.x and 16.x
 * forward-compatibility support for STLSoft 1.10 and 1.11
 * substantial reworking and fixes to makefiles
 * added project files (auto-generated) for Visual C++ 10
 * added bec.stock (and bec.stock.WithCallback) archive(s) and implicit-link file(s)
 * bec.fprintf now always outputs to stderr by default; + can specify stream in initialiser
 * numerous minor mods and fixes to bec.file
 * added example.cpp.linking.N_with_stock
 * added test.unit.inserter.stream_character
 * added test.unit.util.snprintf
 * added test.component.bec.fprintf
 * added in test of stlsoft::fast_strftime in test.performance.util.date_elements_to_string

Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    ~ STLSoft dependencies
    + added ::pantheios_char_t with all appropriate changes in library
    + added PANTHEIOS_STLSOFT_1_11_OR_LATER

 ~ include/pantheios/implicit_link/implicit_link_base_.h:
    + added implicit-link support for VC++ 15 and 16

Core:

 ~ src/core/api.cpp:
 ~ src/core/api.deprecated.c:
 ~ src/core/api.logputs.cpp:
 ~ src/core/logprintf.c:
    + added ::pantheios_char_t with all appropriate changes in library

Application Layer:

 ~ include/pantheios/inserters.hpp:
    + PANTHEIOS_NO_B64

 ~ include/pantheios/inserters/b64.hpp:
    + PANTHEIOS_NO_B64
    + added ::pantheios_char_t with all appropriate changes in library

 ~ include/pantheios/inserters/adaptor.hpp:
 ~ include/pantheios/inserters/args.hpp:
 ~ include/pantheios/inserters/blob.hpp:
 ~ include/pantheios/inserters/boolean.hpp:
 ~ include/pantheios/inserters/character.hpp:
 ~ include/pantheios/inserters/exception.hpp:
 ~ include/pantheios/inserters/hostid.hpp:
 ~ include/pantheios/inserters/integer.hpp:
 ~ include/pantheios/inserters/interval.hpp:
 ~ include/pantheios/inserters/m2w.hpp:
 ~ include/pantheios/inserters/pad.hpp:
 ~ include/pantheios/inserters/pointer.hpp:
 ~ include/pantheios/inserters/processid.hpp:
 ~ include/pantheios/inserters/real.hpp:
 ~ include/pantheios/inserters/slice.hpp:
 ~ include/pantheios/inserters/stream_character.hpp:
 ~ include/pantheios/inserters/threadid.hpp:
 ~ include/pantheios/inserters/w2m.hpp:
 ~ include/pantheios/inserters/windows/hive.hpp:
 ~ include/pantheios/internal/slice.hpp:
 ~ include/pantheios/shims/access/string/core/pan_severity_t.hpp:
 ~ include/pantheios/shims/access/string/core/pan_slice_t.hpp:
 ~ include/pantheios/trace.h:
 ~ include/pantheios/util/backends/context.hpp:
    + added ::pantheios_char_t with all appropriate changes in library

 ~ src/inserters/args.cpp:
 ~ src/inserters/b64.cpp:
 ~ src/inserters/blob.cpp:
 ~ src/inserters/boolean.cpp:
 ~ src/inserters/exception.cpp:
 ~ src/inserters/hostid.cpp:
 ~ src/inserters/integer.cpp:
 ~ src/inserters/interval.cpp:
 ~ src/inserters/pointer.cpp:
 ~ src/inserters/processid.cpp:
 ~ src/inserters/real.cpp:
 ~ src/inserters/slice.cpp:
 ~ src/inserters/stream_character.cpp:
 ~ src/inserters/threadid.cpp:
    + added ::pantheios_char_t with all appropriate changes in library

 ~ include/pantheios/generated/log_dispatch_functions.h:
 ~ include/pantheios/generated/log_dispatch_functions.hpp:
 ~ include/pantheios/generated/log_functions.h:
 ~ include/pantheios/generated/log_functions.hpp:
 ~ include/pantheios/generated/log_sev_functions.hpp:
    ~ updated generated files
    + added ::pantheios_char_t with all appropriate changes in library

 ~ include/pantheios/internal/generated/log_functions.inl:
    ~ updated generated files
    + added ::pantheios_char_t with all appropriate changes in library

Tracing:

Assertion:

Util:

 ~ include/pantheios/util/backends/arguments.h:
    ~ documentation markup

 ~ include/pantheios/util/string/snprintf.h:
    ~ working around absence of vsnwprintf() for GCC (Linux) compatibility in a broad-brush way
    + added pantheios_util_snprintf_w() / pantheios_util_vsnprintf_w()
    + added ::pantheios_char_t with all appropriate changes in library
    ~ preparatory layout changes

 ~ include/pantheios/util/string/strdup.h:
 ~ include/pantheios/util/string/strnlen.h:
 ~ include/pantheios/util/system/hostname.h:
 ~ include/pantheios/util/time/currenttime.h:
    + added ::pantheios_char_t with all appropriate changes in library

 ~ src/util/bailout.c:
    ~ preparatory work

 ~ src/util/be.context.cpp:
 ~ src/util/hostname.c:
 ~ src/util/severity_strings.c:
 ~ src/util/strdup.c:
 ~ src/util/time.cpp:
 ~ src/util/util.strnlen.c:
    + added ::pantheios_char_t with all appropriate changes in library

 ~ src/util/snprintf.c:
    ~ working around absence of vsnwprintf() for GCC (Linux) compatibility in a broad-brush way
    + added pantheios_util_snprintf_w() / pantheios_util_vsnprintf_w()
    + added ::pantheios_char_t with all appropriate changes in library
    ~ preparatory layout changes

 ~ src/util/threadid.c:
    ~ PThreads-Win32 compatibility (64-bit)

Extras:

Front-ends:

 ~ src/frontends/fe.WindowsRegistry.cpp:
    + added ::pantheios_char_t with all appropriate changes in library

Back-ends:

 ~ include/pantheios/implicit_link/bec.console.WithCallback.h:
    ~ fixed invalid includes

 + include/pantheios/implicit_link/bec.stock.WithCallback.h:
 + include/pantheios/implicit_link/bec.stock.h:
    + added bec.stock (and bec.stock.WithCallback) archives
    + added example.cpp.linking.N_with_stock

 ~ include/pantheios/backends/bec.fprintf.h:
    bec.fprintf : ~ now always outputs to stderr by default; + can specify stream in initialiser

 ~ include/pantheios/backends/bec.test.h:
    + added ::pantheios_char_t with all appropriate changes in library

 ~ src/backends/bec.WindowsConsole.cpp:
    ~ minor mods

 ~ src/backends/bec.file.cpp:
    ~ whitespace
    ~ fixed defect introduced in revision 133
    ~ compatibility with 64-bit (on Windows)
    ~ compatibility with STLSoft versions
    ~ fixed defect in processing of one, but not both, %D and %T
    ~ changed app-init such that fileName points to &buff[0]

 ~ src/backends/bec.fprintf.cpp:
    bec.fprintf : ~ now always outputs to stderr by default; + can specify stream in initialiser

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/bc62x/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc49.win32/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl12.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc11.x64/makefile:
 ~ build/vc11/makefile:
 ~ build/vc12.x64/makefile:
 ~ build/vc12/makefile:
 ~ build/vc14.x64/makefile:
 ~ build/vc14/makefile:
 + build/vc15.x64/makefile:
 + build/vc15/makefile:
 + build/vc16.x64/makefile:
 + build/vc16/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ improved removal of files in clean on Windows
    ~ tidying up of binary products (incl. .exe, .pdb, .ilk)
    ~ preparatory refactoring
    + added PANTHEIOS_NO_B64 (for those compilers whose tool-suites' make tool has preprocessor), allowing for removal of dependency on b64 library
    + added test.performance.util.date_elements_to_string
    ~ preparatory refactoring of makefile structure
    + added test.component.bec.fprintf
    + added bec.stock (and bec.stock.WithCallback) archives
    ~ significantly refactored makefile structure
    + added tes.unit.util.snprintf
    + added ws2_32 references
    - removed (temporarily?) test.unit.be.WindowsSyslog
    ~ refactoring generated makefile(s)
    ~ refactored makefile(s)
    + adjusted 'clean' target

 ~ build/gcc32.unix/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/gcc45.unix.file64bit/makefile:
 ~ build/gcc45.unix/makefile:
 ~ build/gcc46.unix.file64bit/makefile:
 ~ build/gcc46.unix/makefile:
 ~ build/gcc47.unix.file64bit/makefile:
 ~ build/gcc47.unix/makefile:
 ~ build/gcc48.unix.file64bit/makefile:
 ~ build/gcc48.unix/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc11.unixem/makefile:
 ~ build/vc12.unixem/makefile:
 ~ build/vc14.unixem/makefile:
 + build/vc15.unixem/makefile:
 + build/vc16.unixem/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc9.unixem/makefile:
    ~ preparatory refactoring
    + added PANTHEIOS_NO_B64 (for those compilers whose tool-suites' make tool has preprocessor), allowing for removal of dependency on b64 library
    + added test.performance.util.date_elements_to_string
    ~ preparatory refactoring of makefile structure
    + added test.component.bec.fprintf
    + added bec.stock (and bec.stock.WithCallback) archives
    ~ significantly refactored makefile structure
    + added tes.unit.util.snprintf
    + added ws2_32 references
    - removed (temporarily?) test.unit.be.WindowsSyslog
    ~ refactoring generated makefile(s)
    ~ refactored makefile(s)
    + adjusted 'clean' target


 ~ projects/util/vc10/pantheios.util.vcxproj:
    + added project name
    + added post-build mechanism to copy to Synesis-named for in lib directory
    ~ fixing dependency headers
    ~ PCH
    ~ auto-generated (by VcxParser : Test.Scratch.Project.FromScratch)

 ~ projects/util/vc10/pantheios.util.vcxproj.filters:
    ~ auto-generated (by VcxParser : Test.Scratch.Project.FromScratch)


 ~ projects/core/vc10/pantheios.core.vcxproj:
    + added post-build mechanism to copy to Synesis-named for in lib directory
    ~ auto-generated (by VcxParser : Test.Scratch.Project.FromScratch)
    ~ preparatory (manual) changes
    ~ canonicalised Label attributes (via vcxprojLabelCanonicaliser.rb)

 ~ projects/core/vc10/pantheios.core.vcxproj.filters:
    - elided non-Pantheios files


 ~ projects/frontends/fe.N/vc10/fe.N.vcxproj:
    ~ canonicalising
    ~ simplifying
    - removed unnecessary configurations and (header) files

 ~ projects/frontends/fe.N/vc10/fe.N.vcxproj.filters:
    - removed unnecessary configurations and (header) files


 + projects/backends/bec.stock/vc10/bec.stock.vcxproj:
 + projects/backends/bec.stock/vc10/bec.stock.vcxproj.filters:
    + added bec.stock VC++ 10 project

Examples:

 + examples/cpp/linking/example.cpp.linking.N_with_stock/example.cpp.linking.N_with_stock.cpp:
    + added bec.stock (and bec.stock.WithCallback) archives
    + added example.cpp.linking.N_with_stock

Test:

Test.Unit:

 + test/unit/inserters/test.unit.inserter.stream_character/implicit_link.cpp:
 + test/unit/inserters/test.unit.inserter.stream_character/test.unit.inserter.stream_character.cpp:
    + added test.unit.inserter.stream_character

 + test/unit/test.unit.util.snprintf/test.unit.util.snprintf.cpp:
    ~ working around absence of vsnwprintf() for GCC (Linux) compatibility in a broad-brush way
    + added pantheios_util_snprintf_w() / pantheios_util_vsnprintf_w()
    + added test.unit.util.snprintf

 + test/unit/test.unit.util.snprintf/implicit_link.cpp:
 + test/unit/test.unit.util.snprintf/vc10/test.unit.util.snprintf.vcxproj:
 + test/unit/test.unit.util.snprintf/vc10/test.unit.util.snprintf.vcxproj.filters:
    + added test.unit.util.snprintf

Test.Component:

 + test/component/test.component.bec.fprintf/implicit_link.cpp:
 + test/component/test.component.bec.fprintf/test.component.bec.fprintf.cpp:
 + test/component/test.component.bec.fprintf/vc10/test.component.bec.fprintf.vcxproj:
 + test/component/test.component.bec.fprintf/vc10/test.component.bec.fprintf.vcxproj.filters:
    + added test.component.bec.fprintf

Test.Performance:

 ~ test/performance/test.performance.util.date_elements_to_string/test.performance.util.date_elements_to_string.cpp:
    test.performance.util.date_elements_to_string : + added in test of stlsoft::fast_strftime

Test.Scratch:

Dependencies:

 * STLSoft 1.9.134 or later, available from http://github.com/synesissoftware/STLSoft-1.9/, or STLSoft 1.10.1-beta20 available from http://github.com/synesissoftware/STLSoft-1.10/
 * b64 1.4.5, bundled in this distribution
 * shwild 0.10.4, bundled in this distribution (Required only for Unit and Component tests)
 * xContract 0.3.11, bundled in this distribution (Only required if custom preprocessor object-like macro PANTHEIOS_QA_USE_XCONTRACT is specified)
 * xCover 0.5.2, bundled in this distribution (Only required if custom preprocessor object-like macro PANTHEIOS_COVER_MARK_ENTRY is specified)
 * xTests 0.19.2, bundled in this distribution (Required only for Unit and Component tests)



29th January 2017 - 1.0.1 beta 218
==================================

Summary:
--------

 * added pantheios::windows::hive inserter and component test
 * added date elements -> string conversion functions
 * added pantheios::windows::hive inserter
 * added pantheios_be_N_tokenFromId()
 * added pantheios_getStockSeverityStringSlice()
 * added test.component.inserters.windows.hive
 * added test.performance.util.date_elements_to_string
 * added test.unit.inserters.windows.sc
 * added test.unit.util.date_elements_to_string
 * added callback functionality for be.WindowsEventLog
 * added PANTHEIOS_BE_INIT_F_NUMERIC_SEVERITY flag, which specifies that the severity will always be presented in numeric form in stock back-ends
 * added PANTHEIOS_BE_WINDOWSCONSOLE_F_CLEAR_AFTER_EACH_STATEMENT
 * added PANTHEIOS_BE_WINDOWSCONSOLE_F_RECOGNISE_16_SEVERITIES
 * stock back-ends now use the severity number for severity levels in the range [8, 16)
 * tightening up initialisation logic, in case where process identity cannot be provided by the front-end (which should not strictly happen, but we want to be as tight as possible)
 * separated out the default initialiser Schwarz counter instance from the counter header (so that it can be used separately)
 * extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)
 * compatibility with STLSoft 1.9 and STLSoft 1.10.1 beta 2+
 * added CC_CUSTOM_DEFS_DEBUG, CC_CUSTOM_DEFS_RELEASE, CPPC_CUSTOM_DEFS_DEBUG, CPPC_CUSTOM_DEFS_RELEASE
 * moved pantheios_exitProcess (src/core/api.exitprocess.cpp) from Core to Util library
 * added clean.libs.util target
 * added compile.test.all target
 * changed compile.test target to be dependent only on compile.test.unit and compile.test.component targets
 * improved use of make preprocessor
 * shortening some target/intermediate names

Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)
    ~ section-header canonicalisation
    + added pantheios_getStockSeverityStringSlice()
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)
    ~ required STLSoft 1.9.129

 ~ include/pantheios/internal/initialiser.hpp:
    ~ separated out the default initialiser Schwarz counter instance from the counter header (so that it can be used separately)

 ~ include/pantheios/internal/slice.hpp:
 ~ include/pantheios/shims/access/string/core/pan_slice_t.hpp:
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)

 ~ include/pantheios/implicit_link/implicit_link_base_.h:
    ~ fixing implicit-link compiler message

Core:

 ~ src/core/api.cpp:
    ~ STLSoft 1.10+ compatibility
    ~ section-header canonicalisation
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)
    ~ tightening up initialisation logic, in case where process identity cannot be provided by the front-end (which should not strictly happen, but we want to be as tight as possible)
    ~ preparatory refactoring

 ~ src/core/api.deprecated.c:
 ~ src/core/api.exitprocess.cpp:
 ~ src/core/api.logputs.cpp:
    ~ section-header canonicalisation

Application Layer:

 ~ include/pantheios/pantheios.hpp:
    ~ separated out the default initialiser Schwarz counter instance from the counter header (so that it can be used separately)

 + include/pantheios/inserters/windows/hive.hpp:
    + added pantheios::windows::hive inserter

 ~ src/inserters/integer.cpp:
 ~ src/inserters/interval.cpp:
 ~ src/inserters/processid.cpp:
 ~ src/inserters/slice.cpp:
 ~ src/inserters/threadid.cpp:
    ~ compatibility with the imminent STLSoft 1.10 b1
    ~ compatibility with STLSoft 1.10 (beta 1) (or later)
    ~ preparatory refactoring

 ~ src/inserters/pointer.cpp:
    ~ preparatory refactoring

Tracing:

Assertion:

Util:

 ~ include/pantheios/util/backends/arguments.h:
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)

 ~ include/pantheios/util/memory/auto_buffer_selector.hpp:
    ~ STLSoft 1.10+ compatibility

 ~ include/pantheios/util/severity/WindowsEventLog.h:
    + added date elements -> string conversion

 + include/pantheios/util/string/date_elements_to_string.h:
    + added pantheios_util_formatMillisecondToString3()
    + added pantheios_util_formatMicrosecondToString6()
    ~ whitespace
    + added date elements -> string conversion

 ~ src/util/bailout.c:
    ~ section-header canonicalisation
    ~ warning

 ~ src/util/be.context.cpp:
    ~ section-header canonicalisation
    ~ stock back-ends now use the severity number for severity levels in the range [8, 16)
    + added PANTHEIOS_BE_INIT_F_NUMERIC_SEVERITY flag, which specifies that the severity will always be presented in numeric form in stock back-ends

 ~ src/util/be.parse.cpp:
    + added PANTHEIOS_BE_INIT_F_NUMERIC_SEVERITY flag, which specifies that the severity will always be presented in numeric form in stock back-ends
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)

 + src/util/date_elements_to_string.c:
    ~ section-header canonicalisation
    + added pantheios_util_formatMillisecondToString3()
    + added pantheios_util_formatMicrosecondToString6()

 ~ src/util/severity_strings.c:
    + added pantheios_getStockSeverityStringSlice()

 ~ src/util/strnlen.cpp:
 ~ src/util/util.strnlen.c:
    ~ section-header canonicalisation

 ~ src/util/time.cpp:
    ~ compatibility with the imminent STLSoft 1.10 b1
    ~ preparatory refactoring

Extras:

Front-ends:

 ~ include/pantheios/frontend.h:
    ~ formatting

 ~ include/pantheios/frontends/fe.N.h:
 ~ include/pantheios/frontends/stock.h:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)

 ~ src/frontends/fe.WindowsRegistry.cpp:
    ~ forward compatibility with STLSoft 1.10+

Back-ends:

 ~ include/pantheios/backend.h:
    + added PANTHEIOS_BE_INIT_F_NUMERIC_SEVERITY flag, which specifies that the severity will always be presented in numeric form in stock back-ends

 ~ include/pantheios/backends/be.N.h:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)
    + added pantheios_be_N_tokenFromId()

 ~ include/pantheios/backends/bec.COMErrorObject.h:
 ~ include/pantheios/backends/bec.WindowsDebugger.h:
 ~ include/pantheios/backends/bec.WindowsSyslog.h:
 ~ include/pantheios/backends/bec.file.h:
 ~ include/pantheios/backends/bec.fprintf.h:
 ~ include/pantheios/backends/bec.loader.h:
 ~ include/pantheios/backends/bec.speech.h:
 ~ include/pantheios/backends/bec.syslog.h:
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)

 ~ include/pantheios/backends/bec.WindowsConsole.h:
    + added PANTHEIOS_BE_WINDOWSCONSOLE_F_CLEAR_AFTER_EACH_STATEMENT
    + added PANTHEIOS_BE_WINDOWSCONSOLE_F_RECOGNISE_16_SEVERITIES
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)

 ~ include/pantheios/backends/bec.WindowsEventLog.h:
    + callback functionality for be.WindowsEventLog

 + include/pantheios/implicit_link/be.WindowsEventLog.WithCallback.h:
 + include/pantheios/implicit_link/bec.WindowsEventLog.WithCallback.h:
 + include/pantheios/implicit_link/bel.WindowsEventLog.WithCallback.h:
 + include/pantheios/implicit_link/ber.WindowsEventLog.WithCallback.h:
    + callback functionality for be.WindowsEventLog

 ~ src/backends/be.N.c:
    + added pantheios_be_N_tokenFromId()

 ~ src/backends/bec.COMErrorObject.cpp:
 ~ src/backends/bec.WindowsDebugger.cpp:
 ~ src/backends/bec.WindowsMessageBox.cpp:
 ~ src/backends/bec.WindowsSyslog.cpp:
 ~ src/backends/bec.fail.c:
 ~ src/backends/bec.fprintf.cpp:
 ~ src/backends/bec.null.c:
 ~ src/backends/bec.speech.cpp:
 ~ src/backends/bec.syslog.c:
 ~ src/backends/bec.test.cpp:
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)

 ~ src/backends/bec.WindowsConsole.cpp:
    ~ VC++ 14 (2015) compatibility
    + added PANTHEIOS_BE_WINDOWSCONSOLE_F_CLEAR_AFTER_EACH_STATEMENT
    + added PANTHEIOS_BE_WINDOWSCONSOLE_F_RECOGNISE_16_SEVERITIES
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)
    ~ fixed conversion warning

 ~ src/backends/bec.WindowsEventLog.cpp:
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)
    + callback functionality for be.WindowsEventLog

 ~ src/backends/bec.file.cpp:
    ~ STLSoft 1.10+ compatibility
    ~ refactoring
    ~ extracted out pantheios_slice_t and various integer types, and simplified a number of API functions (incl. back-ends)

Distribution:

Documentation:

Makefiles / Project-files:

 ~ projects/core/vc10/pantheios.core.vcxproj:
 ~ projects/core/vc10/pantheios.core.vcxproj.filters:
    ~ fixes

 ~ projects/util/vc10/pantheios.util.vcxproj:
 ~ projects/util/vc10/pantheios.util.vcxproj.filters:
 ~ projects/util/vc6/pantheios.util.dsp:
    + added date elements -> string conversion

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 + build/bc62x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/gcc45.unix.file64bit/makefile:
 ~ build/gcc45.unix/makefile:
 ~ build/gcc46.unix.file64bit/makefile:
 ~ build/gcc46.unix/makefile:
 ~ build/gcc47.unix.file64bit/makefile:
 ~ build/gcc47.unix/makefile:
 ~ build/gcc48.unix.file64bit/makefile:
 ~ build/gcc48.unix/makefile:
 ~ build/gcc49.win32/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl12.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc11.unixem/makefile:
 ~ build/vc11.x64/makefile:
 ~ build/vc11/makefile:
 ~ build/vc12.unixem/makefile:
 ~ build/vc12.x64/makefile:
 ~ build/vc12/makefile:
 ~ build/vc14.unixem/makefile:
 ~ build/vc14.x64/makefile:
 ~ build/vc14/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ tidying of makefiles
    + added compile.test.all target
    ~ changed compile.test target to be dependent only on compile.test.unit and compile.test.component targets
    + added test.component.inserters.windows.hive
    ~ shortening some target/intermediate names
    + added test.unit.inserters.windows.sc
    ~ refactored generation of lib and bin directories (copied from libCLImate)
    ~ ACE-related items
    ~ moved pantheios_exitProcess (src/core/api.exitprocess.cpp) from Core library into Util library
    + added test.unit.util.date_elements_to_string
    + callback functionality for be.WindowsEventLog
    + added date elements -> string conversion
    ~ making pdb files' names unique across all compiler/configurations
    + added clean.libs.util target
    + added CC_CUSTOM_DEFS_DEBUG, CC_CUSTOM_DEFS_RELEASE, CPPC_CUSTOM_DEFS_DEBUG, CPPC_CUSTOM_DEFS_RELEASE

Examples:

 ~ examples/c/util/example.c.util.gethostname/example.c.util.gethostname.c:
    ~ forward-compatibility with STLSoft 1.10+

 ~ examples/cpp/backends/example.cpp.backends.callback/example.cpp.backends.callback.cpp:
 ~ examples/cpp/backends/example.cpp.backends.file.callback/example.cpp.backends.file.callback.cpp:
 ~ examples/cpp/backends/example.cpp.backends.file.lrsplit/example.cpp.backends.file.lrsplit.cpp:
 ~ examples/cpp/backends/example.cpp.backends.file/example.cpp.backends.file.cpp:
 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT/example.cpp.contract.PANTHEIOS_ASSERT.cpp:
 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT.cpp:
 ~ examples/cpp/format/example.cpp.format.highres/example.cpp.format.highres.cpp:
 ~ examples/cpp/format/example.cpp.format.lowres/example.cpp.format.lowres.cpp:
 ~ examples/cpp/format/example.cpp.format.pad/example.cpp.format.pad.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.args/example.cpp.inserter.args.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.b/example.cpp.inserter.b.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.b64/example.cpp.inserter.b64.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.blob/example.cpp.inserter.blob.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.character/example.cpp.inserter.character.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.hex_ptr/example.cpp.inserter.hex_ptr.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.hostid/example.cpp.inserter.hostid.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.i/example.cpp.inserter.i.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.integer/example.cpp.inserter.integer.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.m2w/example.cpp.inserter.m2w.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.p/example.cpp.inserter.p.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.pointer/example.cpp.inserter.pointer.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.processid/example.cpp.inserter.processid.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.real/example.cpp.inserter.real.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.threadid/example.cpp.inserter.threadid.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.w2m/example.cpp.inserter.w2m.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.xi/example.cpp.inserter.xi.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.xp/example.cpp.inserter.xp.cpp:
 ~ examples/cpp/linking/example.cpp.linking.implicit_link_1/example.cpp.linking.implicit_link_1.cpp:
 ~ examples/cpp/misc/example.cpp.misc.custom_type_1/example.cpp.misc.custom_type_1.cpp:
 ~ examples/cpp/misc/example.cpp.misc.extended_severity_information/example.cpp.misc.extended_severity_information.cpp:
 ~ examples/cpp/misc/example.cpp.misc.hetero1/example.cpp.misc.hetero1.cpp:
 ~ examples/cpp/misc/example.cpp.misc.strings/example.cpp.misc.strings.cpp:
 ~ examples/cpp/tracing/example.cpp.tracing.standard/example.cpp.tracing.standard.cpp:
 ~ examples/cpp/tracing/example.cpp.tracing.with_function/example.cpp.tracing.with_function.cpp:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)

 ~ examples/cpp/backends/example.cpp.backends.mx.1/example.cpp.backends.mx.1.cpp:
 ~ examples/cpp/backends/example.cpp.backends.mx.2/example.cpp.backends.mx.2.cpp:
    ~ section-header canonicalisation

Test:

Test.Unit:

 ~ test/unit/inserters/test.unit.inserter.integer/test.unit.inserter.integer.cpp:
 ~ test/unit/inserters/test.unit.inserter.m2w/test.unit.inserter.m2w.cpp:
 ~ test/unit/inserters/test.unit.inserter.w2m/test.unit.inserter.w2m.cpp:
 ~ test/unit/test.unit.be.N.filtering/test.unit.be.N.filtering.c:
 ~ test/unit/test.unit.be.WindowsSyslog/test.unit.be.WindowsSyslog.cpp:
 ~ test/unit/test.unit.be.fail/test.unit.be.fail.c:
 ~ test/unit/test.unit.be.lrsplit/test.unit.be.lrsplit.c:
 ~ test/unit/test.unit.bec.COMErrorObject/test.unit.bec.COMErrorObject.cpp:
 ~ test/unit/test.unit.bec.fail/test.unit.bec.fail.c:
 ~ test/unit/test.unit.fe.N/test.unit.fe.N.c:
 ~ test/unit/test.unit.fe.all/test.unit.fe.all.c:
 ~ test/unit/test.unit.fe.fail/test.unit.fe.fail.c:
 ~ test/unit/test.unit.fe.null/test.unit.fe.null.c:
 ~ test/unit/test.unit.fe.simple/test.unit.fe.simple.c:
 ~ test/unit/test.unit.inserters.windows.sc/implicit_link.cpp:
 ~ test/unit/test.unit.inserters.windows.sc/test.unit.inserters.windows.sc.cpp:
 ~ test/unit/test.unit.levels.dynamic_initialisation/test.unit.levels.dynamic_initialisation.cpp:
 ~ test/unit/test.unit.util.getcurrenttime/test.unit.util.getcurrenttime.cpp:
 ~ test/unit/test.unit.util.gethostname/test.unit.util.gethostname.cpp:
 ~ test/unit/test.unit.util.onbailout/test.unit.util.onbailout.cpp:
 ~ test/unit/test.unit.util.strnlen/test.unit.util.strnlen.cpp:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)

 ~ test/unit/test.unit.be.N/test.unit.be.N.c:
 ~ test/unit/test.unit.bec.file/test.unit.bec.file.cpp:
 ~ test/unit/test.unit.bec.fprintf/test.unit.bec.fprintf.cpp:
 ~ test/unit/test.unit.fe.WindowsRegistry/test.unit.fe.WindowsRegistry.cpp:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)
    ~ dependencies

 + test/unit/test.unit.util.date_elements_to_string/test.unit.util.date_elements_to_string.cpp:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)
    ~ dependencies
    + added pantheios_util_formatMillisecondToString3()
    + added pantheios_util_formatMicrosecondToString6()
    ~ using conversion in concert

Test.Component:

 ~ test/component/test.component.be.file.threading/test.component.be.file.threading.cpp:
 ~ test/component/test.component.core.pantheios_logprintf/test.component.core.pantheios_logprintf.cpp:
 ~ test/component/test.component.core.pantheios_logputs/test.component.core.pantheios_logputs.cpp:
 ~ test/component/test.component.custom_severity/test.component.custom_severity.cpp:
 ~ test/component/test.component.inserters.args/test.component.inserters.args.cpp:
 ~ test/component/test.component.inserters.b64/test.component.inserters.b64.cpp:
 ~ test/component/test.component.inserters.boolean/test.component.inserters.boolean.cpp:
 ~ test/component/test.component.inserters.hostId/test.component.inserters.hostId.cpp:
 ~ test/component/test.component.inserters.integer/test.component.inserters.integer.cpp:
 ~ test/component/test.component.inserters.m2w/test.component.inserters.m2w.cpp:
 ~ test/component/test.component.inserters.pad/test.component.inserters.pad.cpp:
 ~ test/component/test.component.inserters.pointer/test.component.inserters.pointer.cpp:
 ~ test/component/test.component.inserters.processId/test.component.inserters.processId.cpp:
 ~ test/component/test.component.inserters.real/test.component.inserters.real.cpp:
 ~ test/component/test.component.inserters.slice/test.component.inserters.slice.cpp:
 ~ test/component/test.component.inserters.stream_character/test.component.inserters.stream_character.cpp:
 ~ test/component/test.component.inserters.threadId/test.component.inserters.threadId.cpp:
 ~ test/component/test.component.inserters.variant_bool/test.component.inserters.variant_bool.cpp:
 ~ test/component/test.component.inserters.w2m/test.component.inserters.w2m.cpp:
 ~ test/component/test.component.log.1/test.component.log.1.cpp:
 ~ test/component/test.component.trace.1/test.component.trace.1.cpp:
 + test/performance/test.performance.util.date_elements_to_string/test.performance.util.date_elements_to_string.cpp:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)

 + test/component/test.component.inserters.windows.hive/implicit_link.cpp:
 + test/component/test.component.inserters.windows.hive/test.component.inserters.windows.hive.cpp:
    + added test.component.inserters.windows.hive

Test.Performance:

 ~ test/performance/pantheios.test.performance.vc6.dsw:
    + added test.performance.util.date_elements_to_string

 ~ test/performance/test.performance.inserters.m2w/test.performance.inserters.m2w.cpp:
 ~ test/performance/test.performance.inserters.w2m/test.performance.inserters.w2m.cpp:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)

 + test/performance/test.performance.util.date_elements_to_string/test.performance.util.date_elements_to_string.cpp:
    + added test.performance.util.date_elements_to_string

Test.Scratch:

 ~ test/scratch/test.scratch.I18N/test.scratch.I18N.cpp:
 ~ test/scratch/test.scratch.WideString/test.scratch.WideString.cpp:
 ~ test/scratch/test.scratch.api/test.scratch.api.cpp:
 + test/scratch/test.scratch.be.ACE/test.scratch.be.ACE.cpp:
 ~ test/scratch/test.scratch.be.N.fail/test.scratch.be.N.fail.cpp:
 ~ test/scratch/test.scratch.be.N.with.custom.fe/test.scratch.be.N.with.custom.fe.cpp:
 ~ test/scratch/test.scratch.be.N/test.scratch.be.N.cpp:
 ~ test/scratch/test.scratch.be.WindowsSyslog.WithCallback/test.scratch.be.WindowsSyslog.WithCallback.cpp:
 ~ test/scratch/test.scratch.be.WindowsSyslog/test.scratch.be.WindowsSyslog.cpp:
 ~ test/scratch/test.scratch.be.file.rolling/test.scratch.be.file.rolling.cpp:
 ~ test/scratch/test.scratch.be.file/test.scratch.be.file.cpp:
 ~ test/scratch/test.scratch.be.pantheios.COM/test.scratch.be.pantheios.COM.cpp:
 ~ test/scratch/test.scratch.be.speech/test.scratch.be.speech.cpp:
 ~ test/scratch/test.scratch.be.syslog.WithCallback/test.scratch.be.syslog.WithCallback.cpp:
 ~ test/scratch/test.scratch.be.syslog/test.scratch.be.syslog.cpp:
 ~ test/scratch/test.scratch.bec.WindowsConsoleCallback/test.scratch.bec.WindowsConsoleCallback.cpp:
 ~ test/scratch/test.scratch.bec.WindowsMessageBox/test.scratch.bec.WindowsMessageBox.cpp:
 ~ test/scratch/test.scratch.c_api/test.scratch.c_api.c:
 ~ test/scratch/test.scratch.extras.com.invoke_nothrow_method/test.scratch.extras.com.invoke_nothrow_method.cpp:
 ~ test/scratch/test.scratch.extras.com_exception_helpers/test.scratch.extras.com_exception_helpers.cpp:
 ~ test/scratch/test.scratch.fe.WindowsRegistry/test.scratch.fe.WindowsRegistry.cpp:
 ~ test/scratch/test.scratch.implicit_link/test.scratch.implicit_link.cpp:
 ~ test/scratch/test.scratch.pseudoUNIX/test.scratch.pseudoUNIX.c:
 ~ test/scratch/test.scratch.trace/test.scratch.trace.cpp:
 ~ test/scratch/test.scratch.tstring/test.scratch.tstring.cpp:
 ~ test/scratch/test.scratch.util.onbailout/test.scratch.util.onbailout.cpp:
    + added PANTHEIOS_EXTERN, which is extern "C" in C++  and extern in C
    ~ redefined PANTHEIOS_EXTERN_C in C-compilation (to nothing)

 + test/scratch/test.scratch.bec.WindowsConsole/diagnostics.cpp:
    + added test.scratch.bec.WindowsConsole

Dependencies:

 * STLSoft 1.9.131 or later, available from http://stlsoft.org/, or STLSoft 1.10.1-beta2 available from http://github.com/synesissoftware/STLSoft-1.10/
 * b64 1.4.4, bundled in this distribution
 * shwild 0.10.4, bundled in this distribution (Required only for Unit and Component tests)
 * xContract 0.3.11, bundled in this distribution (Only required if custom preprocessor object-like macro PANTHEIOS_QA_USE_XCONTRACT is specified)
 * xCover 0.5.2, bundled in this distribution (Only required if custom preprocessor object-like macro PANTHEIOS_COVER_MARK_ENTRY is specified)
 * xTests 0.19.2, bundled in this distribution (Required only for Unit and Component tests)



30th June 2016 - 1.0.1 beta 217
===============================

Summary:
--------

 * added severityFloor to be.N
 * test.unit.be.N.filtering
 * pantheios::pointer : + added protected method get_value(), to be used by deriving types such as forthcoming pantheios::windows::hive inserter
 * PANTHEIOS_ASSERT() and PANTHEIOS_MESSAGE_ASSERT() underlying assertions may now be overriden (via preprocessor)
 * changed names and locations of generated files
 * changed no-throw declaration from stlsoft_throw_0() to STLSOFT_NOEXCEPT
 * refactoring of pantheios_util_strnlen()
 * added GCC 4.8 support
 * added GCC 4.9 support

Details:
--------

General:

Core:

Application Layer:

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.125 or later, available from http://stlsoft.org/
 * b64 1.4.3, bundled in this distribution
 * shwild 0.10.1, bundled in this distribution
 * xContract 0.3.8, bundled in this distribution
 * xCover 0.5.1, bundled in this distribution
 * xTests 0.18.6, bundled in this distribution



25th October 2015 - 1.0.1 beta 216
==================================

Summary:
--------

 * fixed defect introduced in 1.0.1 beta 215

Details:
--------

Application Layer:

 ~ include/pantheios/inserters.hpp:
    ~ fixed #error defect introduced in 1.0.1 beta 215

Makefiles / Project-files:

 * numerous trivial improvements

Dependencies:

 * STLSoft 1.9.121 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.10.1, bundled in this distribution
 * xCover 0.3.3, bundled in this distribution
 * xTests 0.18.5, bundled in this distribution



27th September 2015 - 1.0.1 beta 215
====================================

Summary:
--------

 * added interval inserter
 * added stream_character inserter
 * Clang-compatibility
 * VC++ 11-compatibility
 * VC++ 12-compatibility
 * VC++ 14-compatibility
 * showPlus format flag support in pantheios::integer (pan::i)
 * makefiles customisable to specify non-bundled locations of b64, shwild, xContract, xCover, and xTests libraries (useful to getting head from GitHub)

Details:
--------

 NOTE: there are too many differences to list - it's  been 3 years! - and also the change of source-control systems has resulted in an inability to derive differences automatically, so the above summary is all you get in this release :-/

Dependencies:

 * STLSoft 1.9.121 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.10.1, bundled in this distribution
 * xTests 0.18.3, bundled in this distribution



7th August 2012 - 1.0.1 beta 214
================================

Summary:
--------

 * added variant_bool inserter, for COM Automation type VARIANT_BOOL
 * added new core API function pantheios_getProcessIdentity(), which reflects new dynamic process identity semantics for front-ends, and new C++ alias pantheios::getProcessIdentity()
 * added PANTHEIOS_CARG_STR()/PANTHEIOS_CARG_STR_LEN() macros
 * added makefile for Intel C/C++ 12
 * pantheios::character inserter now compatible with wide characters, and allow conversion construction from char when widestring mode (i.e. expecting wchar_t)
 * adjusted core initialisation to support new dynamic process identity semantics for front-ends
 * preparations for division of core (and later implementation in C)
 * refactoring of memory-pool
 * changed way in which core discriminates atomic integer operation support when in multithreaded mode
 * pantheios::inserter adaptor is now wide-string compatible
 * added test.component.core.getProcessIdentity project
 * added test.component.inserters.variant_bool
 * added test.scratch.be.WindowsSyslog project
 * added test.scratch.be.WindowsSyslog.WithCallback project
 * bec.WindowsConsole now implemented in terms of pantheios_util_snprintf(), and made fully compatible with 64-bit
 * fixed bec.WindowsSyslog defect in arguments parsing (whereby supplied address would be ignored)
 * removed use of deprecated format flag 'zeroPadded', replaced with 'zeroPad'
 * wholesale tidying of definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())
 * wholesale changes for compatibility with STLSoft 1.9.115+'s integer_to_string
 * NOTE: Now requires STLSoft 1.9.115


Details:
--------

General:

 ~ include/pantheios/internal/threading.h:
    + now also discriminates PANTHEIOS_MT_HAS_ATOMIC_INTEGER_OPERATIONS (based on presence of PLATFORMSTL_HAS_ATOMIC_INTEGER_OPERATIONS and absence of PANTHEIOS_FORCE_NO_ATOMIC_INTEGER_OPERATIONS)

 ~ include/pantheios/pantheios.h:
    + added new core API function pantheios_getProcessIdentity(), which reflects new dynamic process identity semantics for front-ends
    + added new C++ alias pantheios::getProcessIdentity()
    ~ suppresses definition of undocumented internal function alias pantheios::malloc when malloc symbol is #defined
    ~ requires STLSoft 1.9.115
    ~ updated 'Generalized String Manipulation ..." article URL (on Dr Dobb's)
    ~ various documentation improvements
    + added PANTHEIOS_CARG_STR()/PANTHEIOS_CARG_STR_LEN() macros

Core:

 ~ src/core/api.cpp:
    + added new core API function pantheios_getProcessIdentity(), which reflects new dynamic process identity semantics for front-ends
    ~ adjusted core initialisation to support new dynamic process identity semantics for front-ends
    ~ sketched plan for making process-identity dynamic
    ~ tidying
    ~ Intel C/C++ 12 compatibility
    ~ widestring compatibility
    ~ moved pantheios_exitProcess() from src/api.cpp to src/api.exitprocess.cpp
    ~ moved pantheios_logputs() from src/api.cpp to src/api.logputs.cpp
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c
    ~ preparations for division of core (and later implementation in C)
    ~ refactoring of use of pantheios_fe_getProcessIdentity(); now is called at most once if initialisation is successful; code asserts that process identity length <= 1000
    ~ refactoring of memory-pool
    ~ changed way in which core discriminates atomic integer operation support when in multithreaded mode
    ~ now facilitates (compile-time) customisation of back-end Id base value (via pre-processor symbol PANTHEIOS_CORE_BACKENDID_BASE, which defaults to 1000)

 ~ src/core/api.deprecated.c:
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c
    ~ preparations for division of core (and later implementation in C)
    ~ refactoring of use of pantheios_fe_getProcessIdentity(); now is called at most once if initialisation is successful; code asserts that process identity length <= 1000
    ~ refactoring of memory-pool
    ~ changed way in which core discriminates atomic integer operation support when in multithreaded mode
    ~ now facilitates (compile-time) customisation of back-end Id base value (via pre-processor symbol PANTHEIOS_CORE_BACKENDID_BASE, which defaults to 1000)

 ~ src/core/api.exitprocess.cpp:
    ~ moved pantheios_exitProcess() from src/api.cpp to src/api.exitprocess.cpp
    ~ moved pantheios_logputs() from src/api.cpp to src/api.logputs.cpp
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c
    ~ preparations for division of core (and later implementation in C)
    ~ refactoring of use of pantheios_fe_getProcessIdentity(); now is called at most once if initialisation is successful; code asserts that process identity length <= 1000
    ~ refactoring of memory-pool
    ~ changed way in which core discriminates atomic integer operation support when in multithreaded mode
    ~ now facilitates (compile-time) customisation of back-end Id base value (via pre-processor symbol PANTHEIOS_CORE_BACKENDID_BASE, which defaults to 1000)

 ~ src/core/api.logputs.cpp:
    ~ moved pantheios_logputs() from src/api.cpp to src/api.logputs.cpp
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c
    ~ preparations for division of core (and later implementation in C)
    ~ refactoring of use of pantheios_fe_getProcessIdentity(); now is called at most once if initialisation is successful; code asserts that process identity length <= 1000
    ~ refactoring of memory-pool
    ~ changed way in which core discriminates atomic integer operation support when in multithreaded mode
    ~ now facilitates (compile-time) customisation of back-end Id base value (via pre-processor symbol PANTHEIOS_CORE_BACKENDID_BASE, which defaults to 1000)

Application Layer:

 ~ include/pantheios/inserters/adaptor.hpp:
    ~ wide-string compatible

 ~ include/pantheios/inserters/boolean.hpp:
    ~ internal changes (to facilitate variant_bool inserter class)

 ~ include/pantheios/inserters/character.hpp:
    ~ allow conversion construction from char when widestring mode (i.e. expecting wchar_t)
    ~ now compatible with wide characters

 ~ include/pantheios/inserters/fmt.hpp:
    ~ deprecated format flag 'zeroPadded' is now elided (unless PANTHEIOS_OBSOLETE is defined)
    + added provisional, currently, unsupported, showPlus format flag, in anticipation of new numeric conversions to be added prior to 1.0 final release
    ~ various documentation improvements

 ~ include/pantheios/inserters/hex_ptr.hpp:
 ~ include/pantheios/inserters/integer.hpp:
 ~ include/pantheios/inserters/pointer.hpp:
    ~ various documentation improvements

 ~ include/pantheios/inserters/slice.hpp:
    ~ improved documentation markup

 + include/pantheios/inserters/variant_bool.hpp:
    + added include/fastformat/inserters/variant_bool.hpp, which defines the fastformat::variant_bool inserter (for COM Automation's VARIANT_BOOL type)

 + include/pantheios/inserters/vb.hpp:
    + added include/fastformat/inserters/vb.hpp, which defines the fastformat::vb inserter as an alias for fastformat::variant_bool

 ~ src/inserters/boolean.cpp:
    + added variant_bool inserter

 ~ src/inserters/integer.cpp:
    - removed use of deprecated format flag 'zeroPadded', replaced with 'zeroPad'
    ~ compatibility with STLSoft 1.9.115+'s integer_to_string and integral_printf_traits

 ~ src/inserters/pointer.cpp:
    - removed use of deprecated format flag 'zeroPadded', replaced with 'zeroPad'

 ~ src/inserters/processid.cpp:
 ~ src/inserters/slice.cpp:
 ~ src/inserters/threadid.cpp:
    ~ compatibility with STLSoft 1.9.115+'s integer_to_string

Tracing:

Assertion:

Util:

 ~ src/util/bailout.c:
    ~ now implemented in terms of pantheios_util_snprintf_a()
    + added PANTHEIOS_BAILOUT_BAILOUT_FILE_NAME, which defaults to (existing standard) file path "logging-bailout.txt"

 ~ src/util/be.context.cpp:
    ~ compatibility with STLSoft 1.9.115+'s integer_to_string

 ~ src/util/strnlen.cpp:
    ~ tidying
    ~ moved implementation of pantheios_util_strnlen() into util.strnlen.c
    ~ removal of dependency on C++ standard library (in preparation for reimplementation in C)
    ~ minor preparations for C-implementation
    ~ trivial formatting changes

 ~ src/util/time.cpp:
    ~ trivial formatting changes

 ~ src/util/util.strnlen.c:
    ~ tidying
    ~ moved implementation of pantheios_util_strnlen() into util.strnlen.c
    ~ removal of dependency on C++ standard library (in preparation for reimplementation in C)
    ~ minor preparations for C-implementation
    ~ trivial formatting changes

Extras:

Front-ends:

 ~ include/pantheios/frontend.h:
    ~ updated documentation for pantheios_fe_getProcessIdentity(), to reflect new dynamic process identity semantics for front-ends
    + added documentation to the effect that the maximum length of the returned string from pantheios_fe_getProcessIdentity() is 1000

 ~ include/pantheios/frontends/fe.N.h:
    ~ documentation markup improvements
    ~ minor/trivial improvement in language conformance in 'warning' structure name

 ~ include/pantheios/frontends/stock.h:
    ~ improved documentation markup regarding the purpose and definition of PANTHEIOS_FE_PROCESS_IDENTITY

Back-ends:

 ~ src/backends/bec.WindowsConsole.cpp:
    ~ now implemented in terms of pantheios_util_snprintf()
    ~ 64-bit compatibility fix

 ~ src/backends/bec.WindowsSyslog.cpp:
    ~ compatibility with STLSoft 1.9.115+'s integer_to_string
    ~ fixed defect in arguments parsing (whereby supplied address would be ignored)

Distribution:

Documentation:

 ~ _internal/doc-src/architecture.src:
 ~ _internal/doc-src/mainpage.src:
    ~ updated 'Generalized String Manipulation ..." article URL (on Dr Dobb's)

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
    + added test.component.inserters.variant_bool
    ~ moved implementation of pantheios_util_strnlen() into util.strnlen.c
    ~ moved pantheios_exitProcess API functions from src/api.cpp to src/api.exitprocess.cpp (in preparation for reimplementation in C)
    ~ moved pantheios_logputs API functions from src/api.cpp to src/api.logputs.cpp (in preparation for reimplementation in C)
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c

 ~ build/como433.unix/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/gcc45.unix.file64bit/makefile:
 ~ build/gcc45.unix/makefile:
 ~ build/gcc46.unix.file64bit/makefile:
 ~ build/gcc46.unix/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc9.unixem/makefile:
    ~ moved implementation of pantheios_util_strnlen() into util.strnlen.c
    ~ moved pantheios_exitProcess API functions from src/api.cpp to src/api.exitprocess.cpp (in preparation for reimplementation in C)
    ~ moved pantheios_logputs API functions from src/api.cpp to src/api.logputs.cpp (in preparation for reimplementation in C)
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c

 + build/icl12.win32/makefile:
    + makefile for Intel C/C++ 12

 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/makefile.tmpl:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added test.component.inserters.variant_bool
    ~ moved implementation of pantheios_util_strnlen() into util.strnlen.c
    ~ moved pantheios_exitProcess API functions from src/api.cpp to src/api.exitprocess.cpp (in preparation for reimplementation in C)
    ~ moved pantheios_logputs API functions from src/api.cpp to src/api.logputs.cpp (in preparation for reimplementation in C)
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c
    ~ changed .widestring. to .ws. for local/temporary files

 + projects/core/vc10/pantheios.core.vcxproj:
    ~ moved pantheios_exitProcess API functions from src/api.cpp to src/api.exitprocess.cpp (in preparation for reimplementation in C)
    ~ moved pantheios_logputs API functions from src/api.cpp to src/api.logputs.cpp (in preparation for reimplementation in C)
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c

 ~ projects/core/vc6/pantheios.core.dsp:
 ~ projects/core/vc71/pantheios.core.vcproj:
 ~ projects/core/vc8/pantheios.core.vcproj:
 ~ projects/core/vc9/pantheios.core.vcproj:
    ~ moved pantheios_exitProcess API functions from src/api.cpp to src/api.exitprocess.cpp (in preparation for reimplementation in C)
    ~ moved pantheios_logputs API functions from src/api.cpp to src/api.logputs.cpp (in preparation for reimplementation in C)
    ~ moved deprecated core API functions from src/api.cpp to src/api.deprecated.c

 + projects/util/vc10/pantheios.util.vcxproj:
    ~ moved implementation of pantheios_util_strnlen() into util.strnlen.c

 ~ projects/util/vc71/pantheios.util.vcproj:
 ~ projects/util/vc8/pantheios.util.vcproj:
 ~ projects/util/vc9/pantheios.util.vcproj:
    ~ moved implementation of pantheios_util_strnlen() into util.strnlen.c

Examples:

 ~ examples/cpp/inserters/example.cpp.inserter.hex_ptr/example.cpp.inserter.hex_ptr.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.p/example.cpp.inserter.p.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.pointer/example.cpp.inserter.pointer.cpp:
    - removed use of deprecated format flag 'zeroPadded', replaced with 'zeroPad'

 ~ examples/cpp/inserters/example.cpp.inserter.w2m/example.cpp.inserter.w2m.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())

Test:

Test.Unit:

Test.Component:

 + test/component/test.component.core.getProcessIdentity/implicit_link.c:
 + test/component/test.component.core.getProcessIdentity/test.component.core.getProcessIdentity.c:
 + test/component/test.component.core.getProcessIdentity/vc6/test.component.core.getProcessIdentity.dsp:
    + added test.component.core.getProcessIdentity project

 ~ test/component/test.component.core.pantheios_logprintf/test.component.core.pantheios_logprintf.cpp:
 ~ test/component/test.component.core.pantheios_logputs/test.component.core.pantheios_logputs.cpp:
 ~ test/component/test.component.custom_severity/test.component.custom_severity.cpp:
 ~ test/component/test.component.inserters.args/test.component.inserters.args.cpp:
 ~ test/component/test.component.inserters.integer/test.component.inserters.integer.cpp:
 ~ test/component/test.component.inserters.pad/test.component.inserters.pad.cpp:
 ~ test/component/test.component.inserters.pointer/test.component.inserters.pointer.cpp:
 ~ test/component/test.component.inserters.real/test.component.inserters.real.cpp:
 ~ test/component/test.component.inserters.slice/test.component.inserters.slice.cpp:
 ~ test/component/test.component.inserters.threadId/test.component.inserters.threadId.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())

 ~ test/component/test.component.inserters.variant_bool/implicit_link.cpp:
 ~ test/component/test.component.inserters.variant_bool/test.component.inserters.variant_bool.cpp:
 ~ test/component/test.component.inserters.variant_bool/vc6/test.component.inserters.variant_bool.dsp:
    + added test.component.inserters.variant_bool

 ~ test/component/test.component.inserters.w2m/test.component.inserters.w2m.cpp:
 ~ test/component/test.component.trace.1/test.component.trace.1.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())

Test.Performance:

Test.Scratch:

 ~ test/scratch/test.scratch.api/test.scratch.api.cpp:
    - removed use of deprecated format flag 'zeroPadded', replaced with 'zeroPad'

 ~ test/scratch/test.scratch.be.N.with.custom.fe/test.scratch.be.N.with.custom.fe.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())

 + test/scratch/test.scratch.be.WindowsSyslog.WithCallback/implicit_link.cpp:
    + added test.scratch.be.WindowsSyslog.WithCallback project

 + test/scratch/test.scratch.be.WindowsSyslog.WithCallback/test.scratch.be.WindowsSyslog.WithCallback.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())
    + added test.scratch.be.WindowsSyslog.WithCallback project

 + test/scratch/test.scratch.be.WindowsSyslog.WithCallback/vc6/test.scratch.be.WindowsSyslog.WithCallback.dsp:
    + added test.scratch.be.WindowsSyslog.WithCallback project

 + test/scratch/test.scratch.be.WindowsSyslog/implicit_link.cpp:
    + added test.scratch.be.WindowsSyslog project

 + test/scratch/test.scratch.be.WindowsSyslog/test.scratch.be.WindowsSyslog.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())
    + added test.scratch.be.WindowsSyslog project

 + test/scratch/test.scratch.be.WindowsSyslog/vc6/test.scratch.be.WindowsSyslog.dsp:
    + added test.scratch.be.WindowsSyslog project

 ~ test/scratch/test.scratch.be.file.rolling/test.scratch.be.file.rolling.cpp:
 ~ test/scratch/test.scratch.be.pantheios.COM/test.scratch.be.pantheios.COM.cpp:
 ~ test/scratch/test.scratch.be.speech/test.scratch.be.speech.cpp:
 ~ test/scratch/test.scratch.be.syslog.WithCallback/test.scratch.be.syslog.WithCallback.cpp:
 ~ test/scratch/test.scratch.be.syslog/test.scratch.be.syslog.cpp:
 ~ test/scratch/test.scratch.bec.WindowsConsoleCallback/test.scratch.bec.WindowsConsoleCallback.cpp:
 ~ test/scratch/test.scratch.bec.WindowsMessageBox/test.scratch.bec.WindowsMessageBox.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())

 ~ test/scratch/test.scratch.c_api/test.scratch.c_api.c:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())
    ~ added code to illustrate new PANTHEIOS_CARG_STR()/PANTHEIOS_CARG_STR_LEN() macros

 ~ test/scratch/test.scratch.extras.com.invoke_nothrow_method/test.scratch.extras.com.invoke_nothrow_method.cpp:
 ~ test/scratch/test.scratch.extras.com_exception_helpers/test.scratch.extras.com_exception_helpers.cpp:
 ~ test/scratch/test.scratch.fe.WindowsRegistry/test.scratch.fe.WindowsRegistry.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())

 ~ test/scratch/test.scratch.fe/test.scratch.fe.cpp:
    - removed use of deprecated format flag 'zeroPadded', replaced with 'zeroPad'

 ~ test/scratch/test.scratch.implicit_link/test.scratch.implicit_link.cpp:
 ~ test/scratch/test.scratch.pseudoUNIX/test.scratch.pseudoUNIX.c:
 ~ test/scratch/test.scratch.trace/test.scratch.trace.cpp:
 ~ test/scratch/test.scratch.tstring/test.scratch.tstring.cpp:
 ~ test/scratch/test.scratch.util.onbailout/test.scratch.util.onbailout.cpp:
 ~ test/unit/inserters/test.unit.inserter.w2m/test.unit.inserter.w2m.cpp:
 ~ test/unit/test.unit.levels.dynamic_initialisation/test.unit.levels.dynamic_initialisation.cpp:
 ~ test/unit/test.unit.util.gethostname/test.unit.util.gethostname.cpp:
 ~ test/unit/test.unit.util.onbailout/test.unit.util.onbailout.cpp:
    ~ tidied up definition of PANTHEIOS_FE_PROCESS_IDENTITY (in terms of PANTHEIOS_EXTERN_C and PANTHEIOS_LITERAL_STRING())

Dependencies:

 * STLSoft 1.9.115 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9.20, bundled in this distribution
 * xTests 0.16.6, bundled in this distribution



6th December 2011 - 1.0.1 beta 213
==================================

Summary:
--------

 * added GCC 4.6 makefiles
 * enhanced GCC compatibility in util component(s)
 * declared pantheios_exitProcess() (and pantheios::exitProcess()) to be noreturn (effective in GCC and VC++)
 * pantheios/util/com/exception_helpers.hpp is now deprecated. Users should instead obtain the Pantheios::Extras::xHelpers project, and include pantheios/extras/com/exception_helpers.hpp
 * NOTE: Now requires STLSoft 1.9.111


Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    ~ declared pantheios_exitProcess() (and pantheios::exitProcess()) to be noreturn

Core:

Application Layer:

Tracing:

Assertion:

Util:

 ~ src/util/bailout.c:
    ~ GCC compatibility

Extras:

 ~ include/pantheios/util/com/exception_helpers.hpp:
    - pantheios/util/com/exception_helpers.hpp is now deprecated. Users should instead obtain the Pantheios::Extras::xHelpers project, and include pantheios/extras/com/exception_helpers.hpp

Front-ends:

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

 + build/gcc46.unix.file64bit/makefile:
    + added GCC 4.6 makefiles

 + build/gcc46.unix/makefile:
    + added GCC 4.6 makefiles

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.111 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9.19, bundled in this distribution
 * xTests 0.16.3, bundled in this distribution



13th August 2011 - 1.0.1 beta 212
=================================

Summary:
--------

 * fixes to various minor defects and documentation
 * added GCC format(printf) attribute to pantheios_util_snprintf_a()
 * NOTE: Now requires STLSoft 1.9.109


Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    ~ avoids a name-shadowing warning on GCC

Core:

Application Layer:

 ~ include/pantheios/pan.hpp:
    + added #pragma once

 ~ include/pantheios/inserters/boolean.hpp:
    ~ fixed documentation

Tracing:

Assertion:

Util:

 ~ include/pantheios/util/string/snprintf.h:
    + added GCC format(printf) attribute to pantheios_util_snprintf_a()

Extras:

Front-ends:

 ~ src/frontends/fe.N.c:
 ~ src/frontends/fe.WindowsRegistry.cpp:
 ~ src/frontends/fe.simple.c:
    ~ trivial syntactic changes

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 ~ test/unit/inserters/test.unit.inserter.integer/test.unit.inserter.integer.cpp:
    ~ fixed compiler error in wide-string

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.109 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



1st January 2011 - 1.0.1 beta 211
=================================

Summary:
--------

 * fixed erroneous implementation of pantheios_be_file_flush() in be.file
 * changes in be.file to adapt to STLSoft 1.9.107/8
 * changes to be.file to hide false positives given by MSVCRT memory leak reporting
 * fixed widestring trailing nul character (via STLSoft 1.9.107 char conversions) in bec.WindowsSyslog
 * exposed pantheios::init() and pantheios::uninit() in documentation
 * non-functional improvements to implementation of pantheios_getPad(), including ability to adjust buffer size at compile time.
 * slightly enhanced status message for PANTHEIOS_INIT_RC_NOT_IMPLEMENTED
 * various other trivial changes to a number of source/project files
 * NOTE: Now requires STLSoft 1.9.108


Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    ~ amendments to undocumented API
    + exposed pantheios::init() and pantheios::uninit() in documentation
    ~ documentation improvements

Core:

 ~ src/core/api.cpp:
    ~ trivial whitespace changes
    ~ non-functional improvements to implementation of pantheios_getPad(), including ability to adjust buffer size at compile time.

Application Layer:

Tracing:

Assertion:

Util:

 ~ src/util/init_code_strings.c:
    ~ slightly enhanced status message for PANTHEIOS_INIT_RC_NOT_IMPLEMENTED

Extras:

Front-ends:

Back-ends:

 ~ src/backends/bec.WindowsSyslog.cpp:
    ~ fixed widestring trailing nul character (via STLSoft 1.9.107 char conversions)

 ~ src/backends/bec.file.cpp:
    ~ tidied implementation based on recently enhanced abstractions in STLSoft's filesystem_traits
    ~ changed to adapt to changes in stlsoft::a2w/stlsoft::w2a in STLSoft 1.9.107/8
    ~ hide false positivies given by MSVCRT memory leak reporting of file path field's memory
    ~ correctly implemented the erroneous implementation of pantheios_be_file_flush()
    ~ hide false positivies given by MSVCRT memory leak reporting, due to FF's caching of parsed format strings
    ~ trivial comment changes
    ~ hide false positivies given by MSVCRT memory leak reporting, due to be.file's caching of statements when not currently writing to a file

 ~ src/backends/bel/bel.WindowsSyslog.c:
 ~ src/backends/ber/ber.WindowsSyslog.c:
    ~ trivial formatting change

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/gcc45.unix.file64bit/makefile:
 ~ build/gcc45.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc9.unixem/makefile:
    ~ simplified the naming of bin and lib targets within the makefiles

 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ simplified the naming of bin and lib targets within the makefiles
    ~ fixed up makefile defect where example.cpp.inserter.w2m was included in some widestring builds

 ~ projects/backends/pantheios.backends.vc6.dsw:
 ~ projects/frontends/pantheios.frontends.vc6.dsw:
    ~ updated VS'98 solution file with all projects

Examples:

 ~ examples/cpp/backends/pantheios.examples.cpp.backends.vc6.dsw:
 ~ examples/cpp/contract/pantheios.examples.cpp.contract.vc6.dsw:
 ~ examples/cpp/custom/pantheios.examples.cpp.custom.vc6.dsw:
 ~ examples/cpp/format/pantheios.examples.cpp.format.vc6.dsw:
 ~ examples/cpp/frontends/pantheios.examples.cpp.frontends.vc6.dsw:
 ~ examples/cpp/inserters/pantheios.examples.cpp.inserters.vc6.dsw:
 ~ examples/cpp/linking/pantheios.examples.cpp.linking.vc6.dsw:
 ~ examples/cpp/misc/pantheios.examples.cpp.misc.vc6.dsw:
 ~ examples/cpp/pantheios.examples.cpp.vc6.dsw:
    ~ updated VS'98 solution file with all projects

Test:

Test.Unit:

 ~ test/unit/pantheios.test.unit.vc6.dsw:
    ~ updated VS'98 solution file with all projects

 ~ test/unit/test.unit.be.N/implicit_link.cpp:
 ~ test/unit/test.unit.be.WindowsSyslog/implicit_link.cpp:
 ~ test/unit/test.unit.be.WindowsSyslog/test.unit.be.WindowsSyslog.cpp:
 ~ test/unit/test.unit.be.fail/implicit_link.cpp:
 ~ test/unit/test.unit.be.lrsplit/implicit_link.cpp:
 ~ test/unit/test.unit.bec.COMErrorObject/implicit_link.cpp:
 ~ test/unit/test.unit.bec.fail/implicit_link.cpp:
 ~ test/unit/test.unit.bec.file/implicit_link.cpp:
 ~ test/unit/test.unit.fe.N/implicit_link.cpp:
 ~ test/unit/test.unit.fe.all/implicit_link.cpp:
 ~ test/unit/test.unit.fe.fail/implicit_link.cpp:
 ~ test/unit/test.unit.fe.null/implicit_link.cpp:
 ~ test/unit/test.unit.fe.simple/implicit_link.cpp:
 ~ test/unit/test.unit.getversion/implicit_link.cpp:
 ~ test/unit/test.unit.getversion/test.unit.getversion.c:
 ~ test/unit/test.unit.levels.dynamic_initialisation/implicit_link.cpp:
    ~ trivial formatting change

Test.Component:

 ~ test/component/pantheios.test.component.vc6.dsw:
    ~ updated VS'98 solution file with all projects

 ~ test/component/test.component.be.file.threading/implicit_link.cpp:
 ~ test/component/test.component.be.file.threading/test.component.be.file.threading.cpp:
    ~ trivial formatting change

Test.Performance:

 ~ test/performance/pantheios.test.performance.vc6.dsw:
    ~ updated VS'98 solution file with all projects

 ~ test/performance/test.performance.inserters.m2w/implicit_link.cpp:
 ~ test/performance/test.performance.inserters.m2w/test.performance.inserters.m2w.cpp:
 ~ test/performance/test.performance.inserters.w2m/implicit_link.cpp:
 ~ test/performance/test.performance.inserters.w2m/test.performance.inserters.w2m.cpp:
    ~ trivial formatting change

Test.Scratch:

 ~ test/scratch/pantheios.test.scratch.vc6.dsw:
    ~ updated VS'98 solution file with all projects

 ~ test/scratch/test.scratch.WideString/test.scratch.WideString.cpp:
 ~ test/scratch/test.scratch.be.N.with.custom.fe/implicit_link.cpp:
 ~ test/scratch/test.scratch.be.N.with.custom.fe/test.scratch.be.N.with.custom.fe.cpp:
 ~ test/scratch/test.scratch.bec.WindowsMessageBox/test.scratch.bec.WindowsMessageBox.cpp:
 ~ test/scratch/test.scratch.extras.com.invoke_nothrow_method/implicit_link.cpp:
 ~ test/scratch/test.scratch.extras.com.invoke_nothrow_method/test.scratch.extras.com.invoke_nothrow_method.cpp:
 ~ test/scratch/test.scratch.extras.com_exception_helpers/implicit_link.cpp:
 ~ test/scratch/test.scratch.extras.com_exception_helpers/test.scratch.extras.com_exception_helpers.cpp:
 ~ test/scratch/test.scratch.tstring/implicit_link.cpp:
 ~ test/scratch/test.scratch.tstring/test.scratch.tstring.cpp:
 ~ test/scratch/test.scratch.util.onbailout/implicit_link.cpp:
 ~ test/scratch/test.scratch.util.onbailout/test.scratch.util.onbailout.cpp:
    ~ trivial formatting change

Dependencies:

 * STLSoft 1.9.108 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



10th January 2011 - 1.0.1 beta 210
==================================

Summary:
--------

 * added compile-time validation to prevent fundamental types being passed to log statements
 * added GCC 4.5 support
 * NOTE: Now requires STLSoft 1.9.106


Details:
--------

General:

Core:

Application Layer:

 ~ include/pantheios/internal/generated/log_dispatch_functions.h:
 ~ include/pantheios/internal/generated/log_dispatch_functions.hpp:
 ~ include/pantheios/internal/generated/log_functions.c:
 ~ include/pantheios/internal/generated/log_functions.h:
    ~ trivial formatting changes in generated code

 ~ include/pantheios/internal/generated/log_functions.hpp:
 ~ include/pantheios/internal/generated/log_sev_functions.hpp:
    + added compile-time validation to prevent fundamental types being passed to log statements
    ~ trivial formatting changes in generated code

 ~ include/pantheios/pantheios.hpp:
    + added compile-time validation to prevent fundamental types being passed to log statements

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

 + build/gcc45.unix.file64bit/makefile:
 + build/gcc45.unix/makefile:
    + added GCC 4.5 support

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.106 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



6th January 2011 - 1.0.1 beta 209
=================================

Summary:
--------

 * Now returns the string "unrecognised status code" if the status code is, er, unrecognised
 * wide-string compatibility fix for example.cpp.util.strdup
 * skips manipulation of HKEY_LOCAL_MACHINE when don't have change access: allows program to succeed when tests run by user with limited premissions
 * added test.unit.util.getcurrenttime.vcproj
 * removing unnecessary C++ flags from C compiler settings in VC++ makefiles


Details:
--------

General:

Core:

Application Layer:

Tracing:

Assertion:

Util:

 ~ src/util/init_code_strings.c:
    Now returns the string "unrecognised status code" if the status code is, er, unrecognised

Extras:

Front-ends:

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    - removing unnecessary C++ flags from C compiler settings

Examples:

 ~ examples/cpp/util/example.cpp.util.strdup/example.cpp.util.strdup.cpp:
    ~ wide-string compatibility fix

Test:

Test.Unit:

 ~ test/unit/test.unit.fe.WindowsRegistry/test.unit.fe.WindowsRegistry.cpp:
    ~ skips manipulation of HKEY_LOCAL_MACHINE when don't have change access: allows program to succeed when tests run by user with limited premissions

 ~ test/unit/test.unit.util.getcurrenttime/test.unit.util.getcurrenttime.cpp:
 + test/unit/test.unit.util.getcurrenttime/vc9/test.unit.util.getcurrenttime.vcproj:
    + added test.unit.util.getcurrenttime.vcproj

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.105 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



4th January 2011 - 1.0.1 beta 208
=================================

Summary:
--------

 * be.file added pantheios_be_file_flush(), and corrected omission to add 1900 to year and 1 to month in be.file's interpretation of date/time format specifiers in its file path
 * renamed status codes PANTHEIOS_INIT_RC_UNKNOWN_ERROR, PANTHEIOS_INIT_RC_UNSPECIFIED_ERROR to PANTHEIOS_INIT_RC_UNKNOWN_FAILURE, PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE
 * removed magic-numbers for return values and replacing with PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE in core and some stock back-ends
 * be.N minor performance/consistency improvement, and groundwork for coming feature enhancements
 * added FAQ#19, which explains how to use get Pantheios to compile the libraries when using Microsoft's -Zc:wchar_t- flag
 * all VC8+ makefiles no longer specify -D_CRT_SECURE_NO_DEPRECATE
 * added example.cpp.util.strdup
 * removed all extras files; these will be distributed in separate packages henceforth

Details:
--------

General:

 ~ include/pantheios/init_codes.h:
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE
    ~ renamed PANTHEIOS_INIT_RC_UNSPECIFIED_ERROR => PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE

Core:

 ~ src/core/api.cpp:
    ~ removing use of magic-numbers for return values and replacing with PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE

Application Layer:

Tracing:

Assertion:

Util:

 ~ src/util/core.apidefs.cpp:
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE

 ~ src/util/init_code_strings.c:
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE
    ~ renamed PANTHEIOS_INIT_RC_UNSPECIFIED_ERROR => PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE

Extras:

 - removed all extras files; these will be distributed in separate packages henceforth

Front-ends:

 ~ src/frontends/fe.WindowsRegistry.cpp:
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE

Back-ends:

 ~ src/backends/be.N.c:
    ~ minor performance/consistency improvement
    + added groundwork for coming feature enhancements
    ~ trivial refactoring

 ~ src/backends/bec.COMErrorObject.cpp:
 ~ src/backends/bec.test.cpp:
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE

 ~ src/backends/bec.WindowsEventLog.cpp:
 ~ src/backends/bec.WindowsSyslog.cpp:
    ~ removing use of magic-numbers for return values and replacing with PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE

 ~ include/pantheios/backends/bec.file.h:
    + added pantheios_be_file_flush()

 ~ src/backends/bec.file.cpp:
    ~ corrected omission to add 1900 to year and 1 to month in be.file's interpretation of date/time format specifiers in its file path
    + added pantheios_be_file_flush()
    ~ removing use of magic-numbers for return values and replacing with PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE

 ~ src/backends/bec.loader.cpp:
    ~ removing use of magic-numbers for return values and replacing with PANTHEIOS_INIT_RC_UNSPECIFIED_FAILURE
    ~ renamed PANTHEIOS_INIT_RC_UNKNOWN_ERROR => PANTHEIOS_INIT_RC_UNKNOWN_FAILURE

Distribution:

 ~ FAQ.txt:
    + added FAQ#19, which explains how to use get Pantheios to compile the libraries using Microsoft's -Zc:wchar_t- flag (for defining wchar_t as unsigned short, rather than as a built-in type)

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
    + added example.cpp.util.strdup
    ~ minor refactoring of the way in which C/C++ #defines are specified in the makefile(s)

 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added example.cpp.util.strdup
    ~ minor refactoring of the way in which C/C++ #defines are specified in the makefile(s)
    - VC8+ no longer specify -D_CRT_SECURE_NO_DEPRECATE

Examples:

 ~ examples/c/util/example.c.util.getcurrenttime/example.c.util.getcurrenttime.c:
 ~ examples/c/util/example.c.util.getcurrenttime/implicit_link.cpp:
 ~ examples/c/util/example.c.util.getcurrenttime/vc6/example.c.util.getcurrenttime.dsp:
    ~ moved examples/c/example.c.getcurrenttime => examples/c/util/example.c.util.getcurrenttime

 ~ examples/c/util/example.c.util.gethostname/example.c.util.gethostname.c:
 ~ examples/c/util/example.c.util.gethostname/implicit_link.cpp:
 ~ examples/c/util/example.c.util.gethostname/vc6/example.c.util.gethostname.dsp:
    ~ moved examples/c/example.c.gethostname => examples/c/util/example.c.util.gethostname

 + examples/c/util/pantheios.examples.c.util.vc6.dsw:
    + added pantheios.examples.c.util.vc6.dsw

 + examples/cpp/util/example.cpp.util.strdup/example.cpp.util.strdup.cpp:
 + examples/cpp/util/example.cpp.util.strdup/implicit_link.cpp:
 + examples/cpp/util/example.cpp.util.strdup/vc6/example.cpp.util.strdup.dsp:
 + examples/cpp/util/example.cpp.util.strdup/vc71/example.cpp.util.strdup.vcproj:
 + examples/cpp/util/example.cpp.util.strdup/vc8/example.cpp.util.strdup.vcproj:
 + examples/cpp/util/example.cpp.util.strdup/vc9/example.cpp.util.strdup.vcproj:
    + added example.cpp.util.strdup

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.105 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



27th December 2010 - 1.0.1 beta 207
===================================

Summary:
--------

 * added FAQ-18, which discusses use of custom front-end with multiplexing back-end(s)
 * added known implicit integral conversion vulnerability to KNOWN_ISSUES (affects Windows wide-string builds only)
 * changed initialisation failure/warning bailout messages of fe.WindowsRegistry, for ease of use
 * improved bailout warning messages passed to Windows Event Log (affects Windows-only)
 * added PANTHEIOS_FE_INIT_RC_INIT_CONFIG_REQUIRED initialisation code
 * added test.scratch.be.N.with.custom.fe for illustrating use of be.N back-end with a custom front-end
 * moved back-end sole/local/remote library forwarding symbols implementation files into subdirectories of src/backends/
 * NOTE: Now requires STLSoft 1.9.105
 * Windows users are advised to install the latest Pantheios.COM

Details:
--------

General:

 ~ include/pantheios/init_codes.h:
    + added PANTHEIOS_FE_INIT_RC_INIT_CONFIG_REQUIRED

Core:

Application Layer:

Tracing:

Assertion:

Util:

 ~ src/util/bailout.c:
    ~ now uses "Pantheios.COM 1.0.1b31+ - warning strings" for non-fatal bailout calls (Windows-only)

 ~ src/util/init_code_strings.c:
    + added PANTHEIOS_FE_INIT_RC_INIT_CONFIG_REQUIRED

Extras:

Front-ends:

 ~ src/frontends/fe.WindowsRegistry.cpp:
    ~ changed log level from ALERT to WARNING for bailout warnings about missing registry values
    + now uses PANTHEIOS_FE_INIT_RC_INIT_CONFIG_REQUIRED (instead of misleading back-end equivalent)
    ~ improved "registry key missing" message

Back-ends:

 ~ src/backends/be/be.ACE.c:
 ~ src/backends/be/be.COMErrorObject.c:
 ~ src/backends/be/be.WindowsConsole.c:
 ~ src/backends/be/be.WindowsDebugger.c:
 ~ src/backends/be/be.WindowsEventLog.c:
 ~ src/backends/be/be.WindowsMessageBox.c:
 ~ src/backends/be/be.WindowsSyslog.c:
 ~ src/backends/be/be.fail.c:
 ~ src/backends/be/be.file.c:
 ~ src/backends/be/be.fprintf.c:
 ~ src/backends/be/be.loader.c:
 ~ src/backends/be/be.null.c:
 ~ src/backends/be/be.speech.c:
 ~ src/backends/be/be.syslog.c:
 ~ src/backends/be/be.test.c:
    ~ Moved back-end sole library forwarding symbols implementation file into src/backends/be

 ~ src/backends/bel/bel.ACE.c:
 ~ src/backends/bel/bel.COMErrorObject.c:
 ~ src/backends/bel/bel.WindowsConsole.c:
 ~ src/backends/bel/bel.WindowsDebugger.c:
 ~ src/backends/bel/bel.WindowsEventLog.c:
 ~ src/backends/bel/bel.WindowsMessageBox.c:
 ~ src/backends/bel/bel.fail.c:
 ~ src/backends/bel/bel.file.c:
 ~ src/backends/bel/bel.fprintf.c:
 ~ src/backends/bel/bel.loader.c:
 ~ src/backends/bel/bel.null.c:
 ~ src/backends/bel/bel.speech.c:
 ~ src/backends/bel/bel.syslog.c:
 ~ src/backends/bel/bel.test.c:
    ~ Moved back-end local library forwarding symbols implementation file into src/backends/bel

 ~ src/backends/ber/ber.ACE.c:
 ~ src/backends/ber/ber.COMErrorObject.c:
 ~ src/backends/ber/ber.WindowsConsole.c:
 ~ src/backends/ber/ber.WindowsDebugger.c:
 ~ src/backends/ber/ber.WindowsEventLog.c:
 ~ src/backends/ber/ber.WindowsMessageBox.c:
 ~ src/backends/ber/ber.fail.c:
 ~ src/backends/ber/ber.file.c:
 ~ src/backends/ber/ber.fprintf.c:
 ~ src/backends/ber/ber.loader.c:
 ~ src/backends/ber/ber.null.c:
 ~ src/backends/ber/ber.speech.c:
 ~ src/backends/ber/ber.syslog.c:
 ~ src/backends/ber/ber.test.c:
    ~ Moved back-end remote library forwarding symbols implementation file into src/backends/ber

 ~ include/pantheios/backends/bec.WindowsEventLog.h:
 ~ include/pantheios/backends/bec.file.h:
 ~ include/pantheios/frontends/fe.WindowsRegistry.h:
 ~ include/pantheios/frontends/fe.simple.h:
    ~ minor change to deprecate feature warning symbol name

Distribution:

 ~ FAQ.txt:
    + added Q18, discussing the nuances of implementing custom front-ends

 ~ KNOWN_ISSUES.txt:
    + added in discussion of implicit integer vulnerability (Windows + wide string only)

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ renamed example.cpp.custom_severity_levels => example.cpp.misc.extended_severity_information

Examples:

 ~ examples/cpp/custom/example.cpp.custom.vc6.dsw:
 ~ examples/cpp/misc/example.cpp.misc.extended_severity_information/example.cpp.misc.extended_severity_information.cpp:
 ~ examples/cpp/misc/example.cpp.misc.extended_severity_information/implicit_link.cpp:
 ~ examples/cpp/misc/example.cpp.misc.extended_severity_information/vc6/example.cpp.misc.extended_severity_information.dsp:
 ~ examples/cpp/misc/example.cpp.misc.extended_severity_information/vc71/example.cpp.misc.extended_severity_information.vcproj:
 ~ examples/cpp/misc/example.cpp.misc.extended_severity_information/vc8/example.cpp.misc.extended_severity_information.vcproj:
 ~ examples/cpp/misc/example.cpp.misc.extended_severity_information/vc9/example.cpp.misc.extended_severity_information.vcproj:
 ~ examples/cpp/misc/example.cpp.misc.vc6.dsw:
 ~ examples/cpp/pantheios.examples.cpp.vc6.dsw:
    ~ renamed example.cpp.custom_severity_levels => example.cpp.misc.extended_severity_information

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

 ~ test/scratch/pantheios.test.scratch.vc6.dsw:
 + test/scratch/test.scratch.be.N.with.custom.fe/implicit_link.cpp:
 + test/scratch/test.scratch.be.N.with.custom.fe/test.scratch.be.N.with.custom.fe.cpp:
 + test/scratch/test.scratch.be.N.with.custom.fe/vc6/test.scratch.be.N.with.custom.fe.dsp:
    + added test.scratch.be.N.with.custom.fe

 ~ test/scratch/test.scratch.util.onbailout/implicit_link.cpp:
 ~ test/scratch/test.scratch.util.onbailout/test.scratch.util.onbailout.cpp:
    ~ updated and now compilable

Dependencies:

 * STLSoft 1.9.105 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



21st December 2010 - 1.0.1 beta 206
===================================

Summary:
--------

 * include/pantheios/inserters.hpp updated to include all new individual inserter headers
 * added test.unit.inserter.integer
 * added test.unit.inserter.m2w
 * added test.unit.inserter.w2m
 * workaround for Digital Mars symbol ambiguity defect in examples/cpp/misc/example.cpp.misc.custom_type_1/example.cpp.misc.custom_type_1.cpp
 * corrected/removed misleading statements in INSTALL.txt
 * include/pantheios/implicit_link/appl.h no longer includes include/pantheios/implicit_link/util.h

Details:
--------

General:

 ~ include/pantheios/implicit_link/appl.h:
    ~ include/pantheios/implicit_link/appl.h no longer includes include/pantheios/implicit_link/util.h

Core:

Application Layer:

 ~ include/pantheios/inserters.hpp:
    + added in all new individual inserter headers

 ~ include/pantheios/inserters/hex_ptr.hpp:
    ~ hex_ptr now deprecated; it will be removed in a subsequent release

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

 ~ INSTALL.txt:
    ~ corrected/removed misleading statements in INSTALL.txt

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added test.unit.inserter.integer
    + added test.unit.inserter.m2w
    + added test.unit.inserter.w2m

Examples:

 ~ examples/cpp/misc/example.cpp.misc.custom_type_1/example.cpp.misc.custom_type_1.cpp:
    ~ workaround for Digital Mars symbol ambiguity defect

Test:

Test.Unit:

 + test/unit/inserters/test.unit.inserter.integer/implicit_link.cpp:
 + test/unit/inserters/test.unit.inserter.integer/test.unit.inserter.integer.cpp:
 + test/unit/inserters/test.unit.inserter.integer/vc6/test.unit.inserter.integer.dsp:
    + added test.unit.inserter.integer

 + test/unit/inserters/test.unit.inserter.m2w/implicit_link.cpp:
 + test/unit/inserters/test.unit.inserter.m2w/test.unit.inserter.m2w.cpp:
 + test/unit/inserters/test.unit.inserter.m2w/vc6/test.unit.inserter.m2w.dsp:
    + added test.unit.inserter.m2w

 + test/unit/inserters/test.unit.inserter.w2m/implicit_link.cpp:
 + test/unit/inserters/test.unit.inserter.w2m/test.unit.inserter.w2m.cpp:
 + test/unit/inserters/test.unit.inserter.w2m/vc6/test.unit.inserter.w2m.dsp:
    + added test.unit.inserter.w2m

 ~ test/unit/pantheios.test.unit.vc6.dsw:
    + added test.unit.inserter.integer
    + added test.unit.inserter.m2w
    + added test.unit.inserter.w2m

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.104 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



11th December 2010 - 1.0.1 beta 205
===================================

Summary:
--------

 * added new example example.cpp.inserter.w2m
 * added new implicit link header include/pantheios/implicit_link/appl.h
 * added example.cpp.inserter.m2w to makefile(s)
 * various improvements to examples and documentation

Details:
--------

General:

Core:

 + include/pantheios/implicit_link/appl.h:
    + added include/pantheios/implicit_link/appl.h

Application Layer:

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 + include/pantheios/implicit_link/bec.console.WithCallback.h:
    + added include/pantheios/implicit_link/bec.console.WithCallback.h

 ~ include/pantheios/implicit_link/bec.syslog.WithCallback.h:
    ~ minor documentation modification

Distribution:

Documentation:

 ~ fixed up example paths for documentation generation
 ~ improved example documentation

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc9.unixem/makefile:
    + added example.cpp.inserter.w2m

 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added example.cpp.inserter.w2m
    + added example.cpp.inserter.m2w to build

Examples:

 ~ examples/c/example.c.getcurrenttime/example.c.getcurrenttime.c:
 ~ examples/c/example.c.getcurrenttime/implicit_link.cpp:
 ~ examples/c/example.c.gethostname/example.c.gethostname.c:
 ~ examples/c/example.c.gethostname/implicit_link.cpp:
 ~ examples/cpp/custom/example.cpp.custom.severity_levels/example.cpp.custom.severity_levels.cpp:
 ~ examples/cpp/custom/example.cpp.custom.severity_levels/implicit_link.cpp:
 ~ examples/cpp/custom/example.cpp.custom.wrap_log4cplus/example.cpp.custom.wrap_log4cplus.cpp:
 ~ examples/cpp/custom/example.cpp.custom.wrap_log4cxx/example.cpp.custom.wrap_log4cxx.cpp:
 ~ examples/cpp/linking/example.cpp.linking.implicit_link_1/example.cpp.linking.implicit_link_1.cpp:
 ~ examples/cpp/misc/example.cpp.misc.custom_type_1/example.cpp.misc.custom_type_1.cpp:
 ~ examples/cpp/misc/example.cpp.misc.custom_type_1/implicit_link.cpp:
    ~ correcting file-identity comment

 + examples/cpp/inserters/example.cpp.inserter.m2w/example.cpp.inserter.m2w.cpp:
 + examples/cpp/inserters/example.cpp.inserter.m2w/implicit_link.cpp:
 + examples/cpp/inserters/example.cpp.inserter.m2w/vc9/example.cpp.inserter.m2w.vcproj:
    + added example.cpp.inserter.m2w

Test:

Test.Unit:

 ~ test/unit/test.unit.levels.values/implicit_link.cpp:
 ~ test/unit/test.unit.levels.values/test.unit.levels.values.c:
    ~ correcting file-identity comment

Test.Component:

 ~ test/component/test.component.core.initialisation_sequence/test.component.core.initialisation_sequence.c:
 ~ test/component/test.component.custom_severity/implicit_link.cpp:
 ~ test/component/test.component.inserters.pad/implicit_link.cpp:
 ~ test/component/test.component.inserters.pointer/implicit_link.cpp:
 ~ test/component/test.component.trace.1/test.component.trace.1.cpp:
    ~ correcting file-identity comment

Test.Performance:

Test.Scratch:

 ~ test/scratch/test.scratch.bec.WindowsMessageBox/implicit_link.cpp:
 ~ test/scratch/test.scratch.util.onbailout/implicit_link.cpp:
    ~ correcting file-identity comment

Dependencies:

 * STLSoft 1.9.104 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



7th December 2010 - 1.0.1 beta 204
==================================

Summary:
--------

 * wholesale changes to directory structure of C++ examples
 * added VC++ 6-9 project files for C++ examples
 * updating makefiles with all examples, including new and forgotten ones

Details:
--------

General:

Core:

 ~ include/pantheios/init_codes.h:
    + added PANTHEIOS_BE_LOGENTRY_FAILED standard result code

 ~ include/pantheios/pantheios.h:
    + added pantheios::logprintf(), as an alias for pantheios_logprintf()
    + added pantheios::logvprintf(), as an alias for pantheios_logvprintf()

Application Layer:

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 ~ src/backends/bec.WindowsConsole.cpp:
    ~ now does bail-out logging if cannot write to console
    ~ now returns PANTHEIOS_BE_LOGENTRY_FAILED if cannot write to console

 ~ src/backends/bec.file.cpp:
    ~ minor refactoring

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc44.unix.file64bit/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ wholesale reorganisation of examples, and inclusion of new (and forgotten) examples in the build
    ~ moved example/cpp/example.cpp.args => example/cpp/inserters/example.cpp.inserter.args
    ~ moved example/cpp/example.cpp.b => example/cpp/inserters/example.cpp.inserter.b
    ~ moved example/cpp/example.cpp.b64 => example/cpp/inserters/example.cpp.inserter.b64
    ~ moved example/cpp/example.cpp.blob => example/cpp/inserters/example.cpp.inserter.blob
    ~ moved example/cpp/example.cpp.character => example/cpp/inserters/example.cpp.inserter.character
    ~ moved example/cpp/example.cpp.hex_ptr => example/cpp/inserters/example.cpp.inserter.hex_ptr
    ~ moved example/cpp/example.cpp.host_id => example/cpp/inserters/example.cpp.inserter.hostid
    ~ moved example/cpp/example.cpp.i => example/cpp/inserters/example.cpp.inserter.i
    ~ moved example/cpp/example.cpp.integer => example/cpp/inserters/example.cpp.inserter.integer
    ~ moved example/cpp/example.cpp.p => example/cpp/inserters/example.cpp.inserter.p
    ~ moved example/cpp/example.cpp.pointer => example/cpp/inserters/example.cpp.inserter.pointer
    ~ moved example/cpp/example.cpp.process_id => example/cpp/inserters/example.cpp.inserter.processid
    ~ moved example/cpp/example.cpp.real => example/cpp/inserters/example.cpp.inserter.real
    ~ moved example/cpp/example.cpp.thread_id => example/cpp/inserters/example.cpp.inserter.threadid
    ~ moved example/cpp/example.cpp.xi => example/cpp/inserters/example.cpp.inserter.xi
    ~ moved example/cpp/example.cpp.xp => example/cpp/inserters/example.cpp.inserter.xp
    ~ better discrimination of facilities in the build environment (via detection of environment variables)

 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
    ~ wholesale reorganisation of examples, and inclusion of new (and forgotten) examples in the build
    ~ moved example/cpp/example.cpp.args => example/cpp/inserters/example.cpp.inserter.args
    ~ moved example/cpp/example.cpp.b => example/cpp/inserters/example.cpp.inserter.b
    ~ moved example/cpp/example.cpp.b64 => example/cpp/inserters/example.cpp.inserter.b64
    ~ moved example/cpp/example.cpp.blob => example/cpp/inserters/example.cpp.inserter.blob
    ~ moved example/cpp/example.cpp.character => example/cpp/inserters/example.cpp.inserter.character
    ~ moved example/cpp/example.cpp.hex_ptr => example/cpp/inserters/example.cpp.inserter.hex_ptr
    ~ moved example/cpp/example.cpp.host_id => example/cpp/inserters/example.cpp.inserter.hostid
    ~ moved example/cpp/example.cpp.i => example/cpp/inserters/example.cpp.inserter.i
    ~ moved example/cpp/example.cpp.integer => example/cpp/inserters/example.cpp.inserter.integer
    ~ moved example/cpp/example.cpp.p => example/cpp/inserters/example.cpp.inserter.p
    ~ moved example/cpp/example.cpp.pointer => example/cpp/inserters/example.cpp.inserter.pointer
    ~ moved example/cpp/example.cpp.process_id => example/cpp/inserters/example.cpp.inserter.processid
    ~ moved example/cpp/example.cpp.real => example/cpp/inserters/example.cpp.inserter.real
    ~ moved example/cpp/example.cpp.thread_id => example/cpp/inserters/example.cpp.inserter.threadid
    ~ moved example/cpp/example.cpp.xi => example/cpp/inserters/example.cpp.inserter.xi
    ~ moved example/cpp/example.cpp.xp => example/cpp/inserters/example.cpp.inserter.xp
    ~ better discrimination of facilities in the build environment (via detection of environment variables)
    ~ better discrimination of facilities in the build environment (via detection of environment variables)
    - removed -D_FILE_OFFSET_BITS=64 from all GCC, except gcc44.unix.file64bits; this is how it should have been with b203 originally

Examples:

 ~ examples/c/example.c.101/example.c.101.c:
    ~ fixed wide/multibyte string defect

 ~ examples/cpp/backends/example.cpp.backends.file.callback/example.cpp.backends.file.callback.cpp:
 ~ examples/cpp/backends/example.cpp.backends.file.callback/implicit_link.cpp:
 ~ examples/cpp/backends/example.cpp.backends.file.callback/vc6/example.cpp.backends.file.callback.dsp:
    ~ moved examples/cpp/example.cpp.be.file.callback => examples/cpp/backends/backends/example.cpp.backends.file.callback

 ~ examples/cpp/backends/example.cpp.backends.file.lrsplit/example.cpp.backends.file.lrsplit.cpp:
    ~ log file names changed, so ends in ".log"
    ~ moved examples/cpp/example.cpp.be.file.lrsplit => examples/cpp/backends/backends/example.cpp.backends.file.lrsplit

 ~ examples/cpp/backends/example.cpp.backends.file.lrsplit/vc6/example.cpp.backends.file.lrsplit.dsp:
    ~ moved examples/cpp/example.cpp.be.file.lrsplit => examples/cpp/backends/backends/example.cpp.backends.file.lrsplit

 ~ examples/cpp/backends/example.cpp.backends.file/example.cpp.backends.file.cpp:
    ~ log file names changed, so ends in ".log"
    ~ moved examples/cpp/example.cpp.be.file => examples/cpp/backends/backends/example.cpp.backends.file

 ~ examples/cpp/backends/example.cpp.backends.file/implicit_link.cpp:
 ~ examples/cpp/backends/example.cpp.backends.file/vc6/example.cpp.backends.file.dsp:
    ~ moved examples/cpp/example.cpp.be.file => examples/cpp/backends/backends/example.cpp.backends.file

 + examples/cpp/backends/example.cpp.backends.file/vc71/example.cpp.backends.file.vcproj:
 + examples/cpp/backends/example.cpp.backends.file/vc8/example.cpp.backends.file.vcproj:
 + examples/cpp/backends/example.cpp.backends.file/vc9/example.cpp.backends.file.vcproj:
    + added example.cpp.backends.file.vcproj

 ~ examples/cpp/backends/example.cpp.backends.mx.1/example.cpp.backends.mx.1.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved examples/cpp/example.cpp.mx.1 => examples/cpp/backends/backends/example.cpp.backends.mx.1

 ~ examples/cpp/backends/example.cpp.backends.mx.1/implicit_link.cpp:
 ~ examples/cpp/backends/example.cpp.backends.mx.1/vc6/example.cpp.backends.mx.1.dsp:
    ~ moved examples/cpp/example.cpp.mx.1 => examples/cpp/backends/backends/example.cpp.backends.mx.1

 + examples/cpp/backends/example.cpp.backends.mx.1/vc71/example.cpp.backends.mx.1.vcproj:
 + examples/cpp/backends/example.cpp.backends.mx.1/vc8/example.cpp.backends.mx.1.vcproj:
 + examples/cpp/backends/example.cpp.backends.mx.1/vc9/example.cpp.backends.mx.1.vcproj:
    + added example.cpp.backends.mx.1.vcproj

 ~ examples/cpp/backends/example.cpp.backends.mx.2/example.cpp.backends.mx.2.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved examples/cpp/example.cpp.mx.2 => examples/cpp/backends/backends/example.cpp.backends.mx.2

 ~ examples/cpp/backends/example.cpp.backends.mx.2/implicit_link.cpp:
 ~ examples/cpp/backends/example.cpp.backends.mx.2/vc6/example.cpp.backends.mx.2.dsp:
    ~ moved examples/cpp/example.cpp.mx.2 => examples/cpp/backends/backends/example.cpp.backends.mx.2

 + examples/cpp/backends/example.cpp.backends.mx.2/vc71/example.cpp.inserter.mx.2.vcproj:
 + examples/cpp/backends/example.cpp.backends.mx.2/vc8/example.cpp.inserter.mx.2.vcproj:
 + examples/cpp/backends/example.cpp.backends.mx.2/vc9/example.cpp.inserter.mx.2.vcproj:
    + added example.cpp.backends.mx.2.vcproj

 + examples/cpp/backends/example.cpp.backends.vc6.dsw:
    + added example.cpp.backends.vc6.dsw

 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT/example.cpp.contract.PANTHEIOS_ASSERT.cpp:
 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT/implicit_link.cpp:
 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT/vc6/example.cpp.contract.PANTHEIOS_ASSERT.dsp:
    ~ moved examples/cpp/example.cpp.assert => examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT
    ~ moved examples/cpp/example.cpp.assert => examples/cpp/contract/example.cpp.contract.assert

 + examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT/vc71/example.cpp.contract.PANTHEIOS_ASSERT.vcproj:
 + examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT/vc8/example.cpp.contract.PANTHEIOS_ASSERT.vcproj:
 + examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT/vc9/example.cpp.contract.PANTHEIOS_ASSERT.vcproj:
    ~ moved examples/cpp/example.cpp.assert => examples/cpp/contract/example.cpp.contract.PANTHEIOS_ASSERT
    + added example.cpp.contract.assert

 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT.cpp:
 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT/implicit_link.cpp:
 ~ examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT/vc6/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT.dsp:
    + added examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT
    ~ moved examples/cpp/example.cpp.assert => examples/cpp/contract/example.cpp.contract.assert

 + examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT/vc71/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT.vcproj:
 + examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT/vc8/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT.vcproj:
 + examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT/vc9/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT.vcproj:
    + added examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT
    + added example.cpp.contract.assert

 + examples/cpp/contract/example.cpp.contract.vc6.dsw:
    + added examples/cpp/contract/example.cpp.contract.PANTHEIOS_MESSAGE_ASSERT

 ~ examples/cpp/custom/example.cpp.custom.severity_levels/example.cpp.custom.severity_levels.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved examples/cpp/example.cpp.custom_severity_levels => examples/cpp/custom/example.cpp.custom.severity_levels

 ~ examples/cpp/custom/example.cpp.custom.severity_levels/implicit_link.cpp:
 ~ examples/cpp/custom/example.cpp.custom.severity_levels/vc6/example.cpp.custom.severity_levels.dsp:
    ~ moved examples/cpp/example.cpp.custom_severity_levels => examples/cpp/custom/example.cpp.custom.severity_levels

 + examples/cpp/custom/example.cpp.custom.severity_levels/vc71/example.cpp.custom_severity_levels.vcproj:
 + examples/cpp/custom/example.cpp.custom.severity_levels/vc8/example.cpp.custom_severity_levels.vcproj:
 + examples/cpp/custom/example.cpp.custom.severity_levels/vc9/example.cpp.custom_severity_levels.vcproj:
    + added example.cpp.custom.severity_levels.vcproj

 + examples/cpp/custom/example.cpp.custom.vc6.dsw:
    + added example.cpp.custom.vc6.dsw

 ~ examples/cpp/custom/example.cpp.custom.wrap_log4cplus/example.cpp.custom.wrap_log4cplus.cpp:
    ~ moved examples/cpp/example.cpp.wrap_log4cplus => examples/cpp/custom/example.cpp.custom.wrap_log4cplus

 ~ examples/cpp/custom/example.cpp.custom.wrap_log4cxx/example.cpp.custom.wrap_log4cxx.cpp:
    ~ moved examples/cpp/example.cpp.wrap_3pty_log_lib => examples/cpp/custom/example.cpp.custom.wrap_log4cxx

 ~ examples/cpp/format/example.cpp.format.highres/example.cpp.format.highres.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved examples/cpp/example.cpp.highres => examples/cpp/format/example.cpp.format.highres

 ~ examples/cpp/format/example.cpp.format.highres/implicit_link.cpp:
 ~ examples/cpp/format/example.cpp.format.highres/vc6/example.cpp.format.highres.dsp:
    ~ moved examples/cpp/example.cpp.highres => examples/cpp/format/example.cpp.format.highres

 + examples/cpp/format/example.cpp.format.highres/vc71/example.cpp.format.highres.vcproj:
 + examples/cpp/format/example.cpp.format.highres/vc8/example.cpp.format.highres.vcproj:
 + examples/cpp/format/example.cpp.format.highres/vc9/example.cpp.format.highres.vcproj:
    + added examples.cpp.format.highres.vcproj

 ~ examples/cpp/format/example.cpp.format.lowres/example.cpp.format.lowres.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved examples/cpp/example.cpp.lowres => examples/cpp/format/example.cpp.format.lowres

 ~ examples/cpp/format/example.cpp.format.lowres/implicit_link.cpp:
 ~ examples/cpp/format/example.cpp.format.lowres/vc6/example.cpp.format.lowres.dsp:
    ~ moved examples/cpp/example.cpp.lowres => examples/cpp/format/example.cpp.format.lowres

 + examples/cpp/format/example.cpp.format.lowres/vc71/example.cpp.format.lowres.vcproj:
 + examples/cpp/format/example.cpp.format.lowres/vc8/example.cpp.format.lowres.vcproj:
 + examples/cpp/format/example.cpp.format.lowres/vc9/example.cpp.format.lowres.vcproj:
    + added example.cpp.format.lowres.vcproj

 ~ examples/cpp/format/example.cpp.format.pad/example.cpp.format.pad.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved examples/cpp/example.cpp.pad => examples/cpp/format/example.cpp.format.pad

 ~ examples/cpp/format/example.cpp.format.pad/implicit_link.cpp:
 ~ examples/cpp/format/example.cpp.format.pad/vc6/example.cpp.format.pad.dsp:
    ~ moved examples/cpp/example.cpp.pad => examples/cpp/format/example.cpp.format.pad

 + examples/cpp/format/example.cpp.format.pad/vc71/example.cpp.format.pad.vcproj:
 + examples/cpp/format/example.cpp.format.pad/vc8/example.cpp.format.pad.vcproj:
 + examples/cpp/format/example.cpp.format.pad/vc9/example.cpp.format.pad.vcproj:
    + added example.cpp.format.pad.vcproj

 + examples/cpp/format/example.cpp.format.vc6.dsw:
    + added examples.cpp.format.vc6.dsw

 ~ examples/cpp/frontends/example.cpp.frontends.custom/example.cpp.frontends.custom.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved examples/cpp/example.cpp.custom_fe => examples/frontends/example.cpp.frontends.custom

 ~ examples/cpp/frontends/example.cpp.frontends.custom/implicit_link.cpp:
 ~ examples/cpp/frontends/example.cpp.frontends.custom/vc6/example.cpp.frontends.custom.dsp:
    ~ moved examples/cpp/example.cpp.custom_fe => examples/frontends/example.cpp.frontends.custom

 + examples/cpp/frontends/example.cpp.frontends.custom/vc71/example.cpp.frontends.custom.vcproj:
 + examples/cpp/frontends/example.cpp.frontends.custom/vc8/example.cpp.frontends.custom.vcproj:
 + examples/cpp/frontends/example.cpp.frontends.custom/vc9/example.cpp.frontends.custom.vcproj:
    + added example.cpp.frontends.vcproj

 + examples/cpp/frontends/example.cpp.frontends.vc6.dsw:
    + added example.cpp.frontends.vc6.dsw

 ~ examples/cpp/inserters/example.cpp.inserter.args/example.cpp.inserter.args.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.args => example/cpp/inserters/example.cpp.inserter.args

 ~ examples/cpp/inserters/example.cpp.inserter.args/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.args/vc6/example.cpp.inserter.args.dsp:
    ~ moved example/cpp/example.cpp.args => example/cpp/inserters/example.cpp.inserter.args

 + examples/cpp/inserters/example.cpp.inserter.args/vc71/example.cpp.inserter.args.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.args/vc8/example.cpp.inserter.args.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.args/vc9/example.cpp.inserter.args.vcproj:
    + added example.cpp.inserter.args.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.b/example.cpp.inserter.b.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.b => example/cpp/inserters/example.cpp.inserter.b

 ~ examples/cpp/inserters/example.cpp.inserter.b/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.b/vc6/example.cpp.inserter.b.dsp:
    ~ moved example/cpp/example.cpp.b => example/cpp/inserters/example.cpp.inserter.b

 ~ examples/cpp/inserters/example.cpp.inserter.b64/example.cpp.inserter.b64.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.b64 => example/cpp/inserters/example.cpp.inserter.b64

 ~ examples/cpp/inserters/example.cpp.inserter.b64/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.b64/vc6/example.cpp.inserter.b64.dsp:
    ~ moved example/cpp/example.cpp.b64 => example/cpp/inserters/example.cpp.inserter.b64

 + examples/cpp/inserters/example.cpp.inserter.b64/vc71/example.cpp.inserter.b64.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.b64/vc8/example.cpp.inserter.b64.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.b64/vc9/example.cpp.inserter.b64.vcproj:
    + added example.cpp.inserter.b64.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.blob/example.cpp.inserter.blob.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.blob => example/cpp/inserters/example.cpp.inserter.blob

 ~ examples/cpp/inserters/example.cpp.inserter.blob/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.blob/vc6/example.cpp.inserter.blob.dsp:
    ~ moved example/cpp/example.cpp.blob => example/cpp/inserters/example.cpp.inserter.blob

 + examples/cpp/inserters/example.cpp.inserter.blob/vc71/example.cpp.inserter.blob.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.blob/vc8/example.cpp.inserter.blob.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.blob/vc9/example.cpp.inserter.blob.vcproj:
    + added example.cpp.inserter.blob.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.character/example.cpp.inserter.character.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.character => example/cpp/inserters/example.cpp.inserter.character

 ~ examples/cpp/inserters/example.cpp.inserter.character/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.character/vc6/example.cpp.inserter.character.dsp:
    ~ moved example/cpp/example.cpp.character => example/cpp/inserters/example.cpp.inserter.character

 + examples/cpp/inserters/example.cpp.inserter.character/vc71/example.cpp.inserter.character.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.character/vc8/example.cpp.inserter.character.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.character/vc9/example.cpp.inserter.character.vcproj:
    + added example.cpp.inserter.character.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.hex_ptr/example.cpp.inserter.hex_ptr.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.hex_ptr => example/cpp/inserters/example.cpp.inserter.hex_ptr

 ~ examples/cpp/inserters/example.cpp.inserter.hex_ptr/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.hex_ptr/vc6/example.cpp.inserter.hex_ptr.dsp:
    ~ moved example/cpp/example.cpp.hex_ptr => example/cpp/inserters/example.cpp.inserter.hex_ptr

 + examples/cpp/inserters/example.cpp.inserter.hex_ptr/vc71/example.cpp.inserter.hex_ptr.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.hex_ptr/vc8/example.cpp.inserter.hex_ptr.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.hex_ptr/vc9/example.cpp.inserter.hex_ptr.vcproj:
    + added example.cpp.inserter.hex_ptr.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.hostid/example.cpp.inserter.hostid.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.hostid/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.hostid/vc6/example.cpp.inserter.hostid.dsp:
    ~ moved example/cpp/example.cpp.host_id => example/cpp/inserters/example.cpp.inserter.hostid

 + examples/cpp/inserters/example.cpp.inserter.hostid/vc71/example.cpp.inserter.hostid.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.hostid/vc8/example.cpp.inserter.hostid.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.hostid/vc9/example.cpp.inserter.hostid.vcproj:
    + added example.cpp.inserter.hostid.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.i/example.cpp.inserter.i.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.i => example/cpp/inserters/example.cpp.inserter.i

 ~ examples/cpp/inserters/example.cpp.inserter.i/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.i/vc6/example.cpp.inserter.i.dsp:
 ~ examples/cpp/inserters/example.cpp.inserter.i/vc71/example.cpp.inserter.i.vcproj:
 ~ examples/cpp/inserters/example.cpp.inserter.i/vc8/example.cpp.inserter.i.vcproj:
 ~ examples/cpp/inserters/example.cpp.inserter.i/vc9/example.cpp.inserter.i.vcproj:
    ~ moved example/cpp/example.cpp.i => example/cpp/inserters/example.cpp.inserter.i

 ~ examples/cpp/inserters/example.cpp.inserter.integer/example.cpp.inserter.integer.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.integer => example/cpp/inserters/example.cpp.inserter.integer

 ~ examples/cpp/inserters/example.cpp.inserter.integer/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.integer/vc6/example.cpp.inserter.integer.dsp:
    ~ moved example/cpp/example.cpp.integer => example/cpp/inserters/example.cpp.inserter.integer

 + examples/cpp/inserters/example.cpp.inserter.integer/vc71/example.cpp.inserter.integer.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.integer/vc8/example.cpp.inserter.integer.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.integer/vc9/example.cpp.inserter.integer.vcproj:
    + added example.cpp.inserter.integer.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.p/example.cpp.inserter.p.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.p => example/cpp/inserters/example.cpp.inserter.p

 ~ examples/cpp/inserters/example.cpp.inserter.p/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.p/vc6/example.cpp.inserter.p.dsp:
    ~ moved example/cpp/example.cpp.p => example/cpp/inserters/example.cpp.inserter.p

 + examples/cpp/inserters/example.cpp.inserter.p/vc71/example.cpp.inserter.p.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.p/vc8/example.cpp.inserter.p.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.p/vc9/example.cpp.inserter.p.vcproj:
    + added example.cpp.inserter.p.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.pointer/example.cpp.inserter.pointer.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.pointer => example/cpp/inserters/example.cpp.inserter.pointer

 ~ examples/cpp/inserters/example.cpp.inserter.pointer/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.pointer/vc6/example.cpp.inserter.pointer.dsp:
    ~ moved example/cpp/example.cpp.pointer => example/cpp/inserters/example.cpp.inserter.pointer

 + examples/cpp/inserters/example.cpp.inserter.pointer/vc71/example.cpp.inserter.pointer.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.pointer/vc8/example.cpp.inserter.pointer.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.pointer/vc9/example.cpp.inserter.pointer.vcproj:
    + added example.cpp.inserter.pointer.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.processid/example.cpp.inserter.processid.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.process_id => example/cpp/inserters/example.cpp.inserter.processid

 ~ examples/cpp/inserters/example.cpp.inserter.processid/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.processid/vc6/example.cpp.inserter.processid.dsp:
    ~ moved example/cpp/example.cpp.process_id => example/cpp/inserters/example.cpp.inserter.processid

 + examples/cpp/inserters/example.cpp.inserter.processid/vc71/example.cpp.inserter.processid.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.processid/vc8/example.cpp.inserter.processid.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.processid/vc9/example.cpp.inserter.processid.vcproj:
    + added example.cpp.inserter.processid.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.real/example.cpp.inserter.real.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.real => example/cpp/inserters/example.cpp.inserter.real

 ~ examples/cpp/inserters/example.cpp.inserter.real/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.real/vc6/example.cpp.inserter.real.dsp:
    ~ moved example/cpp/example.cpp.real => example/cpp/inserters/example.cpp.inserter.real

 + examples/cpp/inserters/example.cpp.inserter.real/vc71/example.cpp.inserter.real.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.real/vc8/example.cpp.inserter.real.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.real/vc9/example.cpp.inserter.real.vcproj:
    + added example.cpp.inserter.real.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.threadid/example.cpp.inserter.threadid.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.thread_id => example/cpp/inserters/example.cpp.inserter.threadid

 ~ examples/cpp/inserters/example.cpp.inserter.threadid/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.threadid/vc6/example.cpp.inserter.threadid.dsp:
    ~ moved example/cpp/example.cpp.thread_id => example/cpp/inserters/example.cpp.inserter.threadid

 + examples/cpp/inserters/example.cpp.inserter.threadid/vc71/example.cpp.inserter.threadid.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.threadid/vc8/example.cpp.inserter.threadid.vcproj:
 + examples/cpp/inserters/example.cpp.inserter.threadid/vc9/example.cpp.inserter.threadid.vcproj:
    + added example.cpp.inserter.threadid.vcproj

 ~ examples/cpp/inserters/example.cpp.inserter.xi/example.cpp.inserter.xi.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.xi => example/cpp/inserters/example.cpp.inserter.xi

 ~ examples/cpp/inserters/example.cpp.inserter.xi/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.xi/vc6/example.cpp.inserter.xi.dsp:
 ~ examples/cpp/inserters/example.cpp.inserter.xi/vc71/example.cpp.inserter.xi.vcproj:
 ~ examples/cpp/inserters/example.cpp.inserter.xi/vc8/example.cpp.inserter.xi.vcproj:
 ~ examples/cpp/inserters/example.cpp.inserter.xi/vc9/example.cpp.inserter.xi.vcproj:
    ~ moved example/cpp/example.cpp.xi => example/cpp/inserters/example.cpp.inserter.xi

 ~ examples/cpp/inserters/example.cpp.inserter.xp/example.cpp.inserter.xp.cpp:
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type
    ~ moved example/cpp/example.cpp.xp => example/cpp/inserters/example.cpp.inserter.xp

 ~ examples/cpp/inserters/example.cpp.inserter.xp/implicit_link.cpp:
 ~ examples/cpp/inserters/example.cpp.inserter.xp/vc6/example.cpp.inserter.xp.dsp:
 ~ examples/cpp/inserters/example.cpp.inserter.xp/vc71/example.cpp.inserter.xp.vcproj:
 ~ examples/cpp/inserters/example.cpp.inserter.xp/vc8/example.cpp.inserter.xp.vcproj:
 ~ examples/cpp/inserters/example.cpp.inserter.xp/vc9/example.cpp.inserter.xp.vcproj:
    ~ moved example/cpp/example.cpp.xp => example/cpp/inserters/example.cpp.inserter.xp

 + examples/cpp/inserters/example.cpp.inserters.vc6.dsw:
    + added example.cpp.inserters.vc6.dsw

 ~ examples/cpp/linking/example.cpp.linking.implicit_link_1/example.cpp.linking.implicit_link_1.cpp:
 ~ examples/cpp/linking/example.cpp.linking.implicit_link_1/vc6/example.cpp.linking.implicit_link_1.dsp:
    ~ moved examples/cpp/example.cpp.implicit_link_1 => examples/cpp/linking/example.cpp.linking.implicit_link_1

 + examples/cpp/linking/example.cpp.linking.implicit_link_1/vc71/example.cpp.linking.implicit_link_1.vcproj:
 + examples/cpp/linking/example.cpp.linking.implicit_link_1/vc8/example.cpp.linking.implicit_link_1.vcproj:
 + examples/cpp/linking/example.cpp.linking.implicit_link_1/vc9/example.cpp.linking.implicit_link_1.vcproj:
    + added example.cpp.linking.implicit_link_1.vcproj

 + examples/cpp/linking/example.cpp.linking.vc6.dsw:
    + added example.cpp.linking.vc6.dsw

 ~ examples/cpp/misc/example.cpp.misc.101/example.cpp.misc.101.cpp:
 ~ examples/cpp/misc/example.cpp.misc.101/implicit_link.cpp:
 ~ examples/cpp/misc/example.cpp.misc.101/vc6/example.cpp.misc.101.dsp:
    ~ moved examples/cpp/example.cpp.api.no_namespace => examples/cpp/misc/example.cpp.misc.no_namespace

 + examples/cpp/misc/example.cpp.misc.101/vc71/example.cpp.misc.101.vcproj:
 + examples/cpp/misc/example.cpp.misc.101/vc8/example.cpp.misc.101.vcproj:
 + examples/cpp/misc/example.cpp.misc.101/vc9/example.cpp.misc.101.vcproj:
    + added example.cpp.misc.101.vcproj

 ~ examples/cpp/misc/example.cpp.misc.custom_type_1/example.cpp.misc.custom_type_1.cpp:
    ~ moved examples/cpp/example.cpp.custom_type_1 => examples/cpp/misc/example.cpp.misc.custom_type_1
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type

 ~ examples/cpp/misc/example.cpp.misc.custom_type_1/implicit_link.cpp:
 ~ examples/cpp/misc/example.cpp.misc.custom_type_1/vc6/example.cpp.misc.custom_type_1.dsp:
    ~ moved examples/cpp/example.cpp.custom_type_1 => examples/cpp/misc/example.cpp.misc.custom_type_1

 + examples/cpp/misc/example.cpp.misc.custom_type_1/vc71/example.cpp.misc.custom_type_1.vcproj:
 + examples/cpp/misc/example.cpp.misc.custom_type_1/vc8/example.cpp.misc.custom_type_1.vcproj:
 + examples/cpp/misc/example.cpp.misc.custom_type_1/vc9/example.cpp.misc.custom_type_1.vcproj:
    + added example.cpp.misc.custom_type_1.vcproj

 ~ examples/cpp/misc/example.cpp.misc.hetero1/example.cpp.misc.hetero1.cpp:
    ~ moved examples/cpp/example.cpp.hetero1 => examples/cpp/misc/example.cpp.misc.hetero1
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type

 ~ examples/cpp/misc/example.cpp.misc.hetero1/implicit_link.cpp:
 ~ examples/cpp/misc/example.cpp.misc.hetero1/vc6/example.cpp.misc.hetero1.dsp:
    ~ moved examples/cpp/example.cpp.hetero1 => examples/cpp/misc/example.cpp.misc.hetero1

 + examples/cpp/misc/example.cpp.misc.hetero1/vc71/example.cpp.misc.hetero1.vcproj:
 + examples/cpp/misc/example.cpp.misc.hetero1/vc8/example.cpp.misc.hetero1.vcproj:
 + examples/cpp/misc/example.cpp.misc.hetero1/vc9/example.cpp.misc.hetero1.vcproj:
    + added example.cpp.misc.hetero1.vcproj

 ~ examples/cpp/misc/example.cpp.misc.no_namespace/example.cpp.misc.no_namespace.cpp:
 ~ examples/cpp/misc/example.cpp.misc.no_namespace/implicit_link.cpp:
 ~ examples/cpp/misc/example.cpp.misc.no_namespace/vc6/example.cpp.misc.no_namespace.dsp:
    ~ moved examples/cpp/example.cpp.101 => examples/cpp/misc/example.cpp.misc.no_namespace

 + examples/cpp/misc/example.cpp.misc.no_namespace/vc71/example.cpp.misc.no_namespace.vcproj:
 + examples/cpp/misc/example.cpp.misc.no_namespace/vc8/example.cpp.misc.no_namespace.vcproj:
 + examples/cpp/misc/example.cpp.misc.no_namespace/vc9/example.cpp.misc.no_namespace.vcproj:
    + added example.cpp.misc.no_namespace.vcproj

 ~ examples/cpp/misc/example.cpp.misc.strings/example.cpp.misc.strings.cpp:
    ~ moved examples/cpp/example.cpp.strings => examples/cpp/misc/example.cpp.misc.strings
    - removed use of pantheios::exception inserter, since STLSoft now defines shim for exception type

 ~ examples/cpp/misc/example.cpp.misc.strings/implicit_link.cpp:
 ~ examples/cpp/misc/example.cpp.misc.strings/vc6/example.cpp.misc.strings.dsp:
    ~ moved examples/cpp/example.cpp.strings => examples/cpp/misc/example.cpp.misc.strings

 + examples/cpp/misc/example.cpp.misc.strings/vc71/example.cpp.misc.strings.vcproj:
 + examples/cpp/misc/example.cpp.misc.strings/vc8/example.cpp.misc.strings.vcproj:
 + examples/cpp/misc/example.cpp.misc.strings/vc9/example.cpp.misc.strings.vcproj:
    + added example.cpp.misc.strings.vcproj

 + examples/cpp/misc/example.cpp.misc.vc6.dsw:
    + added example.cpp.misc.vc6.dsw

 ~ examples/cpp/tracing/example.cpp.tracing.standard/example.cpp.tracing.standard.cpp:
    ~ moved examples/cpp/example.cpp.tracing => examples/cpp/tracing/example.cpp.tracing.standard

 + examples/cpp/tracing/example.cpp.tracing.standard/implicit_link.cpp:
    + added implicit_link.cpp

 + examples/cpp/tracing/example.cpp.tracing.standard/vc71/example.cpp.tracing.standard.vcproj:
 + examples/cpp/tracing/example.cpp.tracing.standard/vc8/example.cpp.tracing.standard.vcproj:
 + examples/cpp/tracing/example.cpp.tracing.standard/vc9/example.cpp.tracing.standard.vcproj:
    + added example.cpp.tracing.standard.vcproj

 + examples/cpp/tracing/example.cpp.tracing.vc8.sln:
    + added example.cpp.tracing.vc8.sln

 + examples/cpp/tracing/example.cpp.tracing.vc9.sln:
    + added example.cpp.tracing.vc9.sln

 ~ examples/cpp/tracing/example.cpp.tracing.with_function/example.cpp.tracing.with_function.cpp:
    ~ moved examples/cpp/example.cpp.tracing_with_function => examples/cpp/tracing/example.cpp.tracing.with_function

 + examples/cpp/tracing/example.cpp.tracing.with_function/implicit_link.cpp:
    + added implicit_link.cpp

 + examples/cpp/tracing/example.cpp.tracing.with_function/vc71/example.cpp.tracing.with_function.vcproj:
 + examples/cpp/tracing/example.cpp.tracing.with_function/vc8/example.cpp.tracing.with_function.vcproj:
 + examples/cpp/tracing/example.cpp.tracing.with_function/vc9/example.cpp.tracing.with_function.vcproj:
    + added example.cpp.tracing.with_function.vcproj

Test:

Test.Unit:

Test.Component:

 ~ test/component/test.component.be.file.threading/test.component.be.file.threading.cpp:
    ~ hide notice logs when verbosity={0|1}

Test.Performance:

Test.Scratch:

 ~ test/scratch/test.scratch.be.syslog.WithCallback/test.scratch.be.syslog.WithCallback.cpp:
 ~ test/scratch/test.scratch.fe.simple.WithCallback/test.scratch.fe.simple.WithCallback.cpp:
    ~ suppression of irrelevant warning

Dependencies:

 * STLSoft 1.9.104 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



26th November 2010 - 1.0.1 beta 203
===================================

Summary:
--------

 * added pantheios::ch inserter typedef (for pantheios::character) for inserting characters in a succinct manner
 * added experimental support for use of 64-bit UNIX file-handling APIs in 32-bit builds, using -D_FILE_OFFSET_BITS=64 in build/gcc44.unix.file64bits directory
 * added appl library build targets, to facilitate use of Pantheios across shared libraries with a common code
 * added HOW_YOU_CAN_HELP.txt to distribution
 * enhanced the documentation

Details:
--------

General:

Core:

Application Layer:

 + include/pantheios/inserters/ch.hpp:
 ~ include/pantheios/inserters/character.hpp:
    + added pantheios::ch inserter typedef for inserting characters in a succinct manner

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

 + added HOW_YOU_CAN_HELP.txt file, including:
    1. Defect reports
    2. Feature requests
    3. Submit your own extensions: inserters, back-ends, front-ends
    4. Sponsor development
    5. Write articles, blog-posts about your experiences
    6. Help flesh out the Wikipedia page for Pantheios

Documentation:

 + added section "What's with all these beta versions?" to the help
 ~ a lot of minor documentation improvements

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added appl library

 ~ build/gcc40.mac.x64/makefile:
    + added experimental support for use of 64-bit UNIX file-handling APIs in 32-bit builds, using -D_FILE_OFFSET_BITS=64 in build/gcc44.unix.file64bits directory

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.104 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



23rd November 2010 - 1.0.1 beta 202
===================================

Summary:
--------

 * added pantheios::m2w inserter class
 * added unit test, component test, and performance test for pantheios::m2w
 * added single-threaded widestring targets to makefiles for VC++ 5-7.1
 * improved compatibility with Visual C++'s so-called "safe string" library
 * updated util and core project files for Visual C++ 6, 8, and 9
 * tidied up makefiles
 * NOTE: Now requires STLSoft 1.9.104

Details:
--------

General:

Core:

Application Layer:

 + include/pantheios/inserters/m2w.hpp:
    + added pantheios::m2w inserter class
    + added include/pantheios/inserters/m2w.hpp

 ~ src/backends/bec.file.cpp:
    ~ fixed minor warning

 ~ src/inserters/boolean.cpp:
    ~ corrected documentation

 ~ src/inserters/integer.cpp:
 ~ src/inserters/pointer.cpp:
 ~ src/inserters/slice.cpp:
    ~ compatibility with Visual C++'s so-called "safe string" library

 + src/inserters/m2w.cpp:
    ~ can only be compiled in wide-string builds
    + added pantheios::m2w inserter class
    + added src/inserters/m2w.cpp

 ~ src/inserters/w2m.cpp:
    ~ can only be compiled in multibyte-string builds
    ~ corrected documentation

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc9.unixem/makefile:
    ~ tidying up makefiles

 ~ build/vc5/makefile:
    + now builds single-threaded widestring libraries (debug and release)
    ~ tidying up makefiles

 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
    + now builds single-threaded widestring libraries (debug and release)
    + added test.unit.inserters.m2w
    + added test.component.inserters.m2w
    + added test.performance.inserters.m2w
    - removed wide-string build targets for test.unit.inserters.w2m
    - removed wide-string build targets for test.component.inserters.w2m
    - removed wide-string build targets for test.performance.inserters.w2m

 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added test.unit.inserters.m2w
    + added test.component.inserters.m2w
    + added test.performance.inserters.m2w
    - removed wide-string build targets for test.unit.inserters.w2m
    - removed wide-string build targets for test.component.inserters.w2m
    - removed wide-string build targets for test.performance.inserters.w2m

 ~ projects/core/vc6/pantheios.core.dsp:
    - m2w is not compiled/linked in multibyte string builds
    - w2m is not compiled/linked in wide string builds
    + added src/inserters/m2w.cpp

 ~ projects/core/vc71/pantheios.core.vcproj:
    + added src/inserters/m2w.cpp

 ~ projects/core/vc8/pantheios.core.vcproj:
 ~ projects/core/vc9/pantheios.core.vcproj:
    + added x64 targets to VC++ 8 project file
    - m2w is not compiled/linked in multibyte string builds
    - w2m is not compiled/linked in wide string builds
    + added src/inserters/m2w.cpp

 ~ projects/util/vc8/pantheios.util.vcproj:
 ~ projects/util/vc9/pantheios.util.vcproj:
    + added x64 targets to VC++ 8 project file
    - m2w is not compiled/linked in multibyte string builds
    - w2m is not compiled/linked in wide string builds

Examples:

Test:

Test.Unit:

 + test/unit/test.unit.inserters.m2w/implicit_link.cpp:
 + test/unit/test.unit.inserters.m2w/test.unit.inserters.m2w.cpp:
 + test/unit/test.unit.inserters.m2w/vc6/test.unit.inserters.m2w.dsp:
    + added test.unit.inserters.m2w

Test.Component:

 + test/component/test.component.inserters.m2w/implicit_link.cpp:
 + test/component/test.component.inserters.m2w/test.component.inserters.m2w.cpp:
    + added test.component.inserters.m2w

Test.Performance:

 + test/performance/test.performance.inserters.m2w/implicit_link.cpp:
 + test/performance/test.performance.inserters.m2w/test.performance.inserters.m2w.cpp:
 + test/performance/test.performance.inserters.m2w/vc6/test.performance.inserters.m2w.dsp:
    + added test.performance.inserters.m2w

Test.Scratch:

Dependencies:

 * STLSoft 1.9.104 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



19th November 2010 - 1.0.1 beta 201
===================================

Summary:
--------

 * added callback frontend functionality, to allow dynamic specification/creation of process identity at runtime, to stock front-ends
 * added implicit link headers, scratch test programs, and new make targets for callback frontends
 * pantheios_util_snprintf() now uses __attribute__((format(printf())) (in GCC compilation)
 * various changes to improve makefiles, correct minor defects: shorted scratch test target names; simplified target labels
 * be.syslog scratch test program now uses simpler, dedicated program
 * added test.scratch.be.syslog.WithCallback

Details:
--------

General:

Core:

Application Layer:

 ~ src/inserters/pointer.cpp:
    ~ explicitly cast pointer value to unsigned long, to be compatible with pantheios_util_snprintf()

Tracing:

Assertion:

Util:

Extras:

Front-ends:

 ~ include/pantheios/frontends/stock.h:
    ~ definition of the new front-end callback application-defined function pantheios_fe_getAppProcessIdentity()

 + include/pantheios/implicit_link/fe.N.WithCallback.h:
 + include/pantheios/implicit_link/fe.all.WithCallback.h:
    + added include/pantheios/implicit_link/fe.all.WithCallback.h

 ~ include/pantheios/implicit_link/fe.N.h:
 ~ include/pantheios/implicit_link/fe.WindowsRegistry.h:
 ~ include/pantheios/implicit_link/fe.all.h:
 ~ include/pantheios/implicit_link/fe.fail.h:
 ~ include/pantheios/implicit_link/fe.null.h:
 ~ include/pantheios/implicit_link/fe.simple.h:
    ~ documentation changes

 + include/pantheios/implicit_link/fe.WindowsRegistry.WithCallback.h:
    + added include/pantheios/implicit_link/fe.WindowsRegistry.WithCallback.h

 + include/pantheios/implicit_link/fe.null.WithCallback.h:
    + added include/pantheios/implicit_link/fe.null.WithCallback.h

 + include/pantheios/implicit_link/fe.simple.WithCallback.h:
    + added include/pantheios/implicit_link/fe.simple.WithCallback.h

 ~ include/pantheios/util/string/snprintf.h:
    ~ pantheios_util_snprintf() now uses __attribute__((format(printf()))

 + projects/frontends/fe.N.WithCallback/vc6/fe.N.WithCallback.dsp:
 + projects/frontends/fe.N.WithCallback/vc71/fe.N.WithCallback.vcproj:
 + projects/frontends/fe.N.WithCallback/vc8/fe.N.WithCallback.vcproj:
 + projects/frontends/fe.N.WithCallback/vc9/fe.N.WithCallback.vcproj:
    + added fe.N.WithCallback

 + projects/frontends/fe.WindowsRegistry.WithCallback/vc6/fe.WindowsRegistry.WithCallback.dsp:
 + projects/frontends/fe.WindowsRegistry.WithCallback/vc71/fe.WindowsRegistry.WithCallback.vcproj:
 + projects/frontends/fe.WindowsRegistry.WithCallback/vc8/fe.WindowsRegistry.WithCallback.vcproj:
 + projects/frontends/fe.WindowsRegistry.WithCallback/vc9/fe.WindowsRegistry.WithCallback.vcproj:
    + added fe.WindowsRegistry.WithCallback

 + projects/frontends/fe.all.WithCallback/vc6/fe.all.WithCallback.dsp:
 + projects/frontends/fe.all.WithCallback/vc71/fe.all.WithCallback.vcproj:
 + projects/frontends/fe.all.WithCallback/vc8/fe.all.WithCallback.vcproj:
 + projects/frontends/fe.all.WithCallback/vc9/fe.all.WithCallback.vcproj:
 + projects/frontends/fe.null.WithCallback/vc6/fe.null.WithCallback.dsp:
 + projects/frontends/fe.null.WithCallback/vc71/fe.null.WithCallback.vcproj:
 + projects/frontends/fe.null.WithCallback/vc8/fe.null.WithCallback.vcproj:
 + projects/frontends/fe.null.WithCallback/vc9/fe.null.WithCallback.vcproj:
 + projects/frontends/fe.simple.WithCallback/vc6/fe.simple.WithCallback.dsp:
 + projects/frontends/fe.simple.WithCallback/vc71/fe.simple.WithCallback.vcproj:
 + projects/frontends/fe.simple.WithCallback/vc8/fe.simple.WithCallback.vcproj:
 + projects/frontends/fe.simple.WithCallback/vc9/fe.simple.WithCallback.vcproj:
    + added fe.simple.WithCallback

 ~ projects/frontends/pantheios.frontends.vc6.dsw:
    + added test.scratch.fe.simple.WithCallback
    + added fe.all.WithCallback
    + added fe.N.WithCallback
    + added fe.null.WithCallback
    + added fe.simple.WithCallback
    + added fe.WindowsRegistry.WithCallback

 ~ src/frontends/fe.N.c:
 ~ src/frontends/fe.WindowsRegistry.cpp:
 ~ src/frontends/fe.all.c:
 ~ src/frontends/fe.null.c:
 ~ src/frontends/fe.simple.c:
    ~ fe.all now supports callback functionality, defining pantheios_fe_getProcessIdentity() in terms of pantheios_fe_getAppProcessIdentity()

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:


 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ fixed/shortened scratch test target names, so make doesn't fail with those toolsets that can't accept long target names (e.g. CodeWarrior's make)
    ~ benign renaming of target labels
    + added callback front-end targets
    + added test.scratch.fe.simple.WithCallback

 ~ build/como433.unix/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc9.unixem/makefile:
    ~ fixed/shortened scratch test target names, so make doesn't fail with those toolsets that can't accept long target names (e.g. CodeWarrior's make)
    ~ benign renaming of target labels
    + added callback front-end targets
    + added test.scratch.fe.simple.WithCallback
    ~ be.syslog scratch test now uses dedicated program test.scratch.be.syslog
    + added be.syslog.WithCallback test program test.scratch.be.syslog.WithCallback

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

 ~ test/scratch/test.scratch.be.syslog.WithCallback/test.scratch.be.syslog.WithCallback.cpp:
 ~ test/scratch/test.scratch.be.syslog/test.scratch.be.syslog.cpp:
    - removed superfluous code from test programs

 + test/scratch/test.scratch.fe.simple.WithCallback/implicit_link.cpp:
 + test/scratch/test.scratch.fe.simple.WithCallback/test.scratch.fe.simple.WithCallback.cpp:
 + test/scratch/test.scratch.fe.simple.WithCallback/vc6/test.scratch.fe.simple.WithCallback.dsp:
    + added test.scratch.fe.simple.WithCallback

Dependencies:

 * STLSoft 1.9.102 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



15th November 2010 - 1.0.1 beta 200
===================================

Summary:
--------

 * added PANTHEIOS_BE_FILE_F_DELETE_IF_EMPTY to be.file
 * added pantheios::b shorthand inserter typedef (for pantheios::boolean)
 * added implicit link headers for be.syslog.WithCallback
 * added missing be.speech project files


Details:
--------

General:

Core:

Application Layer:

 + include/pantheios/inserters/b.hpp:
    + added include/pantheios/inserters/b.hpp (defines pantheios::b inserter)

 ~ include/pantheios/inserters/p.hpp:
    ~ properly structured file

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 ~ include/pantheios/backends/bec.file.h:
    + added PANTHEIOS_BE_FILE_F_DELETE_IF_EMPTY (to be.file)
    ~ improved documentation of be.file flags

 + include/pantheios/implicit_link/be.syslog.WithCallback.h:
 + include/pantheios/implicit_link/bec.syslog.WithCallback.h:
    + added implicit link headers for be.syslog.WithCallback

 ~ src/backends/bec.file.cpp:
 ~ test/unit/test.unit.bec.file/test.unit.bec.file.cpp:
    + added PANTHEIOS_BE_FILE_F_DELETE_IF_EMPTY (to be.file)

Distribution:

Documentation:

Makefiles / Project-files:

 + projects/backends/bec.speech.WithCallback/vc71/bec.speech.WithCallback.vcproj:
 + projects/backends/bec.speech.WithCallback/vc9/bec.speech.WithCallback.vcproj:
    + added bec.speech.WithCallback.vcproj (VC++9)

 + projects/backends/bec.speech/vc71/bec.speech.vcproj:
 + projects/backends/bec.speech/vc9/bec.speech.vcproj:
    + added bec.speech.vcproj (VC++9)

Examples:

 + examples/cpp/example.cpp.inserter.b/example.cpp.inserter.b.cpp:
 + examples/cpp/example.cpp.inserter.b/implicit_link.cpp:
 + examples/cpp/example.cpp.inserter.b/vc6/example.cpp.inserter.b.dsp:
 ~ examples/cpp/pantheios.examples.cpp.vc6.dsw:
    + added example.cpp.inserter.b

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.102 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



10th November 2010 - 1.0.1 beta 199
===================================

Summary:
--------

 * added pantheios::xp inserter
 * added example.cpp.inserter.p example program
 * added example.cpp.inserter.xp example program
 * added test.scratch.be.syslog scratch test for Syslog
 * added test.scratch.be.syslog.WithCallback scratch test for Syslog, which illustrates how to change facility and/or suppress writing to stderr

Details:
--------

General:

Core:

Application Layer:

 + include/pantheios/inserters/xp.hpp:
    + added pantheios::xp inserter

 ~ include/pantheios/inserters/i.hpp:
    ~ fixed doc typo

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ corrected defect which some make tools interpret as an unended macro
    - removed C example 6 and C++ example 26 - both demonstrating assert - from execution target test.examples
    + included C example 7 in build target build.test.examples as it is referenced in execution target test.examples
    + added example.cpp.inserter.p
    + added example.cpp.inserter.xp

 ~ build/vc5/makefile:
 ~ build/vc6/makefile:
    ~ corrected defect which some make tools interpret as an unended macro
    - removed C example 6 and C++ example 26 - both demonstrating assert - from execution target test.examples
    + included C example 7 in build target build.test.examples as it is referenced in execution target test.examples
    ~ remove NoX ACE targets
    + added example.cpp.inserter.p
    + added example.cpp.inserter.xp

Examples:

 + examples/cpp/example.cpp.inserter.xp/example.cpp.inserter.xp.cpp:
 + examples/cpp/example.cpp.inserter.xp/implicit_link.cpp:
 + examples/cpp/example.cpp.inserter.xp/vc6/example.cpp.inserter.xp.dsp:
 + examples/cpp/example.cpp.inserter.xp/vc71/example.cpp.inserter.xp.vcproj:
 + examples/cpp/example.cpp.inserter.xp/vc8/example.cpp.inserter.xp.vcproj:
 + examples/cpp/example.cpp.inserter.xp/vc9/example.cpp.inserter.xp.vcproj:
 ~ examples/cpp/pantheios.examples.cpp.vc6.dsw:
    + added example.cpp.inserter.xp

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

 + test/scratch/test.scratch.be.syslog/implicit_link.cpp:
 + test/scratch/test.scratch.be.syslog/test.scratch.be.syslog.cpp:
    + added test.scratch.be.syslog

 + test/scratch/test.scratch.be.syslog.WithCallback/implicit_link.cpp:
    + added test.scratch.be.syslog.WithCallback

 + test/scratch/test.scratch.be.syslog.WithCallback/test.scratch.be.syslog.WithCallback.cpp:
    ~ now suppresses writing to stderr (perror)
    ~ changed log statement message
    + added test.scratch.be.syslog.WithCallback

 ~ test/scratch/test.scratch.be.speech/test.scratch.be.speech.cpp:
    ~ changed log statement message

Dependencies:

 * STLSoft 1.9.102 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



8th November 2010 - 1.0.1 beta 198
==================================

Summary:
--------

 * added pantheios::i shorthand inserter typedef (for pantheios::integer)
 * added pantheios::xi shorthand inserter class (for pantheios::integer)
 * fixed defect vulnerability in PANTHEIOS_ASSERT() and PANTHEIOS_MESSAGE_ASSERT()
 * improves compatibility between narrow/wide Pantheios and narrow/wide ACE in be.ACE
 * improved detection of ACE in makefiles
 * trace API now reports file+line in bailout when assert log fails
 * added example for pantheios::i inserter
 * added example for pantheios::xi inserter
 * NOTE: Now requires STLSoft 1.9.102

Details:
--------

General:

 ~ include/pantheios/assert.h:
    ~ fixed defect in use of macro arguments in PANTHEIOS_ASSERT() and PANTHEIOS_MESSAGE_ASSERT()

Core:

 ~ src/core/api.cpp:
    ~ now reports file+line in bailout when assert log fails

Application Layer:

 + include/pantheios/inserters/i.hpp:
    + added include/pantheios/inserters/i.hpp, which defines the pantheios::i shorthand inserter

 + include/pantheios/inserters/xi.hpp:
    ~ ensures that -ve widths are allowed
    + added include/pantheios/inserters/xi.hpp, which defines the pantheios::xi shorthand inserter

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 ~ src/backends/bec.ACE.cpp:
    ~ include ACE headers first
    ~ improves compatibility between narrow/wide Pantheios and narrow/wide ACE
    ~ widestring compatibility

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/sunpro59x.unix/makefile:
    ~ now properly (in)compatible with ACE: only those compilers that support makefile pre-processor now compile ACE, and only when ACE environment variable is defined
    + added example.cpp.inserter.i
    + added example.cpp.inserter.xi

 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ now properly (in)compatible with ACE: only those compilers that support makefile pre-processor now compile ACE, and only when ACE environment variable is defined
    + added test.scratch.ACE
    + added example.cpp.inserter.i
    + added example.cpp.inserter.xi

Examples:

 + examples/cpp/example.cpp.inserter.i/example.cpp.inserter.i.cpp:
 + examples/cpp/example.cpp.inserter.i/implicit_link.cpp:
 + examples/cpp/example.cpp.inserter.i/vc6/example.cpp.inserter.i.dsp:
 + examples/cpp/example.cpp.inserter.i/vc71/example.cpp.inserter.i.vcproj:
 + examples/cpp/example.cpp.inserter.i/vc8/example.cpp.inserter.i.vcproj:
 + examples/cpp/example.cpp.inserter.i/vc9/example.cpp.inserter.i.vcproj:
    + added example.cpp.inserter.i

 + examples/cpp/example.cpp.inserter.xi/example.cpp.inserter.xi.cpp:
 + examples/cpp/example.cpp.inserter.xi/implicit_link.cpp:
 + examples/cpp/example.cpp.inserter.xi/vc6/example.cpp.inserter.xi.dsp:
 + examples/cpp/example.cpp.inserter.xi/vc71/example.cpp.inserter.xi.vcproj:
 + examples/cpp/example.cpp.inserter.xi/vc8/example.cpp.inserter.xi.vcproj:
 + examples/cpp/example.cpp.inserter.xi/vc9/example.cpp.inserter.xi.vcproj:
    + added example.cpp.inserter.xi

 ~ examples/cpp/example.cpp.integer/example.cpp.integer.cpp:
    ~ corrected example output comments

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.102 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



18th October 2010 - 1.0.1 beta 197
==================================

Summary:
--------

 * pantheios::integer inserter: now respects negative widths in three-parameter overloads
 * pantheios::integer inserter: 0x-prefix now counts in fixed-width formatting
 * pantheios::integer inserter: now deals with differently-sized integer types separately, allowing it to represents hex-form of 8-/16-bit integers in 2 and 4 digits
 * be.file now supports %T (for time) and %D (for date) format specifiers in file name
 * several substantial changes to Pantheios.Extras.COM's Exception Helpers, including change from default return E_UNEXPECTED to call ExitProcess() in catch-all clauses
 * NOTE: Now requires STLSoft 1.9.101

Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    ~ trimmed out a bunch of old version constants

 ~ include/pantheios/quality/contract.h:
 ~ include/pantheios/severity/levels.hpp:
    ~ trivial changes to comments and/or documentation

Core:

 ~ src/core/api.cpp:
    ~ non-functional internal type name changes

Application Layer:

 ~ src/inserters/integer.cpp:
    ~ pantheios::integer inserter now deals with differently-sized integer types separately, allowing it to represents hex-form of 8-/16-bit integers in 2 and 4 digits
    ~ 0x-prefixed numbers no longer have their minimum widths increased by 2
    ~ 3-parameter overloads now properly handle negative widths
    ~ improved contract enforcements
    ~ contract enforcement on width

 ~ include/pantheios/inserters/integer.hpp:
    ~ pantheios::integer inserter now deals with differently-sized integer types separately, allowing it to represents hex-form of 8-/16-bit integers in 2 and 4 digits
    ~ VC6 compatibility

 ~ include/pantheios/pantheios.hpp:
 ~ include/pantheios/trace.h:
 ~ include/pantheios/internal/initialiser.hpp:
    ~ trivial changes to comments and/or documentation

 ~ include/pantheios/inserters/adaptor.hpp:
 ~ include/pantheios/inserters/args.hpp:
 ~ include/pantheios/inserters/b64.hpp:
 ~ include/pantheios/inserters/boolean.hpp:
 ~ include/pantheios/inserters/character.hpp:
 ~ include/pantheios/inserters/hex_ptr.hpp:
 ~ include/pantheios/inserters/processid.hpp:
 ~ include/pantheios/inserters/w2m.hpp:
    ~ minor documentation markup changes

Tracing:

Assertion:

Util:

 ~ include/pantheios/util/backends/context.hpp:
    ~ spacing

 ~ include/pantheios/util/test/compiler_warnings_suppression.last_include.h:
    ~ minor documentation markup changes

Extras:

 ~ include/pantheios/extras/com/exception_helpers.hpp:
    ~ now calls ExitProcess() by default; optionally rethrows or returns E_UNEXPECTED depending on definition of PANTHEIOS_EXTRAS_COM_ABSORB_UNKNOWN_EXCEPTIONS or PANTHEIOS_EXTRAS_COM_RETHROW_UNKNOWN_EXCEPTIONS
    + now catches MFC exceptions (in MFC builds)
    + added two custom clause macros, to enable user-defined clauses
    ~ catch-all clause now logs at emergency severity

Front-ends:

Back-ends:

 ~ src/backends/bec.file.cpp:
    + be.file now supports %T (for time) and %D (for date) format specifiers in file name

 ~ include/pantheios/backends/bec.COMErrorObject.h:
 ~ include/pantheios/backends/bec.WindowsConsole.h:
 ~ include/pantheios/backends/bec.WindowsDebugger.h:
 ~ include/pantheios/backends/bec.WindowsSyslog.h:
 ~ include/pantheios/backends/bec.file.h:
 ~ include/pantheios/backends/bec.fprintf.h:
 ~ include/pantheios/backends/bec.speech.h:
 ~ include/pantheios/backends/bec.syslog.h:
    ~ minor documentation markup changes

Distribution:

Documentation:

Makefiles / Project-files:

Examples:

 ~ examples/cpp/example.cpp.integer/example.cpp.integer.cpp:
    + added more example cases

Test:

Test.Unit:

Test.Component:

 ~ test/component/test.component.inserters.integer/test.component.inserters.integer.cpp:
    ~ pantheios::integer inserter now deals with differently-sized integer types separately, allowing it to represents hex-form of 8-/16-bit integers in 2 and 4 digits
    + added more test cases, for hexadecimal conversion
    ~ adjusted to reflect changes in width processing when 0x prefixing

Test.Performance:

Test.Scratch:

 ~ test/scratch/test.scratch.be.file/test.scratch.be.file.cpp:
    + be.file now supports %T (for time) and %D (for date) format specifiers in file name

 ~ test/scratch/test.scratch.pseudoUNIX/test.scratch.pseudoUNIX.c:
    ~ removal of dead code

Dependencies:

 * STLSoft 1.9.101 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.16, bundled in this distribution



4th April 2010 - 1.0.1 beta 196
===============================

Summary:
--------

 * full widestring compatibility
 * VC++ 10 support
 * minor defect fixes
 * added PANTHEIOS_BE_FILE_F_WRITE_MULTIBYTE_CONTENTS and PANTHEIOS_BE_FILE_F_WRITE_WIDE_CONTENTS to be.file
 * NOTE: Now requires STLSoft 1.9.97

Details:
--------

General:

 ~ include/pantheios/assert.h:
    + added pantheios_logassertfail

 ~ include/pantheios/fileline.h:
    + added include/pantheios/fileline.h
    ~ separated definition of PANTHEIOS_FILELINE_A into include/pantheios/fileline.h; rest of tracing API remains in include/pantheios/trace.h

 ~ include/pantheios/implicit_link/implicit_link_base_.h:
    + added VC++ 10 support

 ~ include/pantheios/internal/string_encoding.h:
    ~ enhanced wide-string compatibility

 ~ include/pantheios/pantheios.h:
    + added pantheios_logassertfail

 ~ include/pantheios/trace.h:
    ~ separated definition of PANTHEIOS_FILELINE_A into include/pantheios/fileline.h; rest of tracing API remains in include/pantheios/trace.h

Core:

 ~ src/core/api.cpp:
    + added pantheios_logassertfail()
    ~ various compatibility enhancements and code refactoring

Application Layer:

 ~ include/pantheios/inserters/args.hpp:
 ~ include/pantheios/inserters/b64.hpp:
 ~ include/pantheios/inserters/blob.hpp:
    ~ fixed defect in wide-string support

 ~ include/pantheios/inserters/character.hpp:
 ~ include/pantheios/inserters/hostid.hpp:
    ~ wide-string compatibility

 ~ include/pantheios/inserters/exception.hpp:
    + added pantheios::exception inserter class

 ~ include/pantheios/inserters/threadid.hpp:
    + added wide-string support

 ~ include/pantheios/inserters/w2m.hpp:
    ~ w2m constructor template now explicit

 ~ src/inserters/exception.cpp:
    + added pantheios::exception inserter class

 ~ src/inserters/integer.cpp:
 ~ src/inserters/pointer.cpp:
    ~ fixing memset() defect for wide-string compatibility

 ~ src/inserters/threadid.cpp:
    + added wide-string support

Tracing:

Assertion:

Util:

 ~ include/pantheios/util/backends/context.hpp:
 ~ include/pantheios/util/string/strdup.h:
    ~ enhanced wide-string compatibility

 ~ src/util/strdup.c:
    ~ enhanced wide-string compatibility

 ~ src/util/time.cpp:
    ~ wide-string compatibility

Extras:

Front-ends:

 ~ src/frontends/fe.N.c:
 ~ src/frontends/fe.WindowsRegistry.cpp:
 ~ src/frontends/fe.all.c:
 ~ src/frontends/fe.fail.c:
 ~ src/frontends/fe.null.c:
    ~ wide-string compatibility

 ~ src/frontends/fe.simple.c:
    ~ fixed defect in wide-string support

Back-ends:

 ~ include/pantheios/backends/be.N.h:
 ~ include/pantheios/backends/bec.WindowsSyslog.h:
    ~ fixed defect in wide-string compatibility

 ~ include/pantheios/backends/bec.file.h:
    + added PANTHEIOS_BE_FILE_F_WRITE_MULTIBYTE_CONTENTS
    + added PANTHEIOS_BE_FILE_F_WRITE_WIDE_CONTENTS

 ~ src/backends/be.N.c:
    ~ wide-string compatibility

 ~ src/backends/be.lrsplit.c:
 ~ src/backends/bec.WindowsConsole.cpp:
 ~ src/backends/bec.WindowsSyslog.cpp:
    ~ wide-string compatibility

 ~ src/backends/bec.file.cpp:
    + added PANTHEIOS_BE_FILE_F_WRITE_MULTIBYTE_CONTENTS
    + added PANTHEIOS_BE_FILE_F_WRITE_WIDE_CONTENTS

Distribution:

Documentation:

Makefiles / Project-files:

 ~ projects/core/vc6/pantheios.core.dsp:
 ~ projects/core/vc9/pantheios.core.vcproj:
    ~ wide-string compatibility

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc10.unixem/makefile:
 ~ build/vc10.x64/makefile:
 ~ build/vc10/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    ~ corrected example program names (to include OS and architecture designators)
    + added pantheios::exception inserter class

 + build/vc10.unixem/makefile:
 + build/vc10.x64/makefile:
 + build/vc10/makefile:

Examples:

 ~ examples/c/example.c.101/example.c.101.c:
 ~ examples/c/example.c.N/example.c.N.c:
 ~ examples/c/example.c.assert/example.c.assert.c:
 ~ examples/c/example.c.core.pantheios_logprintf/example.c.core.pantheios_logprintf.c:
 ~ examples/c/example.c.extended_severity/example.c.extended_severity.c:
 ~ examples/c/example.c.getcurrenttime/example.c.getcurrenttime.c:
 ~ examples/c/example.c.gethostname/example.c.gethostname.c:
 ~ examples/c/example.c.log_n/example.c.log_n.c:
 ~ examples/cpp/example.cpp.101/example.cpp.101.cpp:
 ~ examples/cpp/example.cpp.api.no_namespace/example.cpp.api.no_namespace.cpp:
 ~ examples/cpp/example.cpp.args/example.cpp.args.cpp:
 ~ examples/cpp/example.cpp.assert/example.cpp.assert.cpp:
 ~ examples/cpp/example.cpp.b64/example.cpp.b64.cpp:
 ~ examples/cpp/example.cpp.blob/example.cpp.blob.cpp:
 ~ examples/cpp/example.cpp.callback_be/example.cpp.callback_be.cpp:
 ~ examples/cpp/example.cpp.character/example.cpp.character.cpp:
 ~ examples/cpp/example.cpp.custom_fe/example.cpp.custom_fe.cpp:
 ~ examples/cpp/example.cpp.custom_severity_levels/example.cpp.custom_severity_levels.cpp:
 ~ examples/cpp/example.cpp.custom_type_1/example.cpp.custom_type_1.cpp:
 ~ examples/cpp/example.cpp.custom_type_1/implicit_link.cpp:
 ~ examples/cpp/example.cpp.custom_type_1/vc6/example.cpp.custom_type_1.dsp:
 ~ examples/cpp/example.cpp.file/example.cpp.file.cpp:
 ~ examples/cpp/example.cpp.hetero1/example.cpp.hetero1.cpp:
 ~ examples/cpp/example.cpp.hex_ptr/example.cpp.hex_ptr.cpp:
 ~ examples/cpp/example.cpp.highres/example.cpp.highres.cpp:
 ~ examples/cpp/example.cpp.host_id/example.cpp.host_id.cpp:
 ~ examples/cpp/example.cpp.implicit_link_1/example.cpp.implicit_link_1.cpp:
 ~ examples/cpp/example.cpp.integer/example.cpp.integer.cpp:
 ~ examples/cpp/example.cpp.lowres/example.cpp.lowres.cpp:
 ~ examples/cpp/example.cpp.mx.1/example.cpp.mx.1.cpp:
 ~ examples/cpp/example.cpp.mx.2/example.cpp.mx.2.cpp:
 ~ examples/cpp/example.cpp.pad/example.cpp.pad.cpp:
 ~ examples/cpp/example.cpp.pointer/example.cpp.pointer.cpp:
 ~ examples/cpp/example.cpp.process_id/example.cpp.process_id.cpp:
 ~ examples/cpp/example.cpp.real/example.cpp.real.cpp:
 ~ examples/cpp/example.cpp.strings/example.cpp.strings.cpp:
 ~ examples/cpp/example.cpp.thread_id/example.cpp.thread_id.cpp:
 ~ examples/cpp/example.cpp.tracing.with_function/example.cpp.tracing.with_function.cpp:
 ~ examples/cpp/example.cpp.tracing/example.cpp.tracing.cpp:
    ~ wide-string compatibility

Test:

Test.Unit:

 ~ test/unit/pantheios.test.unit.vc6.dsw:
 ~ test/unit/test.unit.be.N/test.unit.be.N.c:
 ~ test/unit/test.unit.be.WindowsSyslog/test.unit.be.WindowsSyslog.cpp:
 ~ test/unit/test.unit.be.fail/test.unit.be.fail.c:
 ~ test/unit/test.unit.be.lrsplit/test.unit.be.lrsplit.c:
    ~ wide-string compatibility

 ~ test/unit/test.unit.bec.COMErrorObject/test.unit.bec.COMErrorObject.cpp:
 ~ test/unit/test.unit.bec.fprintf/test.unit.bec.fprintf.cpp:
    ~ wide-string compatibility
    ~ now uses XTESTS_TEST_MULTIBYTE_STRING_EQUAL rather than deprecated XTESTS_TEST_MULTIBYTE_STRING_EQUAL

 ~ test/unit/test.unit.bec.file/test.unit.bec.file.cpp:
    + added PANTHEIOS_BE_FILE_F_WRITE_MULTIBYTE_CONTENTS
    + added PANTHEIOS_BE_FILE_F_WRITE_WIDE_CONTENTS
    ~ wide-string compatibility
    ~ now uses XTESTS_TEST_MULTIBYTE_STRING_EQUAL rather than deprecated XTESTS_TEST_MULTIBYTE_STRING_EQUAL

 ~ test/unit/test.unit.bec.fail/test.unit.bec.fail.c:
 ~ test/unit/test.unit.fe.N/test.unit.fe.N.c:
 ~ test/unit/test.unit.fe.WindowsRegistry/test.unit.fe.WindowsRegistry.cpp:
 ~ test/unit/test.unit.fe.all/test.unit.fe.all.c:
 ~ test/unit/test.unit.fe.fail/test.unit.fe.fail.c:
 ~ test/unit/test.unit.fe.null/test.unit.fe.null.c:
 ~ test/unit/test.unit.fe.simple/test.unit.fe.simple.c:
 ~ test/unit/test.unit.util.getcurrenttime/test.unit.util.getcurrenttime.cpp:
 ~ test/unit/test.unit.util.strnlen/test.unit.util.strnlen.cpp:
    ~ wide-string compatibility

 ~ test/unit/test.unit.util.gethostname/test.unit.util.gethostname.cpp:
    ~ wide-string compatibility
    ~ wide-string compatibility
    ~ now uses XTESTS_TEST_MULTIBYTE_STRING_EQUAL rather than deprecated XTESTS_TEST_MULTIBYTE_STRING_EQUAL

Test.Component:

 ~ test/component/test.component.be.file.threading/test.component.be.file.threading.cpp:
 ~ test/component/test.component.core.initialisation_sequence/test.component.core.initialisation_sequence.c:
 ~ test/component/test.component.inserters.args/test.component.inserters.args.cpp:
 ~ test/component/test.component.log.1/test.component.log.1.cpp:
    ~ wide-string compatibility

 ~ test/component/test.component.core.pantheios_logprintf/test.component.core.pantheios_logprintf.cpp:
 ~ test/component/test.component.core.pantheios_logputs/test.component.core.pantheios_logputs.cpp:
 ~ test/component/test.component.custom_severity/test.component.custom_severity.cpp:
 ~ test/component/test.component.inserters.b64/test.component.inserters.b64.cpp:
 ~ test/component/test.component.inserters.boolean/test.component.inserters.boolean.cpp:
 ~ test/component/test.component.inserters.hostId/test.component.inserters.hostId.cpp:
 ~ test/component/test.component.inserters.integer/test.component.inserters.integer.cpp:
 ~ test/component/test.component.inserters.pad/test.component.inserters.pad.cpp:
 ~ test/component/test.component.inserters.pointer/test.component.inserters.pointer.cpp:
 ~ test/component/test.component.inserters.processId/test.component.inserters.processId.cpp:
 ~ test/component/test.component.inserters.real/test.component.inserters.real.cpp:
 ~ test/component/test.component.inserters.threadId/test.component.inserters.threadId.cpp:
 ~ test/component/test.component.inserters.w2m/test.component.inserters.w2m.cpp:
    ~ wide-string compatibility
    ~ now uses XTESTS_TEST_MULTIBYTE_STRING_EQUAL rather than deprecated XTESTS_TEST_MULTIBYTE_STRING_EQUAL

 ~ test/component/test.component.trace.1/test.component.trace.1.cpp:
    ~ now uses XTESTS_TEST_MULTIBYTE_STRING_EQUAL rather than deprecated XTESTS_TEST_MULTIBYTE_STRING_EQUAL

Test.Performance:

 ~ test/performance/test.performance.inserters.w2m/test.performance.inserters.w2m.cpp:
    ~ wide-string compatibility

Test.Scratch:

 ~ test/scratch/test.scratch.api/test.scratch.api.cpp:
 ~ test/scratch/test.scratch.be.N.fail/test.scratch.be.N.fail.cpp:
 ~ test/scratch/test.scratch.fe/test.scratch.fe.cpp:
    ~ wide-string compatibility

Dependencies:

 * STLSoft 1.9.97 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.15, bundled in this distribution



5th March 2010 - 1.0.1 beta 195
===============================

Summary:
--------

 * pantheios::w2m inserter class now accepts arbitrary wide string types (e.g. std::wstring, stlsoft::simple_wstring)
 * enhanced component test for pantheios::w2m inserter class
 * NOTE: Now requires STLSoft 1.9.94

Details:
--------

General:

Core:

Application Layer:

 ~ include/pantheios/inserters/w2m.hpp:
 ~ src/inserters/w2m.cpp:
    + w2m now supports conversion construction from arbitrary wide (string) types

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Documentation:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 ~ test/component/test.component.inserters.w2m/test.component.inserters.w2m.cpp:
    + added tests of w2m with std::wstring and stlsoft::simple_wstring

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.94 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.14, bundled in this distribution



15th February 2010 - 1.0.1 beta 194
===================================

Summary:
--------

 * added pantheios::slice inserter, along with test programs
 * wide-string compatibility at the source level (no build targets)
 * ensures that PANTHEIOS_TRACE_PREFIX is convertible to pan_char_t const*
 * reports failure to assign file for all back-ends
 * Windows versions of GCC makefiles now generate libraries with leading lib and with the .a extension (i.e. libpantheios.1.util.gcc34.a, rather than pantheios.1.util.gcc34.lib)
 * added build.common target to makefiles
 * removed VC++ 8/9 "safe" makefiles
 * bundles xTests 0.14.5
 * NOTE: Now requires STLSoft 1.9.93

Details:
--------

General:

Core:

 ~ src/core/api.cpp:
    ~ improved compiler compatibility (with Borland)
    ~ trivial formatting changes

 ~ src/core/auto.cpp:
 ~ src/core/logprintf.c:
    ~ trivial formatting changes

Application Layer:

 ~ include/pantheios/inserters/adaptor.hpp:
 ~ include/pantheios/inserters/args.hpp:
 ~ include/pantheios/inserters/b64.hpp:
 ~ include/pantheios/inserters/blob.hpp:
 ~ include/pantheios/inserters/boolean.hpp:
 ~ include/pantheios/inserters/character.hpp:
 ~ include/pantheios/inserters/fmt.hpp:
 ~ include/pantheios/inserters/hex_ptr.hpp:
 ~ include/pantheios/inserters/hostid.hpp:
 ~ include/pantheios/inserters/ids.hpp:
 ~ include/pantheios/inserters/integer.hpp:
 ~ include/pantheios/inserters/pad.hpp:
 ~ include/pantheios/inserters/pointer.hpp:
 ~ include/pantheios/inserters/processid.hpp:
 ~ include/pantheios/inserters/real.hpp:
 ~ include/pantheios/inserters/threadid.hpp:
    ~ now defined in terms of STLSOFT_PPF_pragma_once_SUPPORT, rather than STLSOFT_CF_PRAGMA_ONCE_SUPPORT
    ~ trivial formatting changes

 + include/pantheios/inserters/slice.hpp:

 ~ include/pantheios/inserters/w2m.hpp:
    ~ now defined in terms of STLSOFT_PPF_pragma_once_SUPPORT, rather than STLSOFT_CF_PRAGMA_ONCE_SUPPORT
    ~ wide-string compatibility
    ~ trivial formatting changes

 ~ include/pantheios/internal/initialiser.hpp:
    ~ trivial formatting changes

 ~ src/inserters/args.cpp:
 ~ src/inserters/boolean.cpp:
 ~ src/inserters/hostid.cpp:
 ~ src/inserters/integer.cpp:
 ~ src/inserters/pointer.cpp:
 ~ src/inserters/processid.cpp:
 ~ src/inserters/real.cpp:
 ~ src/inserters/threadid.cpp:
    ~ trivial formatting changes

 ~ src/inserters/b64.cpp:
 ~ src/inserters/blob.cpp:
 ~ src/inserters/w2m.cpp:
    ~ wide-string compatibility
    ~ trivial formatting changes

 + src/inserters/slice.cpp:
    ~ wide-string compatibility
    ~ improved compiler compatibility (with Borland)

Tracing:

Assertion:

Util:

 ~ include/pantheios/util/backends/arguments.h:
 ~ include/pantheios/util/backends/context.hpp:
 ~ include/pantheios/util/com/exception_helpers.hpp:
 ~ include/pantheios/util/core/apidefs.hpp:
 ~ include/pantheios/util/system/hostname.h:
 ~ include/pantheios/util/system/processid.h:
 ~ include/pantheios/util/system/threadid.h:
 ~ include/pantheios/util/test/compiler_warnings_suppression.first_include.h:
 ~ include/pantheios/util/test/compiler_warnings_suppression.last_include.h:
 ~ include/pantheios/util/time/currenttime.h:
    ~ trivial formatting changes

 ~ include/pantheios/util/memory/auto_buffer_selector.hpp:
 ~ include/pantheios/util/severity/ACE.h:
 ~ include/pantheios/util/severity/WindowsEventLog.h:
 ~ include/pantheios/util/severity/syslog.h:
 ~ include/pantheios/util/string/snprintf.h:
 ~ include/pantheios/util/string/strdup.h:
    ~ now defined in terms of STLSOFT_PPF_pragma_once_SUPPORT, rather than STLSOFT_CF_PRAGMA_ONCE_SUPPORT
    ~ trivial formatting changes

 ~ src/util/bailout.c:
 ~ src/util/be.parse.cpp:
 ~ src/util/core.apidefs.cpp:
 ~ src/util/hostname.c:
 ~ src/util/init_code_strings.c:
 ~ src/util/processid.c:
 ~ src/util/severity_strings.c:
 ~ src/util/strnlen.cpp:
 ~ src/util/threadid.c:
 ~ src/util/time.cpp:
    ~ trivial formatting changes

 ~ src/util/be.context.cpp:
    ~ improved compiler compatibility (with Borland)
    ~ trivial formatting changes

Extras:

Front-ends:

 ~ src/frontends/fe.N.c:
 ~ src/frontends/fe.WindowsRegistry.cpp:
 ~ src/frontends/fe.all.c:
 ~ src/frontends/fe.fail.c:
 ~ src/frontends/fe.null.c:
 ~ src/frontends/fe.simple.c:
    ~ trivial formatting changes

Back-ends:

 ~ src/backends/be.ACE.c:
 ~ src/backends/be.COMErrorObject.c:
 ~ src/backends/be.WindowsConsole.c:
 ~ src/backends/be.WindowsDebugger.c:
 ~ src/backends/be.WindowsEventLog.c:
 ~ src/backends/be.WindowsMessageBox.c:
 ~ src/backends/be.WindowsSyslog.c:
 ~ src/backends/be.fail.c:
 ~ src/backends/be.file.c:
 ~ src/backends/be.fprintf.c:
 ~ src/backends/be.loader.c:
 ~ src/backends/be.lrsplit.c:
 ~ src/backends/be.null.c:
 ~ src/backends/be.speech.c:
 ~ src/backends/be.syslog.c:
 ~ src/backends/be.test.c:
 ~ src/backends/bec.ACE.cpp:
 ~ src/backends/bec.fail.c:
 ~ src/backends/bec.loader.cpp:
 ~ src/backends/bec.null.c:
 ~ src/backends/bec.syslog.c:
 ~ src/backends/bel.ACE.c:
 ~ src/backends/bel.COMErrorObject.c:
 ~ src/backends/bel.WindowsConsole.c:
 ~ src/backends/bel.WindowsDebugger.c:
 ~ src/backends/bel.WindowsEventLog.c:
 ~ src/backends/bel.WindowsMessageBox.c:
 ~ src/backends/bel.WindowsSyslog.c:
 ~ src/backends/bel.fail.c:
 ~ src/backends/bel.file.c:
 ~ src/backends/bel.fprintf.c:
 ~ src/backends/bel.loader.c:
 ~ src/backends/bel.null.c:
 ~ src/backends/bel.speech.c:
 ~ src/backends/bel.syslog.c:
 ~ src/backends/bel.test.c:
 ~ src/backends/ber.ACE.c:
 ~ src/backends/ber.COMErrorObject.c:
 ~ src/backends/ber.WindowsConsole.c:
 ~ src/backends/ber.WindowsDebugger.c:
 ~ src/backends/ber.WindowsEventLog.c:
 ~ src/backends/ber.WindowsMessageBox.c:
 ~ src/backends/ber.WindowsSyslog.c:
 ~ src/backends/ber.fail.c:
 ~ src/backends/ber.file.c:
 ~ src/backends/ber.fprintf.c:
 ~ src/backends/ber.loader.c:
 ~ src/backends/ber.null.c:
 ~ src/backends/ber.speech.c:
 ~ src/backends/ber.syslog.c:
 ~ src/backends/ber.test.c:
    ~ trivial formatting changes

 ~ src/backends/bec.COMErrorObject.cpp:
 ~ src/backends/bec.WindowsConsole.cpp:
 ~ src/backends/bec.WindowsDebugger.cpp:
 ~ src/backends/bec.WindowsEventLog.cpp:
 ~ src/backends/bec.WindowsMessageBox.cpp:
 ~ src/backends/bec.WindowsSyslog.cpp:
 ~ src/backends/bec.fprintf.cpp:
 ~ src/backends/bec.speech.cpp:
    ~ wide-string compatibility
    ~ trivial formatting changes

 ~ src/backends/bec.file.cpp:
    ~ wide-string compatibility
    ~ reports failure to assign file for all back-ends
    ~ trivial formatting changes

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc9.unixem/makefile:
    + build.common target
    + test.component.inserters.slice

 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.win32/makefile:
    + build.common target
    + test.component.inserters.slice
    ~ Windows versions of GCC now generate libraries with leading lib and with the .a extension (i.e. libpantheios.1.util.gcc34.a, rather than pantheios.1.util.gcc34.lib)

 ~ build/vc6/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + build.common target
    + test.component.inserters.slice
    + added slice inserter

 ~ examples/c/example.c.101/vc71/example.c.101.vcproj:
 ~ examples/c/example.c.101/vc8/example.c.101.vcproj:
 ~ examples/c/example.c.101/vc9/example.c.101.vcproj:
 ~ examples/c/example.c.N/vc6/example.c.N.dsp:
 ~ examples/c/example.c.N/vc71/example.c.N.vcproj:
 ~ examples/c/example.c.N/vc8/example.c.N.vcproj:
 ~ examples/c/example.c.N/vc9/example.c.N.vcproj:
 ~ examples/c/example.c.core.pantheios_logprintf/vc71/example.c.core.pantheios_logprintf.vcproj:
 ~ examples/c/example.c.core.pantheios_logprintf/vc8/example.c.core.pantheios_logprintf.vcproj:
 ~ examples/c/example.c.core.pantheios_logprintf/vc9/example.c.core.pantheios_logprintf.vcproj:
 ~ examples/c/example.c.log_n/vc71/example.c.log_n.vcproj:
 ~ examples/c/example.c.log_n/vc8/example.c.log_n.vcproj:
 ~ examples/c/example.c.log_n/vc9/example.c.log_n.vcproj:
    ~ wide-string compatibility

 ~ projects/backends/be.ACE/vc6/be.ACE.dsp:
 ~ projects/backends/be.ACE/vc8/be.ACE.vcproj:
 ~ projects/backends/be.COMErrorObject/vc6/be.COMErrorObject.dsp:
 ~ projects/backends/be.COMErrorObject/vc8/be.COMErrorObject.vcproj:
 ~ projects/backends/be.N/vc6/be.N.dsp:
 ~ projects/backends/be.WindowsConsole/vc6/be.WindowsConsole.dsp:
 ~ projects/backends/be.WindowsConsole/vc8/be.WindowsConsole.vcproj:
 ~ projects/backends/be.WindowsDebugger/vc6/be.WindowsDebugger.dsp:
 ~ projects/backends/be.WindowsDebugger/vc8/be.WindowsDebugger.vcproj:
 ~ projects/backends/be.WindowsEventLog/vc6/be.WindowsEventLog.dsp:
 ~ projects/backends/be.WindowsEventLog/vc8/be.WindowsEventLog.vcproj:
 ~ projects/backends/be.WindowsSyslog/vc6/be.WindowsSyslog.dsp:
 ~ projects/backends/be.WindowsSyslog/vc8/be.WindowsSyslog.vcproj:
 ~ projects/backends/be.fail/vc6/be.fail.dsp:
 ~ projects/backends/be.fail/vc8/be.fail.vcproj:
 ~ projects/backends/be.file/vc6/be.file.dsp:
 ~ projects/backends/be.file/vc8/be.file.vcproj:
 ~ projects/backends/be.fprintf/vc6/be.fprintf.dsp:
 ~ projects/backends/be.fprintf/vc8/be.fprintf.vcproj:
 ~ projects/backends/be.lrsplit/vc6/be.lrsplit.dsp:
 ~ projects/backends/be.null/vc6/be.null.dsp:
 ~ projects/backends/be.null/vc8/be.null.vcproj:
 ~ projects/backends/be.syslog/vc6/be.syslog.dsp:
 ~ projects/backends/be.test/vc6/be.test.dsp:
 ~ projects/backends/be.test/vc8/be.test.vcproj:
 ~ projects/backends/bec.ACE/vc6/bec.ACE.dsp:
 ~ projects/backends/bec.ACE/vc8/bec.ACE.vcproj:
 ~ projects/backends/bec.COMErrorObject/vc6/bec.COMErrorObject.dsp:
 ~ projects/backends/bec.COMErrorObject/vc8/bec.COMErrorObject.vcproj:
 ~ projects/backends/bec.WindowsConsole.WithCallback/vc6/bec.WindowsConsole.WithCallback.dsp:
 ~ projects/backends/bec.WindowsConsole.WithCallback/vc8/bec.WindowsConsole.WithCallback.vcproj:
 ~ projects/backends/bec.WindowsConsole/vc6/bec.WindowsConsole.dsp:
 ~ projects/backends/bec.WindowsConsole/vc8/bec.WindowsConsole.vcproj:
 ~ projects/backends/bec.WindowsDebugger.WithCallback/vc6/bec.WindowsDebugger.WithCallback.dsp:
 ~ projects/backends/bec.WindowsDebugger.WithCallback/vc8/bec.WindowsDebugger.WithCallback.vcproj:
 ~ projects/backends/bec.WindowsDebugger/vc6/bec.WindowsDebugger.dsp:
 ~ projects/backends/bec.WindowsDebugger/vc8/bec.WindowsDebugger.vcproj:
 ~ projects/backends/bec.WindowsEventLog/vc6/bec.WindowsEventLog.dsp:
 ~ projects/backends/bec.WindowsEventLog/vc8/bec.WindowsEventLog.vcproj:
 ~ projects/backends/bec.WindowsMessageBox/vc6/bec.WindowsMessageBox.dsp:
 ~ projects/backends/bec.WindowsSyslog/vc6/bec.WindowsSyslog.dsp:
 ~ projects/backends/bec.WindowsSyslog/vc8/bec.WindowsSyslog.vcproj:
 ~ projects/backends/bec.fail/vc6/bec.fail.dsp:
 ~ projects/backends/bec.fail/vc8/bec.fail.vcproj:
 ~ projects/backends/bec.file.WithCallback/vc6/bec.file.WithCallback.dsp:
 ~ projects/backends/bec.file.WithCallback/vc8/bec.file.WithCallback.vcproj:
 ~ projects/backends/bec.file/vc6/bec.file.dsp:
 ~ projects/backends/bec.file/vc8/bec.file.vcproj:
 ~ projects/backends/bec.fprintf.WithCallback/vc6/bec.fprintf.WithCallback.dsp:
 ~ projects/backends/bec.fprintf.WithCallback/vc8/bec.fprintf.WithCallback.vcproj:
 ~ projects/backends/bec.fprintf/vc6/bec.fprintf.dsp:
 ~ projects/backends/bec.fprintf/vc8/bec.fprintf.vcproj:
 ~ projects/backends/bec.null/vc6/bec.null.dsp:
 ~ projects/backends/bec.null/vc8/bec.null.vcproj:
 ~ projects/backends/bec.speech.WithCallback/vc6/bec.speech.WithCallback.dsp:
 ~ projects/backends/bec.speech.WithCallback/vc8/bec.speech.WithCallback.vcproj:
 ~ projects/backends/bec.speech/vc6/bec.speech.dsp:
 ~ projects/backends/bec.speech/vc8/bec.speech.vcproj:
 ~ projects/backends/bec.syslog/vc6/bec.syslog.dsp:
 ~ projects/backends/bec.test/vc6/bec.test.dsp:
 ~ projects/backends/bec.test/vc8/bec.test.vcproj:
 ~ projects/backends/bel.ACE/vc6/bel.ACE.dsp:
 ~ projects/backends/bel.ACE/vc8/bel.ACE.vcproj:
 ~ projects/backends/bel.COMErrorObject/vc6/bel.COMErrorObject.dsp:
 ~ projects/backends/bel.COMErrorObject/vc8/bel.COMErrorObject.vcproj:
 ~ projects/backends/bel.WindowsConsole/vc6/bel.WindowsConsole.dsp:
 ~ projects/backends/bel.WindowsConsole/vc8/bel.WindowsConsole.vcproj:
 ~ projects/backends/bel.WindowsDebugger/vc6/bel.WindowsDebugger.dsp:
 ~ projects/backends/bel.WindowsDebugger/vc8/bel.WindowsDebugger.vcproj:
 ~ projects/backends/bel.WindowsEventLog/vc6/bel.WindowsEventLog.dsp:
 ~ projects/backends/bel.WindowsEventLog/vc8/bel.WindowsEventLog.vcproj:
 ~ projects/backends/bel.WindowsSyslog/vc6/bel.WindowsSyslog.dsp:
 ~ projects/backends/bel.WindowsSyslog/vc8/bel.WindowsSyslog.vcproj:
 ~ projects/backends/bel.fail/vc6/bel.fail.dsp:
 ~ projects/backends/bel.fail/vc8/bel.fail.vcproj:
 ~ projects/backends/bel.file/vc6/bel.file.dsp:
 ~ projects/backends/bel.file/vc8/bel.file.vcproj:
 ~ projects/backends/bel.fprintf/vc6/bel.fprintf.dsp:
 ~ projects/backends/bel.fprintf/vc8/bel.fprintf.vcproj:
 ~ projects/backends/bel.null/vc6/bel.null.dsp:
 ~ projects/backends/bel.null/vc8/bel.null.vcproj:
 ~ projects/backends/bel.syslog/vc6/bel.syslog.dsp:
 ~ projects/backends/bel.test/vc6/bel.test.dsp:
 ~ projects/backends/bel.test/vc8/bel.test.vcproj:
 ~ projects/backends/ber.ACE/vc6/ber.ACE.dsp:
 ~ projects/backends/ber.ACE/vc8/ber.ACE.vcproj:
 ~ projects/backends/ber.COMErrorObject/vc6/ber.COMErrorObject.dsp:
 ~ projects/backends/ber.COMErrorObject/vc8/ber.COMErrorObject.vcproj:
 ~ projects/backends/ber.WindowsConsole/vc6/ber.WindowsConsole.dsp:
 ~ projects/backends/ber.WindowsConsole/vc8/ber.WindowsConsole.vcproj:
 ~ projects/backends/ber.WindowsDebugger/vc6/ber.WindowsDebugger.dsp:
 ~ projects/backends/ber.WindowsDebugger/vc8/ber.WindowsDebugger.vcproj:
 ~ projects/backends/ber.WindowsEventLog/vc6/ber.WindowsEventLog.dsp:
 ~ projects/backends/ber.WindowsEventLog/vc8/ber.WindowsEventLog.vcproj:
 ~ projects/backends/ber.WindowsSyslog/vc6/ber.WindowsSyslog.dsp:
 ~ projects/backends/ber.WindowsSyslog/vc8/ber.WindowsSyslog.vcproj:
 ~ projects/backends/ber.fail/vc6/ber.fail.dsp:
 ~ projects/backends/ber.fail/vc8/ber.fail.vcproj:
 ~ projects/backends/ber.file/vc6/ber.file.dsp:
 ~ projects/backends/ber.file/vc8/ber.file.vcproj:
 ~ projects/backends/ber.fprintf/vc6/ber.fprintf.dsp:
 ~ projects/backends/ber.fprintf/vc8/ber.fprintf.vcproj:
 ~ projects/backends/ber.null/vc6/ber.null.dsp:
 ~ projects/backends/ber.null/vc8/ber.null.vcproj:
 ~ projects/backends/ber.syslog/vc6/ber.syslog.dsp:
 ~ projects/backends/ber.test/vc6/ber.test.dsp:
 ~ projects/backends/ber.test/vc8/ber.test.vcproj:
 ~ projects/core/vc6/pantheios.core.dsp:
 ~ projects/core/vc71/pantheios.core.vcproj:
 ~ projects/core/vc8/pantheios.core.vcproj:
 ~ projects/core/vc9/pantheios.core.vcproj:
 ~ projects/frontends/fe.N/vc6/fe.N.dsp:
 ~ projects/frontends/fe.N/vc71/fe.N.vcproj:
 ~ projects/frontends/fe.N/vc8/fe.N.vcproj:
 ~ projects/frontends/fe.N/vc9/fe.N.vcproj:
 ~ projects/frontends/fe.WindowsRegistry/vc6/fe.WindowsRegistry.dsp:
 ~ projects/frontends/fe.WindowsRegistry/vc71/fe.WindowsRegistry.vcproj:
 ~ projects/frontends/fe.WindowsRegistry/vc8/fe.WindowsRegistry.vcproj:
 ~ projects/frontends/fe.WindowsRegistry/vc9/fe.WindowsRegistry.vcproj:
 ~ projects/frontends/fe.all/vc6/fe.all.dsp:
 ~ projects/frontends/fe.all/vc71/fe.all.vcproj:
 ~ projects/frontends/fe.all/vc8/fe.all.vcproj:
 ~ projects/frontends/fe.all/vc9/fe.all.vcproj:
 ~ projects/frontends/fe.null/vc6/fe.null.dsp:
 ~ projects/frontends/fe.null/vc71/fe.null.vcproj:
 ~ projects/frontends/fe.null/vc8/fe.null.vcproj:
 ~ projects/frontends/fe.null/vc9/fe.null.vcproj:
 ~ projects/frontends/fe.simple/vc6/fe.simple.dsp:
 ~ projects/frontends/fe.simple/vc71/fe.simple.vcproj:
 ~ projects/frontends/fe.simple/vc8/fe.simple.vcproj:
 ~ projects/frontends/fe.simple/vc9/fe.simple.vcproj:
 ~ projects/util/vc6/pantheios.util.dsp:
 ~ projects/util/vc71/pantheios.util.vcproj:
 ~ projects/util/vc8/pantheios.util.vcproj:
 ~ projects/util/vc9/pantheios.util.vcproj:
    ~ wide-string compatibility

Examples:

 ~ examples/cpp/example.cpp.tracing.with_function/example.cpp.tracing.with_function.cpp:
    ~ ensures that PANTHEIOS_TRACE_PREFIX is convertible to pan_char_t const*

Test:

Test.Unit:

Test.Component:

 ~ test/component/pantheios.test.component.vc6.dsw:
    + test.component.inserters.slice

 ~ test/component/test.component.inserters.slice/test.component.inserters.slice.cpp:
 ~ test/component/test.component.inserters.slice/vc6/test.component.inserters.slice.dsp:
    ~ wide-string compatibility

Test.Performance:

Test.Scratch:

 ~ test/scratch/pantheios.test.scratch.vc6.dsw:
    + test.scratch.inserter.slice

 ~ test/scratch/test.scratch.be.N/vc8/test.scratch.be.N.vcproj:
    ~ wide-string compatibility

Dependencies:

 * STLSoft 1.9.93 or later, available from http://stlsoft.org/
 * b64 1.4, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.14, bundled in this distribution



24th July 2009 - 1.0.1 beta 193
===============================

Summary:
--------

 * added static filtering to be.N (to supplement the dynamic filtering)
 * minor change to be.WindowsConsole (to avoid seeming to leak memory, when none is leaked, due to initialisation ordering issues)
 * bundles xTests 0.14.1
 * NOTE: Now requires STLSoft 1.9.86
 * NOTE: These are breaking changes: any programs that use be.N
   must be recompiled and relinked

Details:
--------

General:

Core:

 ~ include/pantheios/pantheios.h:
    ~ now requires STLSoft 1.9.86

Application Layer:

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 ~ include/pantheios/backends/be.N.h:
 ~ src/backends/be.N.c:
    ~ now provides per-back-end static filtering (in addition to the dynamic filtering via pantheios_fe_isSeverityLogged())

 ~ src/backends/bec.WindowsConsole.cpp:
    ~ now uses processheap_allocator (to avoid false positives in memory tracking)

Distribution:

 ~ FAQ.txt:
    ~ revised FAQ #16 to clarify explanation

Documentation:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.86 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.14, bundled in this distribution



8th July 2009 - 1.0.1 beta 192
==============================

Summary:
--------

 * fixed defect in 64-bit bec.WindowsConsole
 * enhanced compiler compatibility for GCC, Intel and VC++ compilers
 * reduced dependencies in inserters header files
 * bundles xTests 0.13.3
 * NOTE: Now requires STLSoft 1.9.85

Details:
--------

General:

Core:

Application Layer:

 ~ include/pantheios/inserters.hpp:
    - removed dependency on pantheios/pantheios.hpp

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 ~ src/backends/bec.WindowsConsole.cpp:
    ~ corrected defect that prevents output

Distribution:

Documentation:

Makefiles / Project-files:

Examples:

 ~ examples/cpp/example.cpp.tracing.with_function/example.cpp.tracing.with_function.cpp:
    ~ removed unnecessary PANTHEIOS_STRINGIZE() on __FUNCTION__

Test:

Test.Unit:

 ~ test/unit/test.unit.levels.dynamic_initialisation/test.unit.levels.dynamic_initialisation.cpp:
    ~ Intel C/C++ 8 compatibility

Test.Component:

 ~ test/component/test.component.be.file.threading/test.component.be.file.threading.cpp:
    ~ NoX compatibility
    ~ GCC compatibility

Test.Performance:

Test.Scratch:

 ~ test/scratch/test.scratch.be.file/implicit_link.cpp:
    + implicit linking for pseudo UNIX build

Dependencies:

 * STLSoft 1.9.85 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.13, bundled in this distribution



4th July 2009 - 1.0.1 beta 191
==============================

Summary:
--------

 * added be.console pseudo back-end (resolves to be.WindowsConsole on Windows, and be.fprintf otherwise)
 * fixed multi-threading defect in be.file
 * added test.component.be.file.threading component test
 * bundles xTests 0.13.2
 * NOTE: Now requires STLSoft 1.9.85

Details:
--------

General:

Core:

Application Layer:

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 + include/pantheios/implicit_link/be.console.h:
 + include/pantheios/implicit_link/bec.console.h:
 + include/pantheios/implicit_link/bel.console.h:
 + include/pantheios/implicit_link/ber.console.h:
    + added be.console pseudo back-end

 ~ src/backends/bec.file.cpp:
    ~ corrected multi-threading defect, caused by failure to include pantheios/internal/threading.h

Distribution:

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/gcc44.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added test.component.be.file.threading
    ~ modified the names of all scratch tests to start with "test.scratch."

Examples:

Test:

Test.Unit:

Test.Component:

 ~ test/component/pantheios.test.component.vc6.dsw:
    + added test.component.be.file.threading

 + test/component/test.component.be.file.threading/test.component.be.file.threading.cpp
 + test/component/test.component.be.file.threading/implicit_link.cpp
 + test/component/test.component.be.file.threading/vc6/test.component.be.file.threading.dsp
    + added test.component.be.file.threading

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.85 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.13, bundled in this distribution



3rd July 2009 - 1.0.1 beta 190
==============================

Summary:
--------

 * workaround of probably Intel 11 defect
 * added GCC 4.4 (UNIX) makefile
 * bundles xTests 0.13.2
 * NOTE: Now requires STLSoft 1.9.85

Details:
--------

General:

Core:

Application Layer:

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 ~ src/backends/bec.fprintf.cpp:
 ~ src/backends/bec.WindowsDebugger.cpp:
    ~ dtor made explicit to match ~Context() exception-specification

Distribution:

Documentation:

Makefiles / Project-files:

 + build/gcc44.unix/makefile:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.85 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.13, bundled in this distribution



29th June 2009 - 1.0.1 beta 189
===============================

Summary:
--------

 * added pantheios::pad inserter function, and PANTHEIOS_LPAD() and PANTHEIOS_RPAD() macros
 * added example and component-test for pantheios::pad inserter
 * fixed defect in test back-end be.test
 * bundles xTests 0.13.2
 * NOTE: Now requires STLSoft 1.9.85

Details:
--------

General:

Core:

 ~ include/pantheios/pantheios.h:
    + added pantheios_addPad()

 ~ src/core/api.cpp:
    + added pantheios_getPad()

Application Layer:

 + include/pantheios/inserters/pad.hpp:
    + added pantheios::pad
    + added PANTHEIOS_LPAD()
    + added PANTHEIOS_RPAD()

Tracing:

Assertion:

Util:

Extras:

Front-ends:

Back-ends:

 ~ include/pantheios/backends/bec.test.h:
    ~ whitespace

 ~ src/backends/bec.test.cpp:
    ~ fixed reference-counting memory leak

Distribution:

 ~ FAQ.txt:
    + added Q17: "?"

Documentation:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + test.component.inserter.pad
    + example.cpp.pad

Examples:

 ~ examples/cpp/pantheios.examples.cpp.vc6.dsw:
    + example.cpp.pad

 + examples/cpp/example.cpp.pad/example.cpp.pad.cpp
 + examples/cpp/example.cpp.pad/implicit_link.cpp
 + examples/cpp/example.cpp.pad/vc6/example.cpp.pad.dsp

Test:

Test.Unit:

Test.Component:

 ~ test/component/test.component.vc6.dsw:
    + test.component.inserter.pad

 + test/component/test.component.inserter.pad/test.component.inserter.pad.cpp
 + test/component/test.component.inserter.pad/implicit_link.cpp
 + test/component/test.component.inserter.pad/vc6/test.component.inserters.pad.dsp

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.85 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.13, bundled in this distribution



21st May 2009 - 1.0.1 beta 188
==============================

Summary:
--------

 * added example.c.extended_severity example
 * added two new FAQ items
 * fixed defect in stock back-ends whereby severity string would be empty if extended severity information was specified
 * various documentation enhancements
 * NOTE: Now requires STLSoft 1.9.83

Details:
--------

General:

Core:

 ~ include/pantheios/pantheios.h:
    ~ documentation enhancements

Application Layer:

Tracing:

Assertion:

 ~ include/pantheios/assert.h:
    ~ documentation enhancements

Util:

Extras:

 ~ include/pantheios/extras/com/exception_helpers.hpp:
    ~ documentation correction

Front-ends:

Back-ends:

 ~ include/pantheios/util/backends/context.hpp:
    ~ trivial documentation fix

 ~ src/util/be.context.cpp:
    ~ fixed defect whereby severity string would be empty if extended severity information was specified

Distribution:

 ~ FAQ.txt:
    + added Q15: "?"
    + added Q16: "?"

Documentation:

    + added c/example.c.extended_severity/example.c.extended_severity.c example
    + added c/example.c.getcurrenttime/example.c.getcurrenttime.c example
    + added c/example.c.gethostname/example.c.gethostname.c example
    + added cpp/example.cpp.101/example.cpp.101.cpp example
    + added cpp/example.cpp.assert/example.cpp.assert.cpp example
    + added cpp/example.cpp.hex_ptr/example.cpp.hex_ptr.cpp example
    + added cpp/example.cpp.host_id/example.cpp.host_id.cpp example
    + added cpp/example.cpp.mx.1/example.cpp.mx.1.cpp example
    + added cpp/example.cpp.mx.2/example.cpp.mx.2.cpp example

    ~ documentation enhancements

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac.x64/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/sunpro59x.unix/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added example.c.extended_severity

Examples:

 ~ examples/c/example.c.assert/example.c.assert.c:
    ~ corrected documentation

 ~ examples/cpp/pantheios.examples.c.vc6.dsw:
    + added example.c.extended_severity project

 ~ examples/cpp/pantheios.examples.cpp.vc6.dsw:
    + added example.cpp.assert project

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.83 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.13, bundled in this distribution



15th May 2009 - 1.0.1 beta 187
==============================

Summary:
--------

 * added makefile for Mac OS-X 64-bit
 * added prototype makefile for Sun Pro 5.9
 * all UNIX makefiles now remove Windows newline sequence in distribution sources
 * bundles xTests 0.13.1
 * NOTE: Now requires STLSoft 1.9.82

Details:
--------

General:

Core:

Application Layer:

Tracing:

Assertion:

Util:

Extras:

 ~ include/pantheios/extras/com/exception_helpers.hpp:
    ~ fixed pantheios::com::extras documentation

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/dm/makefile:
    ~ tidying up linker arguments

 ~ build/como433.unix/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/makefile.tmpl:
    + added step to prepare files for OS, and on UNIX this does a removal of all \r from .h and .c files

 ~ build/gcc33.mac/makefile:
    + added step to prepare files for OS, and on UNIX this does a removal of all \r from .h and .c files
    ~ corrected failure to link to pthread in mt variants

 ~ build/sunpro59x.unix/makefile:
    + added *experimental support* for SunPro 5.9

 ~ build/vc8.x64/makefile:
 ~ build/vc9.x64/makefile:
    + added -machine:x64 to VC 8/9 x64 makefiles
    ~ tidying up linker arguments

Examples:

Test:

Test.Unit:

 + test.unit.util.strnlen

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.82 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.13, bundled in this distribution



8th May 2009 - 1.0.1 beta 186
=============================

Summary:
--------

 * added the Pantheios Assertion API: PANTHEIOS_ASSERT() and PANTHEIOS_MESSAGE_ASSERT()
 * added example.c.assert and example.cpp.assert examplee
 * includes examples involving variadic macros in Borland makefiles, from 5.82 onwards
 * removed unnecessary (and unhelpful) dependencies on pantheios/pantheios.hpp for inserter classes
 * changed semantics of pantheios_malloc() to guarantee zeroing of allocation memory and valid alignment for any type
 * fixed incorrect definition of getInitErrorString()
 * numerous changes to build foundation of future wide string support
 * bundles xTests 0.13.1
 * NOTE: Now requires STLSoft 1.9.81

Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    + added PAN_CHAR_T
    + added PANTHEIOS_NS_QUAL() and PANTHEIOS_SUBNS_QUAL()
    ~ pantheios_malloc() - adjusted to guarantee proper alignment for any type
    ~ pantheios_malloc() - allocated block is zeroed out
    ~ fixed defect, whereby deprecated function getInitErrorString() was erroneously implemented in terms of getStockSeverityString() - thank you Copy-Paste demon!
    ~ changing init code strings back to char
    ~ widestring compatibility

Core:

 ~ include/pantheios/util/core/apidefs.hpp:
    ~ trivial format changes

 ~ src/core/api.cpp:
    ~ pantheios_malloc() - adjusted to guarantee proper alignment for any type
    ~ pantheios_malloc() - allocated block is zeroed out
    ~ widestring compatibility

Application Layer:

 + include/pantheios/assert.h:
    + added PANTHEIOS_ASSERT(), and PANTHEIOS_MESSAGE_ASSERT()

 ~ include/pantheios/inserters/args.hpp:
 ~ include/pantheios/inserters/blob.hpp:
 ~ include/pantheios/inserters/processid.hpp:
    ~ widestring compatibility

 ~ include/pantheios/inserters/pointer.hpp:
 ~ include/pantheios/inserters/real.hpp:
    - removed unnecessary (and unhelpful) dependency on pantheios/pantheios.hpp

 ~ src/inserters/processid.cpp:
    ~ widestring compatibility

Tracing:

Assertion:

 + added the Pantheios Assertion API

Util:

 ~ src/util/bailout.c:
 ~ src/util/core.apidefs.cpp:
    ~ trivial formatting changes

 ~ src/util/be.parse.cpp:
 ~ src/util/time.cpp:
    ~ widestring compatibility

 ~ src/util/init_code_strings.c:
    ~ changing init code strings back to char

 ~ src/util/snprintf.c:
    ~ now discriminates "safe string" requirement by PANTHEIOS_USING_SAFE_STR_FUNCTIONS, rather than STLSOFT_USING_SAFE_STR_FUNCTIONS

Extras:

Front-ends:

 ~ src/frontends/fe.N.c:
 ~ src/frontends/fe.all.c:
 ~ src/frontends/fe.fail.c:
 ~ src/frontends/fe.null.c:
 ~ src/frontends/fe.simple.c:
    ~ trivial formatting changes

 ~ src/frontends/fe.WindowsRegistry.cpp:
    ~ trivial formatting changes
    ~ widestring compatibility

Back-ends:

 ~ include/pantheios/backends/be.lrsplit.h:
 ~ include/pantheios/backends/bec.ACE.h:
 ~ include/pantheios/backends/bec.COMErrorObject.h:
 ~ include/pantheios/backends/bec.WindowsConsole.h:
 ~ include/pantheios/backends/bec.WindowsDebugger.h:
 ~ include/pantheios/backends/bec.WindowsEventLog.h:
 ~ include/pantheios/backends/bec.WindowsMessageBox.h:
 ~ include/pantheios/backends/bec.WindowsSyslog.h:
 ~ include/pantheios/backends/bec.fail.h:
 ~ include/pantheios/backends/bec.file.h:
 ~ include/pantheios/backends/bec.loader.h:
 ~ include/pantheios/backends/bec.null.h:
 ~ include/pantheios/backends/bec.speech.h:
 ~ include/pantheios/backends/bec.syslog.h:
    ~ trivial formatting changes

 ~ include/pantheios/backends/bec.test.h:
    ~ widestring compatibility
    ~ trivial formatting changes

Distribution:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.mac/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.mac/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added example.c.assert to makefiles
    + added example.cpp.assert to makefiles

 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
    ~ utilises support for COMPILER_SUPPORTS_VARIADIC_MACROS in Borland, from 5.82 onwards
    + added example.c.assert to makefiles
    + added example.cpp.assert to makefiles

 ~ projects/util/vc6/pantheios.util.dsp:
 ~ projects/util/vc71/pantheios.util.vcproj:
 ~ projects/util/vc8/pantheios.util.vcproj:
    ~ thorough refactoring of project file configurations

Examples:

 + example.c.assert
 + example.cpp.assert

 ~ examples/c/example.c.gethostname/example.c.gethostname.c:
 ~ examples/cpp/example.cpp.hetero1/example.cpp.hetero1.cpp:
    ~ "safe string" library compatibility

Test:

Test.Unit:

 + test.unit.util.strnlen

Test.Component:

Test.Performance:

Test.Scratch:

Dependencies:

 * STLSoft 1.9.81 or later, available from http://stlsoft.org/
 * b64 1.3, bundled in this distribution
 * shwild 0.9, bundled in this distribution
 * xTests 0.13, bundled in this distribution



17th April 2009 - 1.0.1 beta 185
================================

Summary:
--------

 * implicit link support for Intel C/C++ 10 & 11
 * preparatory work for widestring support
 * corrected two defects in pantheios_util_strnlen() length-limited length calculations
 * added unit test for strnlen
 * implicit link example now returns EXIT_SUCCESS, so 'make test.examples' can succeed
 * makefile clean.* targets now clean up all artefacts
 * NoX builds now correctly suppress use of exceptions and RTTI
 * bundles xTests 0.11.4
 * NOTE: Now requires STLSoft 1.9.77

Details:
--------

General:

 ~ include/pantheios/pantheios.h:
    + now includes pantheios/internal/string_encoding.h

 ~ include/pantheios/backend.h:
    ~ trivial format changes

 ~ include/pantheios/frontend.h:
    ~ trivial format changes

 ~ include/pantheios/implicit_link/implicit_link_base_.h:
    + added support for Intel C/C++ 10 and 11
    + added '.widestring' to name for wide string builds
    ~ fixed missed '.nox' to name for No-eXception builds

Core:

 ~ src/core/api.cpp:
    ~ character encoding adjustment
    - removed now-redundant inclusion of pantheios/internal/string_encoding.h

Application Layer:

 ~ include/pantheios/pantheios.hpp:
 ~ include/pantheios/inserters/integer.hpp:
 ~ include/pantheios/inserters/pointer.hpp:
 ~ include/pantheios/inserters/real.hpp:
    ~ preparatory work for wide string support

 ~ src/inserters/args.cpp:
    - removed now-redundant inclusion of pantheios/internal/string_encoding.h
    ~ suppresses warnings in NoX builds

 ~ src/inserters/hostid.cpp:
 ~ src/inserters/integer.cpp:
 ~ src/inserters/pointer.cpp:
 ~ src/inserters/real.cpp:
    - removed now-redundant inclusion of pantheios/internal/string_encoding.h

Tracing:

Util:

 ~ src/util/bailout.c:
 ~ src/util/be.context.cpp:
 ~ src/util/be.parse.cpp:
 ~ src/util/init_code_strings.c:
 ~ src/util/severity_strings.c:
    - removal of pantheios/internal/string_encoding.h, no longer needed as include in pantheios/pantheios.h

 ~ src/util/hostname.c:
 ~ src/util/time.cpp:
    ~ widestring compatibility

 ~ src/util/snprintf.c:
    ~ widestring compatibility
    ~ trivial formatting changes

 ~ src/util/strnlen.cpp:
    ~ enforced contract (pre-condition) for pan_slice_t::get_lazy_length()
    ~ fixed defect whereby a min-max search returned a value off by 1
    ~ fixed defect whereby a reverse search was conducted if min and max lengths were the same

Extras:

Front-ends:

Back-ends:

 ~ include/pantheios/backends/bec.fprintf.h:
    ~ trivial format changes

 ~ src/backends/bec.COMErrorObject.cpp:
 ~ src/backends/bec.fprintf.cpp:
 ~ src/backends/bec.speech.cpp:
 ~ src/backends/bec.WindowsDebugger.cpp:
    ~ preparatory work for wide string support
    ~ trivial formatting changes

 ~ src/backends/bec.WindowsConsole.cpp:
    ~ preparatory work for wide string support
    ~ trivial formatting changes
    ~ suppresses warnings in NoX builds

 ~ src/backends/bec.fail.c:
 ~ src/backends/bec.null.c:
 ~ src/backends/bec.test.cpp:
 ~ src/backends/bec.WindowsEventLog.cpp:
 ~ src/backends/bec.WindowsMessageBox.cpp:
    ~ preparatory work for wide string support

 ~ src/backends/bec.WindowsSyslog.cpp:
    ~ preparatory work for wide string support
    - removed now-redundant inclusion of pantheios/internal/string_encoding.h
    ~ trivial formatting changes

 ~ src/backends/bec.file.cpp:
    ~ avoided warnings from "safe string" library
    ~ trivial formatting changes

 ~ src/backends/bec.syslog.c:
    ~ fixed dependency compilation error
    ~ changed C++ to C comments

Distribution:

Makefiles / Project-files:

 ~ build/ar/makefile:
 ~ build/bc551/makefile:
 ~ build/bc56/makefile:
 ~ build/bc564/makefile:
 ~ build/bc582/makefile:
 ~ build/bc59x/makefile:
 ~ build/bc61x/makefile:
 ~ build/como433.unix/makefile:
 ~ build/como433.win32/makefile:
 ~ build/cw8.unix/makefile:
 ~ build/cw8.win32/makefile:
 ~ build/dm/makefile:
 ~ build/gcc32.unix/makefile:
 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.mac/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc34.win32/makefile:
 ~ build/gcc40.mac/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.mac/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.mac/makefile:
 ~ build/gcc43.unix/makefile:
 ~ build/icl10.win32/makefile:
 ~ build/icl11.win32/makefile:
 ~ build/icl6.win32/makefile:
 ~ build/icl7.win32/makefile:
 ~ build/icl8.win32/makefile:
 ~ build/icl9.win32/makefile:
 ~ build/vc5/makefile:
 ~ build/vc6.unixem/makefile:
 ~ build/vc6/makefile:
 ~ build/vc7/makefile:
 ~ build/vc71/makefile:
 ~ build/vc8.unixem/makefile:
 ~ build/vc8.x64/makefile:
 ~ build/vc8/makefile:
 ~ build/vc9.unixem/makefile:
 ~ build/vc9.x64/makefile:
 ~ build/vc9/makefile:
    + added test.unit.util.strnlen
    ~ sorting out clean targets
    + added cleaning of .manifest files, for VC++ 8+
    ~ correction for UNIX emulation makefiles
    ~ corrected NoX builds: now both exceptions and RTTI are suppressed

Examples:

 ~ examples/cpp/example.cpp.implicit_link_1/example.cpp.implicit_link_1.cpp:
    ~ now returns EXIT_SUCCESS, so 'make test.examples' can run to completion

Test:

Test.Unit:

 + test.unit.util.strnlen

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.77 or later
   (http://stlsoft.org/)



16th April 2009 - 1.0.1 beta 184
================================

Summary:
--------

 * added 'version' member to all back-end initialisation structures, and verification action during back-end initialisation function
 * added PANTHEIOS_BE_INIT_RC_FUTURE_VERSION_REQUESTED and PANTHEIOS_BE_INIT_RC_OLD_VERSION_NOT_SUPPORTED initialisation codes
 * various minor documentation enhancements
 * bundles xTests 0.11.3
 * NOTE: Now requires STLSoft 1.9.77
 * NOTE: These are breaking changes: any programs that use stock
   back-ends must be modified, recompiled and relinked

Details:
--------

General:

 ~ include/pantheios/init_codes.h:
    + added PANTHEIOS_BE_INIT_RC_FUTURE_VERSION_REQUESTED initialisation code
    + added PANTHEIOS_BE_INIT_RC_OLD_VERSION_NOT_SUPPORTED initialisation code

Core:

Application Layer:

Tracing:

Util:

Extras:

 ~ include/pantheios/extras/com/exception_helpers.hpp
    ~ allows customisation of logging statements

Front-ends:

Back-ends:

 ~ include/pantheios/backends/bec.COMErrorObject.h:
 ~ include/pantheios/backends/bec.WindowsConsole.h:
 ~ include/pantheios/backends/bec.WindowsDebugger.h:
 ~ include/pantheios/backends/bec.WindowsSyslog.h:
 ~ include/pantheios/backends/bec.file.h:
 ~ include/pantheios/backends/bec.fprintf.h:
 ~ include/pantheios/backends/bec.loader.h:
 ~ include/pantheios/backends/bec.speech.h:
 ~ include/pantheios/backends/bec.syslog.h:
    + added version member to initialisation structure, and verified it during initialisation

 ~ src/backends/be.N.c:
 ~ src/backends/be.lrsplit.c:
 ~ src/backends/bec.ACE.cpp:
 ~ src/backends/bec.fail.c:
 ~ src/backends/bec.null.c:
 ~ src/backends/bec.WindowsEventLog.cpp:
 ~ src/backends/bec.WindowsMessageBox.cpp:
    ~ function declaration layout adjustments

 ~ src/backends/bec.COMErrorObject.cpp:
 ~ src/backends/bec.WindowsConsole.cpp:
 ~ src/backends/bec.WindowsDebugger.cpp:
 ~ src/backends/bec.WindowsSyslog.cpp:
 ~ src/backends/bec.file.cpp:
 ~ src/backends/bec.fprintf.cpp:
 ~ src/backends/bec.loader.cpp:
 ~ src/backends/bec.speech.cpp:
 ~ src/backends/bec.syslog.c:
    + added version member to initialisation structure, and verified it during initialisation
    ~ function declaration layout adjustments

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.77 or later
   (http://stlsoft.org/)



16th February 2009 - 1.0.1 beta 183
===================================

Summary:
--------

 * fixed defect in pantheios_logvprintf() that resulted in complete (rather than partial) truncation of over-long statements
 * workaround in pantheios::integer inserter class for VC++ 6's distinct 32-bit integer types

Details:
--------

General:

Core:

 ~ src/core/api.cpp:
    ~ fixed pantheios_logvprintf() defect, whereby an over-long log statement would be truncated to zero length, rather than PANTHEIOS_CORE_LOGPRINTF_STACK_SIZE (which defaults to 4096)

Application Layer:

 ~ include/pantheios/inserters/integer.hpp:
 ~ src/inserters/integer.cpp:
    ~ workaround for VC++ 6's distinct (un)signed 32-bit integer types; to be done properly once STLSoft 1.10 is released

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

 ~ examples/cpp/example.cpp.integer/example.cpp.integer.cpp:
    ~ expanded example to include newly fixed sint32_t/uint32_t for VC++ 6

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.74 or later
   (http://stlsoft.org/)



15th February 2009 - 1.0.1 beta 182
===================================

Summary:
--------

 * workaround for Mac OS-X gethostname() defect
 * added support for Intel C/C++ 10 and 11
 * corrected packaging problem which led to old version of xTests being bundled in 1.0.1 beta 181
 * bundles xTests 0.10.4

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 ~ src/util/hostname.c:
    ~ workaround for Mac OS-X defect in gethostname(), whereby insufficient buffer does not set errno to ENAMETOOLONG

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 + build/icl10.win32/makefile
 + build/icl11.win32/makefile

 ~ build/gcc32.win32/makefile:
 ~ build/gcc33.win32/makefile:
 ~ build/gcc34.win32/makefile:
    + enforcing presence of environment variables for required dependencies

 ~ build/gcc32.unix/makefile:
 ~ build/gcc33.unix/makefile:
 ~ build/gcc34.unix/makefile:
 ~ build/gcc40.unix/makefile:
 ~ build/gcc41.unix/makefile:
 ~ build/gcc42.unix/makefile:
 ~ build/gcc43.unix/makefile:
    + enforcing presence of environment variables for required dependencies
    ~ corrected slashes for ACE-relative library and include paths

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.74 or later
   (http://stlsoft.org/)



13th February 2009 - 1.0.1 beta 181
===================================

Summary:
--------

 * forces use of STLSoft 1.9.74, to workaround Borland code generation defects
 * NOTE: Now requires STLSoft 1.9.74

Details:
--------

General:

 ~ forces use of STLSoft 1.9.74, which contains a modified version of basic_simple_string that forces compilation of useless code in Borland to workaround Borland code generation defect

Core:

Application Layer:

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.74 or later
   (http://stlsoft.org/)



3rd February 2009 - 1.0.1 beta 180
==================================

Summary:
--------

 * support for Borland 5.9.x and 6.1.x
 * NOTE: Now requires STLSoft 1.9.73

Details:
--------

General:

 ~ include/pantheios/implicit_link/implicit_link_base_.h:
    + support for Borland 5.9.x and 6.1.x

Core:

 ~ src/core/api.cpp:
    + support for Borland 5.9.x and 6.1.x

Application Layer:

Tracing:

Util:

 ~ src/util/be.context.cpp:
    + support for Borland 5.9.x and 6.1.x

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 + build/bc59x/makefile
 + build/bc61x/makefile

Examples:

Test:

Test.Unit:

 ~ test/unit/test.unit.util.getcurrenttime/test.unit.util.getcurrenttime.cpp:
    + support for Borland 5.9.x and 6.1.x

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.73 or later
   (http://stlsoft.org/)



1st February 2009 - 1.0.1 beta 179
==================================

Summary:
--------

 * fixed defect whereby pantheios_logvprintf() (and pantheios_logprintf()) failed to check severity before logging
 * NOTE: Now requires STLSoft 1.9.72

Details:
--------

General:

Core:

 ~ src/core/api.cpp:
    ~ pantheios_logvprintf() now tests severity before writing

Application Layer:

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.72 or later
   (http://stlsoft.org/)



16th January 2009 - 1.0.1 beta 178
==================================

Summary:
--------

 * added PANTHEIOS_BE_FILE_F_SHARE_ON_WINDOWS, which causes be.file to allow write-sharing on Windows
 * other minor changes
 * NOTE: Now requires STLSoft 1.9.66

Details:
--------

General:

Core:

 ~ include/pantheios/pantheios.h:
    ~ ensures c_str_ptr shims never return NULL

Application Layer:

 ~ include/pantheios/inserters/boolean.hpp:
    ~ fixed up documentation defect

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

 ~ src/backends/bec.file.cpp:
    + supports PANTHEIOS_BE_FILE_F_SHARE_ON_WINDOWS, which causes be.file to allow write-sharing on Windows
    ~ created a member constant for the severity mask

 ~ src/backends/bec.fprintf.cpp:
 ~ src/backends/bec.WindowsConsole.cpp:
 ~ src/backends/bec.WindowsDebugger.cpp:
    ~ created a member constant for the severity mask

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.66 or later
   (http://stlsoft.org/)



1st January 2009 - 1.0.1 beta 177
=================================

Summary:
--------

 * now has full "Safe String" compatibility for VC++ 8+
 * added GNU printf-format attribute to pantheios_logprintf()
 * adjustment of example and test programs to use updated functions, instead of deprecated functions
 * adjusting case of bail out statements

Details:
--------

General:

Core:

 ~ include/pantheios/pantheios.h:
    + added GNU printf-format attribute to pantheios_logprintf()

 ~ src/core/api.cpp:
    - removal of dependency on functions that cause VC++ 8+ to carp about "safety"

Application Layer:

 ~ src/inserters/w2m.cpp:
    ~ adjusted to be compatible with VC++ 8+ "safe string" library
    - removal of dependency on functions that cause VC++ 8+ to carp about "safety"

Tracing:

Util:

 ~ src/util/time.cpp:
    ~ adjusting case of bail out statements

Extras:

Front-ends:

Back-ends:

 ~ src/backends/bec.WindowsConsole.cpp:
 ~ src/backends/bec.WindowsSyslog.cpp:
 ~ src/backends/bec.file.cpp:
    - removal of dependency on functions that cause VC++ 8+ to carp about "safety"

Distribution:

Makefiles / Project-files:

 ~ adjusted all affected makefiles to allow for safe-library builds

Examples:

 ~ examples/cpp/example.cpp.custom_severity_levels/example.cpp.custom_severity_levels.cpp:
    ~ now uses pantheios::getStockSeverityString() rather than pantheios::getSeverityString()

 ~ examples/cpp/example.cpp.custom_type_1/example.cpp.custom_type_1.cpp:
    ~ adjusted to be compatible with VC++ 8+ "safe string" library

 ~ examples/cpp/example.cpp.mx.1/example.cpp.mx.1.cpp:
 ~ examples/cpp/example.cpp.mx.2/example.cpp.mx.2.cpp:
    ~ now uses pantheios::logputs() rather than pantheios::puts()

Test:

Test.Unit:

Test.Component:

Test.Performance:

 ~ test/performance/test.performance.inserters.w2m/test.performance.inserters.w2m.cpp:
    ~ adjusted to be compatible with VC++ 8+ "safe string" library
    ~ now uses pantheios::logputs() rather than pantheios::puts()

Test.Scratch:

Depends on:

 * STLSoft 1.9.64 or later
   (http://stlsoft.org/)



30th December 2008 - 1.0.1 beta 176
===================================

Summary:
--------

 * cleaned up creation of static libraries in Borland makefiles
 * bundles xTests 0.9.3
 * NOTE: Now requires STLSoft 1.9.64

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ cleaned up creation of static libraries in Borland makefiles

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.64 or later
   (http://stlsoft.org/)



19th December 2008 - 1.0.1 beta 175
===================================

Summary:
--------

 * added two new initialisation codes, for resource access denial (permissions and locking)
 * enhanced the return codes from be.file for file-open failure
 * enhanced COM exception helper function templates to enable working with custom severity level pseudo-constants
 * added scratch test for COM exception helper function templates
 * NOTE: Now requires STLSoft 1.9.63

Details:
--------

General:

 ~ include/pantheios/init_codes.h:
 ~ src/util/init_code_strings.c:
    + added PANTHEIOS_BE_INIT_RC_PERMISSION_DENIED init code
    + added PANTHEIOS_BE_INIT_RC_RESOURCE_BUSY init code

Core:

Application Layer:

Tracing:

Util:

Extras:

 ~ include/pantheios/extras/com/exception_helpers.hpp:
    ~ enhanced exception-helper function templates to enable working with custom severity level pseudo-constants

Front-ends:

Back-ends:

 ~ src/backends/bec.file.cpp:
    ~ more detailed return codes for file-open failure

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

 + test.scratch.extras.com_exception_helpers

Depends on:

 * STLSoft 1.9.63 or later
   (http://stlsoft.org/)



3rd December 2008 - 1.0.1 beta 174
==================================

Summary:
--------

 * logputs() now subject to severity filtering
 * refactored core => back-end dispatching
 * added two more scratch test projects
 * added one more component test project
 * removal of previously deprecated files

Details:
--------

General:

Core:

 + pantheios_logputs() / pantheios::logputs() now uses severity filtering

 ~ refactored core->back-end dispatching, and reimplemented all functions in
   terms of it

Application Layer:

 - removal of previously deprecated file src/appl/memory.cpp

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 + added test.component.core.pantheios_logputs

Test.Performance:

Test.Scratch:

 + test.scratch.bec.WindowsMessageBox

 + test.scratch.util.onbailout

Depends on:

 * STLSoft 1.9.62 or later
   (http://stlsoft.org/)



18th November 2008 - 1.0.1 beta 173
===================================

Summary:
--------

 * added new functionality to be.speech, in order to provide workaround for
   suspected SAPI defect
 * enhanced pantheios::integer inserter class, adding 3-parameter ctors to
   remove ambiguity between width and format
 * more changes forming part of the groundwork for future widestring support
 * reduced dependencies of various components

Details:
--------

General:

 ~ include/pantheios/internal/string_encoding.h:
    + initial version

Core:

 ~ src/core/api.cpp:
    ~ widestring compatibility changes

Application Layer:

 ~ include/pantheios/inserters/args.hpp:
    ~ more changes for future widestring support
    - removed dependency of pantheios::args inserter class on
      stlsoft::basic_simple_string => now uses std::basic_string

 ~ include/pantheios/inserters/b64.hpp:
 ~ include/pantheios/inserters/blob.hpp:
 ~ include/pantheios/inserters/character.hpp:
 ~ include/pantheios/inserters/hostid.hpp:
 ~ include/pantheios/inserters/integer.hpp:
 ~ include/pantheios/inserters/pointer.hpp:
 ~ include/pantheios/inserters/processid.hpp:
 ~ include/pantheios/inserters/real.hpp:
 ~ include/pantheios/inserters/w2m.hpp:
    ~ more changes for future widestring support

 ~ src/inserters/args.cpp:
 ~ src/inserters/b64.cpp:
 ~ src/inserters/blob.cpp:
 ~ src/inserters/hostid.cpp:
 ~ src/inserters/integer.cpp:
 ~ src/inserters/pointer.cpp:
 ~ src/inserters/real.cpp:
    ~ widestring compatibility changes

Tracing:

Util:

 ~ include/pantheios/util/backends/arguments.h:
 ~ include/pantheios/util/backends/context.hpp:
 ~ include/pantheios/util/string/snprintf.h:
 ~ include/pantheios/util/string/strdup.h:
 ~ include/pantheios/util/system/hostname.h:
 ~ include/pantheios/util/time/currenttime.h:
    ~ widestring compatibility changes

 ~ src/util/bailout.c:
 ~ src/util/be.context.cpp:
 ~ src/util/be.parse.cpp:
 ~ src/util/init_code_strings.c:
 ~ src/util/severity_strings.c:
 ~ src/util/strdup.c:
 ~ src/util/strnlen.cpp:
 ~ src/util/time.cpp:
    ~ widestring compatibility changes

Extras:

Front-ends:

Back-ends:

 ~ include/pantheios/backends/bec.speech.h:
 ~ src/backends/bec.speech.cpp:
    + added PANTHEIOS_BE_SPEECH_F_UNINIT_DISCARD_WORKAROUND, to cause
      bec.speech to discard its speech object reference at uninitialisation,
      to workaround what is believed to be a defect in SAPI, whereby the
      SAPI dll is unloaded during application shutdown prior to the release
      of all outstanding references

 ~ src/backends/bec.WindowsConsole.cpp:
    - removed dependency of be.WindowsConsole on
      stlsoft::basic_simple_string => now uses std::basic_string

 ~ src/backends/bec.WindowsSyslog.cpp:
    - removed dependency of be.WindowsConsole on
      stlsoft::basic_simple_string

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 ~ enhanced test.component.inserters.integer to exercise the new
   functionality

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.60 or later
   (http://stlsoft.org/)



13th November 2008 - 1.0.1 beta 172
===================================

Summary:
--------

 * enhanced pantheios::integer inserter class, adding 3-parameter ctors to
   remove ambiguity between width and format
 * many changes forming part of the groundwork for future widestring support

Details:
--------

General:

 ~ introduction of pan_char_t, and adjustment of API types and functions, in
   partial support of widestring support

Core:

Application Layer:

 ~ include/pantheios/inserters/integer.hpp:
 ~ src/inserters/integer.cpp:
    ~ deprecated the 2-parameter constructor
    + added 3-parameter constructor, which allows negative widths and use of
      zeroXPrefix without assuming zeroPad (which the 2-parameter
      constructor continues to do, for backwards-compatibility)

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 ~ enhanced test.component.inserters.integer to exercise the new
   functionality

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.60 or later
   (http://stlsoft.org/)



11th November 2008 - 1.0.1 beta 171
===================================

Summary:
--------

 * enhanced pantheios::hex_ptr inserter class in line with the changes to
   pantheios::pointer in the previous release
 * added example.cpp.hex_ptr
 * added test.examples target, which executes all example programs

Details:
--------

General:

Core:

Application Layer:

 ~ include/pantheios/inserters/hex_ptr.hpp:
    ~ deprecated badly-named constant bitSize and replaced with
      pointerHexWidth
    ~ deprecated the 2-parameter constructor
    + added a 1-parameter constructor
    + added 3-parameter constructor, which allows negative widths and use of
      zeroXPrefix without assuming zeroPad (which the 2-parameter
      constructor continues to do, for backwards-compatibility)

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 + added test.examples target, which executes all the example programs
 + added target (pantheios.1.ex.cpp.25.???) for new example program
   example.cpp.hex_ptr

Examples:

 ~ example.cpp.pointer to use new pantheios::pointer ctor, and avoid
   violating newly enforced contracts for deprecated constructor
 + added example.cpp.hex_ptr

Test:

Test.Unit:

Test.Component:

 + added test.component.inserters.hex_ptr to exercise the new
   functionality

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.60 or later
   (http://stlsoft.org/)



10th November 2008 - 1.0.1 beta 170
===================================

Summary:
--------

 * enhanced pantheios::pointer inserter class, adding 3-parameter ctor to
   remove ambiguity between width and format
 * added compile-time user-customisation of pantheios_log_n() internal
   buffer size
 * added compile-time user-customisation of pantheios_logprintf() stack
   size

Details:
--------

General:

Core:

 + added compile-time user-customisation of pantheios_log_n() internal
   buffer size, by defining pre-processor constant
   PANTHEIOS_CORE_LOG_N_INTERNAL_BUFFER_SIZE to value between 1 and 1048576
 + added compile-time user-customisation of pantheios_logprintf() stack
   size, by defining pre-processor constant
   PANTHEIOS_CORE_LOGPRINTF_STACK_SIZE to value between 64 and 1048576

Application Layer:

 ~ include/pantheios/inserters/pointer.hpp:
 ~ src/inserters/pointer.cpp:
    ~ deprecated the 2-parameter constructor
    + added 3-parameter constructor, which allows negative widths and use of
      zeroXPrefix without assuming zeroPad (which the 2-parameter
      constructor continues to do, for backwards-compatibility)

Tracing:

Util:

Extras:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 ~ enhanced test.component.inserters.pointer to exercise the new
   functionality

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.60 or later
   (http://stlsoft.org/)



3rd November 2008 - 1.0.1 beta 169
==================================

Summary:
--------

 * added more overloads to pantheios::extras::com::invoke_nothrow_method()

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Extras:

 + added more overloads to pantheios::extras::com::invoke_nothrow_method(),
   to allow between 0 and 10 parameters

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 + test.unit.extras.com.invoke_nothrow_method, which exercises both thiscall
   and stdcall methods, up to 10 parameters

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.60 or later
   (http://stlsoft.org/)



18th October 2008 - 1.0.1 beta 168
==================================

Summary:
--------

 * added two new FAQ items
 * removed previously deprecated files
 * added implementations of functions deprecated (and renamed) in
   1.0.1 beta 167
 * fixed defective using declaration in
   pantheios/util/com/exception_helpers.hpp

Details:
--------

General:

 - removal of deprecated file include/pantheios/error_codes.h
 + added implementations of functions deprecated (and renamed) in
   1.0.1 beta 167

Core:

Application Layer:

Tracing:

Util:

Extras:

 ~ fixed defective using declaration in
   pantheios/util/com/exception_helpers.hpp

Front-ends:

Back-ends:

Distribution:

 + added FAQ items Q12 and Q13

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.58 or later
   (http://stlsoft.org/)



16th October 2008 - 1.0.1 beta 167
==================================

Summary:
--------

 * final changes to ensure no-namespace compatibility
 * renaming/deprecation of badly-named API functions

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 - pantheios_getErrorCodeString() deprecated
 + pantheios_getInitCodeString() added, to replace
   pantheios_getErrorCodeString()
 - pantheios_getErrorCodeStringLength() deprecated
 + pantheios_getInitCodeStringLength() added, to replace
   pantheios_getErrorCodeStringLength()

 ~ final changes to ensure no-namespace compatibility

Extras:

Front-ends:

 ~ final changes to ensure no-namespace compatibility

Back-ends:

 ~ final changes to ensure no-namespace compatibility

Distribution:

Makefiles / Project-files:

 ~ adjusted for all changes

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.58 or later
   (http://stlsoft.org/)



15th October 2008 - 1.0.1 beta 166
==================================

Summary:
--------

 * Final pre-release refactoring of all util|helper|extra header files

Details:
--------

General:

Core:

 + pantheios_inserterAllocate(), pantheios_inserterDeallocate()

Application Layer:

 ~ reimplemented pantheios::b64, pantheios::blob and pantheios::w2m
   inserters in terms of new inserters memory API functions
   pantheios_inserterAllocate() and pantheios_inserterDeallocate()

Tracing:

Util:

 - removed deprecated file include/pantheios/util/string/string.h

 ~ pantheios_util_strdup_throw() is now inline
 ~ src/util/strdup.cpp => src/util/strdup.c

 ~ include/pantheios/test/util/compiler_warnings_suppression.first_include.h =>
   include/pantheios/util/test/compiler_warnings_suppression.first_include.h
 ~ include/pantheios/test/util/compiler_warnings_suppression.last_include.h =>
   include/pantheios/util/test/compiler_warnings_suppression.last_include.h

 - deprecated include/pantheios/util/memory/inserters.hpp

Extras:

 ~ include/pantheios/util/com/exception_helpers.hpp =>
   include/pantheios/extras/com/exception_helpers.hpp

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ adjusted for all changes

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.57 or later
   (http://stlsoft.org/)



14th October 2008 - 1.0.1 beta 165
==================================

Summary:
--------

 * Substantial reworking of contract API, reflected throughout the
   headers, implementation, example and test files

Details:
--------

General:

 ~ Substantial reworking of contract API, reflected throughout the
   headers, implementation, example and test files

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.57 or later
   (http://stlsoft.org/)



12th October 2008 - 1.0.1 beta 164
==================================

Summary:
--------

 * several changes to ensure that the suppression of stock severity
   levels is complete, and that the definition of custom severity
   levels is clean and may use the pantheios::levels constant
   generator class template
 * the pantheios::util::backends::Context base class is altered in
   two ways to facilitate a wider range of severity levels than is
   provided by the stock front-/back-ends
 * the deprecated file include/pantheios/error_codes.h now issues a
   #error if included, in preparation for final removal
 * NOTE: These are breaking changes: any programs that define custom
   back-ends based on pantheios::util::backends::Context must be
   modified, recompiled and relinked

Details:
--------

General:

 ~ include/pantheios/error_codes.h:
    ~ now #errors if included

Core:

Application Layer:

 ~ include/pantheios/pantheios.h:
    + full support for custom severity levels, by hiding definition of stock
      levels when PANTHEIOS_NO_STOCK_LEVELS is defined

 ~ include/pantheios/pantheios.hpp:
    ~ defines PANTHEIOS_NO_LOG_SEV_FUNCTIONS if PANTHEIOS_NO_STOCK_LEVELS is
      defined

Tracing:

Util:

 ~ pantheios::util::backends::Context class now separates severity and
   extended severity information in rawLogEntry() overrides
 + pantheios::util::backends::Context::Context adds 4th constructor for
   derived classes to specify the range of the severities recognised

Front-ends:

 ~ include/pantheios/frontends/fe.all.h:
 ~ include/pantheios/frontends/fe.fail.h:
 ~ include/pantheios/frontends/fe.N.h:
 ~ include/pantheios/frontends/fe.null.h:
 ~ include/pantheios/frontends/fe.simple.h:
 ~ include/pantheios/frontends/fe.WindowsRegistry.h:
 ~ include/pantheios/frontends/stock.h:
    ~ fixed up badly formatted file version symbols

 ~ src/frontends/fe.N.c:
 ~ src/frontends/fe.simple.c:
 ~ src/frontends/fe.WindowsRegistry.cpp
    ~ recognises severities in the range [0, 16)

Back-ends:

 ~ src/backends/bec.file.cpp:
 ~ src/backends/bec.fprintf.cpp:
 ~ src/backends/bec.loader.cpp:
 ~ src/backends/bec.speech.cpp:
 ~ src/backends/bec.WindowsConsole.cpp:
 ~ src/backends/bec.WindowsDebugger.cpp:
    ~ adjustment to rawLogEntry() overrides for separation of severity and
      extended severity information
    ~ addition of invocation of pantheios::util::backends::Context::Context
      to add 4th parameter to specify range of severities recognised

 ~ src/backends/bec.WindowsMessageBox.cpp:
    ~ now recognises severities in the range [0, 16)

Distribution:

Makefiles / Project-files:

 ~ all makefiles adjusted to changes

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.57 or later
   (http://stlsoft.org/)



11th October 2008 - 1.0.1 beta 163
==================================

Summary:
--------

 * removal of deprecated file(s)
 * more compatibility with namespace-suppression

Details:
--------

General:

 ~ deprecated file pantheios/error_codes.h now results in compile error if
   used; use pantheios/init_codes.h instead
 ~ further moves to support namespace-suppressed C++ compilation

Core:

Application Layer:

 ~

Tracing:

Util:

 - removal of deprecated file pantheios/util/threading/threadid.h

Front-ends:

 ~ include/frontends/fe.all.h:
 ~ include/frontends/fe.fail.h:
 ~ include/frontends/fe.N.h:
 ~ include/frontends/fe.null.h:
 ~ include/frontends/fe.simple.h:
 ~ include/frontends/fe.WindowsRegistry.h:
 ~ include/frontends/stock.h:
    ~ corrected invalid file-version symbols

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.57 or later
   (http://stlsoft.org/)



7th October 2008 - 1.0.1 beta 162
=================================

Summary:
--------

 * compatibility with MFC when pantheios/pantheios.hpp is the first #include
 * compatibility with namespace-suppression

Details:
--------

General:

 ~ include/pantheios/pantheios.hpp:
    ~ compatibility with MFC when pantheios/pantheios.hpp is the first #include

Core:

Application Layer:

 ~ include/pantheios/inserters/boolean.hpp:
    ~ compatibility with namespace-suppression

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.56 or later
   (http://stlsoft.org/)



27th September 2008 - 1.0.1 beta 161
====================================

Summary:
--------

 * sharpened up error messages when attempting to use previously removed
   features of fe.simple
 * changed requirements of application-defined components in
   be.WindowsEventLog to a single new function
 * NOTE: These are breaking changes: any programs that use
   be.WindowsEventLog must be modified, recompiled and relinked


Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 ~ sharpened up error messages when attempting to use previously removed
   features of fe.simple

Back-ends:

 ~ simplified be.WindowsEventLog interface and implementation:
   BE_WINDOWSEVENTLOG_EVENTID and
   pantheios_be_WindowsEventLog_calcCategory() are now removed, and replaced
   by single function pantheios_be_WindowsEventLog_calcCategoryAndEventId()

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.54 or later
   (http://stlsoft.org/)



24th September 2008 - 1.0.1 beta 160
====================================

Summary:
--------

 * include/pantheios/inserters.hpp now includes
   include/pantheios/inserters/hostid.hpp
 * modification to ensure cross-link-unit compatibility when Pantheios
   libraries are exported from a dynamic library
 * added missing project map (HTML) files within project structure

Details:
--------

General:

Core:

Application Layer:

 ~ include/pantheios/inserters.hpp now includes
   include/pantheios/inserters/hostid.hpp
 ~ added explicit destructor for pantheios::args (to ensure that ctors and
   dtor are executed in the same link-unit)

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ adjusted for two new examples

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.54 or later
   (http://stlsoft.org/)



22nd September 2008 - 1.0.1 beta 159
====================================

Summary:
--------

 * added two back-end targeting/multiplexing examples
 * added PANTHEIOS_MAKE_EXTENDED_SEVERITY() macro, for targeting statements
   to back-ends when using the C API
 * added project map (HTML) files within project structure

Details:
--------

General:

 + added PANTHEIOS_MAKE_EXTENDED_SEVERITY() macro, for targeting statements
   to back-ends when using the C API
 + added project map files: see project_map.html in root directory, and
   readme.html in each main sub-directory

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ adjusted for two new examples

Examples:

 + added example.cpp.mx.1, which illustrates targeted multiplexing, as
   described at http://sourceforge.net/forum/message.php?msg_id=5292436
 + added example.cpp.mx.2, which illustrates targeted multiplexing, as
   described at http://sourceforge.net/forum/message.php?msg_id=5299038

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.54 or later
   (http://stlsoft.org/)



19th September 2008 - 1.0.1 beta 158
====================================

Summary:
--------

 * deprecated file pantheios/util/threading/threadid.h now #error on use
 * include/pantheios/error_codes.h => include/pantheios/init_codes.h
 * include/src/util/init_error_strings.c => include/src/util/init_code_strings.c

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 - deprecated file pantheios/util/threading/threadid.h now #error on use
 ~ include/pantheios/error_codes.h => include/pantheios/init_codes.h
 ~ include/src/util/init_error_strings.c => include/src/util/init_code_strings.c

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ all makefiles adjusted accordingly

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.54 or later
   (http://stlsoft.org/)



18th September 2008 - 1.0.1 beta 157
====================================

Summary:
--------

 * added new error code (PANTHEIOS_BE_INIT_RC_INIT_CONFIG_REQUIRED)
 * improved error reporting in fe.WindowsRegistry

Details:
--------

General:

 + added PANTHEIOS_BE_INIT_RC_INIT_CONFIG_REQUIRED
 ~ adjusted friendly string for PANTHEIOS_INIT_RC_UNSPECIFIED_EXCEPTION

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 ~ improved error reporting (to bailout) in case of missing registry key(s)
   in fe.WindowsRegistry

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.54 or later
   (http://stlsoft.org/)



12th September 2008 - 1.0.1 beta 156
====================================

Summary:
--------

 * refactoring of build directories
 * non-functional textual changes
 * NOTE: These are breaking changes: some target
   compiler/operating-system/architecture have been renamed

Details:
--------

General:

 ~ adjusted all the copyright information
 ~ adjusted the implicit-link logic according to new directory
   structure

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ refactoring of build directories, such that every makefile is now in its
   own directory, and is called 'makefile'. The following examples
   illustrate:
      build/vc9/makefile            =>  build/vc9/makefile
      build/vc9_x64/makefile        =>  build/vc9.x64/makefile
      build/gcc34/makefile.win32    =>  build/gcc34.win32/makefile
      build/gcc34/makefile.unix     =>  build/gcc34.unix/makefile
      build/gcc41/makefile.unix     =>  build/gcc41.unix/makefile
      ...

Examples:

Test:

Test.Unit:

Test.Component:

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.52 or later
   (http://stlsoft.org/)



11th September 2008 - 1.0.1 beta 155
====================================

Summary:
--------

 * fixed defect in component test for pantheios::w2m inserter class
 * NOTE: Now requires STLSoft 1.9.52

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 ~ fixed defect in component test for pantheios::w2m inserter class, whereby
   winstl::w2m was used even on UNIX

Test.Performance:

Test.Scratch:

Depends on:

 * STLSoft 1.9.52 or later
   (http://stlsoft.org/)



2nd September 2008 - 1.0.1 beta 154
===================================

Summary:
--------

 * added pantheios::w2m (widestring to multibyte) inserter, for use until
   widestring version of library available
 * added component test for pantheios::w2m inserter class
 * added performance test for pantheios::w2m inserter class
 * NOTE: Now requires STLSoft 1.9.49

Details:
--------

General:

Core:

Application Layer:

 + added pantheios::w2m (widestring to multibyte) inserter, for use until
   widestring version of library available

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

 ~ C-language compatibility mods for example.c.getcurrenttime

Test:

Test.Unit:

Test.Component:

 + added test.component.inserters.w2m

Test.Performance:

 + added test.performance.inserters.w2m

Test.Scratch:

Depends on:

 * STLSoft 1.9.49 or later
   (http://stlsoft.org/)



1st September 2008 - 1.0.1 beta 153
===================================

Summary:
--------

 * fixed defect in pantheios/util/time/currenttime.h
 * added example.c.getcurrenttime (for pantheios_getCurrentTime())

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 ~ fixed defect in pantheios/util/time/currenttime.h to enable C compilation

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

 + added example.c.getcurrenttime (for pantheios_getCurrentTime())

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.48 or later
   (http://stlsoft.org/)



28th August 2008 - 1.0.1 beta 152
=================================

Summary:
--------

 * added source-only distribution, to reduce the download size for users that
   use the online documentation
 * added pantheios_getVersion() function, to allow client code to do runtime
   tests on the version of Pantheios to which they're linking
 * added unit-test for pantheios_getVersion()
 * added missing implicit link headers for fe.fail and fe.null
 * modified fe.fail to reduce unnecessary link dependencies

Details:
--------

General:

Core:

 + added pantheios_getVersion() function, to allow client code to do runtime
   tests on the version of Pantheios to which they're linking

Application Layer:

Tracing:

Util:

Front-ends:

 ~ modified fe.fail so that it returns NULL (not a valid value for any
   non-failing front-end, btw) for pantheios_fe_getProcessIdentity(), to
   remove the dependency on PANTHEIOS_FE_PROCESS_IDENTITY. This makes it
   convenient to use in (test) programs that rely on functionality in the
   core library, which must see a front-end and a back-end, but that don't
   actually do any logging
 + added include/pantheios/implicit_link/fe.fail.h
 + added include/pantheios/implicit_link/fe.null.h

Back-ends:

Distribution:

 + added source-only distribution, to reduce the download size for users that
   use the online documentation

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 + added test.unit.getversion

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.48 or later
   (http://stlsoft.org/)



25th August 2008 - 1.0.1 beta 151
=================================

Summary:
--------

 * tidied up a large number of out-of-date markup elements in docs
 * optimised the implementation of fe.N
 * added example for pantheios_getHostName()
 * finalised the structure of the project/solution files for
   Visual Studio (other IDEs will be done in later release)
 * bundles b64 1.3.4

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 ~ optimised the implementation of fe.N, such that it stores the
   number of back-ends at initialisation, and no longer recalculates
   each time pantheios_fe_isSeverityLogged() is called

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ top-level solution files were moved into the following directories:
    * examples/c,
    * projects/backends
    * projects/core
    * projects/frontends
    * projects/util

Examples:

 + added example.c.getHostName (for pantheios_getHostName())

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.48 or later
   (http://stlsoft.org/)



24th August 2008 - 1.0.1 beta 150
=================================

Summary:
--------

 * fixed defect in fe.N, whereby a negative catch-all severity ceiling would
   not be respected
 * other minor adjustments/improvements to fe.N
 * added unit-test for fe.N
 * bundles xTests 0.8.5
 * NOTE: Now requires STLSoft 1.9.48
 * NOTE: These are breaking changes. Any code using the extant fe.N front-end
   library will need to be edited and re-compiled

Details:
--------

General:

Core:

Application Layer:

 ~ pantheios::hex_ptr::hex_ptr() now takes void const volatile*, rather than
   void const*, which was an error

Tracing:

Util:

Front-ends:

 ~ fe.N: PAN_FE_N_SEVERITY_CEILINGS is no longer const (to facilitate testing;
   it must still not be changed between calls to pantheios_fe_init() and
   pantheios_fe_uninit())
 + fe.N: added PANTHEIOS_FE_N_TERMINATOR_ENTRY() macro
 - fe.N: removed pre-condition enforcements that require token to be non-NULL,
   since 0 (EMERGENCY) is a valid net ceiling
 ~ fe.N: refactored evaluation of numBackEnds and severityCeiling in
   pantheios_fe_isSeverityLogged(), to reduce unnecessary work
 ~ fe.N: fixed defect whereby negative ceiling was not respected, due to
   masking with 0x07

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 + added unit-test for fe.N

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.48 or later
   (http://stlsoft.org/)



12th August 2008 - 1.0.1 beta 149
=================================

Summary:
--------

 * added unit-test for fe.WindowsRegistry
 * adjustments to contract enforcement conditions to be compatible with
   ultra-pedantic GCC 4.3 warnings
 * minor adjustments to CodeWarrior and Digital Mars makefiles

Details:
--------

General:

 ~ adjustments to contract enforcement conditions to be compatible with
   ultra-pedantic GCC 4.3 warnings

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ fixed defect in CodeWarrior makefiles, whereby _DEBUG and NDEBUG were
   not specified
 ~ changed Digital Mars makefile to specify multithreaded, rather than
   single-threaded, targets

Examples:

Test:

Test.Unit:

 + added unit-test for fe.WindowsRegistry

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



11th August 2008 - 1.0.1 beta 148
=================================

Summary:
--------

 * a large number of small changes to the names and/or namespaces of
   utility functions and classes that do not form part of the set
   commonly used by authors of client code, in order to simplify the
   apparent APIs of the Core and Application Layer
 * bundles xTests 0.8.4

Details:
--------

General:

Core:

 ~ movement of pantheios_log_n() into pantheios::core namespace
 ~ movement of pantheios_isInitialising() into pantheios::core
   namespace
 ~ movement of pantheios_isInitialised() into pantheios::core
   namespace
 ~ movement of pantheios_exitProcess() into pantheios::core
   namespace
 ~ movement of pantheios_malloc() into pantheios::core
   namespace
 ~ movement of pantheios_getNextBackEndId() into pantheios::core
   namespace
 - removal of pantheios_onBailOut(), and 2-parameter
   pantheios::onBailOut() overload

Application Layer:

 ~ movement of string access shims for stock inserter classes
   into pantheios::shims namespace

Tracing:

Util:

 ~ movement of auto_buffer_selector to pantheios::util namespace,
   from pantheios namespace
 ~ movement of pantheios_onBailOut3() into pantheios::util namespace
 ~ movement of pantheios_onBailOut4() into pantheios::util namespace
 - pantheios_strnlen() deprecated
 + pantheios_util_strnlen() added, to replace
   pantheios_strnlen()
 - pantheios_getSeverityString() deprecated
 + pantheios_getStockSeverityString() added, to replace
   pantheios_getSeverityString()
 - pantheios_getSeverityStringLength() deprecated
 + pantheios_getStockSeverityStringLength() added, to replace
   pantheios_getSeverityStringLength()
 ~ movement of onBailOut() overloads into pantheios::util namespace
 ~ movement of strnlen() overloads into pantheios::util namespace

 ~ movement of string access shims for stock severity enumeration
   into pantheios::shims namespace

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



7th August 2008 - 1.0.1 beta 147
================================

Summary:
--------

 * enhanced pantheios::boolean inserter class to be I18N/L10N-friendly
 * added unit test for pantheios::boolean inserter class
 * adjustments to contract enforcement conditions to be compatible with
   ultra-pedantic GCC 4.3 warnings

Details:
--------

General:

 ~ adjustments to contract enforcement conditions to be compatible with
   ultra-pedantic GCC 4.3 warnings

Core:

Application Layer:

 + enhanced pantheios::boolean inserter to allow 'true' and 'false'
   strings to be specified by application, enabling I18N/L10N

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 + test.component.inserters.boolean

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



7th August 2008 - 1.0.1 beta 146
================================

Summary:
--------

 * added pantheios::boolean inserter class
 * added unit test for be.fprintf

Details:
--------

General:

Core:

Application Layer:

 + added initial version of pantheios::boolean inserter

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 + test.unit.bec.fprintf

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



1st August 2008 - 1.0.1 beta 145
================================

Summary:
--------

 * fixed bug in be.fprintf introduced in 1.0.1 beta 144
 * cleanup in the comment headers for a large number of source files,
   in preparation for final non-beta release

Details:
--------

General:

 ~ cleanup in the comment headers for a large number of source files,
   in preparation for final non-beta release

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ fixed bug in be.fprintf introduced in 1.0.1 beta 144

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



30th July 2008 - 1.0.1 beta 144
===============================

Summary:
--------

 * added thread Id as a default detail in the statement prefix of all
   Pantheios stock back-end(s) (except be.speech)
 * NOTE: These are breaking changes. Any programs using the Pantheios
   stock back-ends that do not want to see thread Id will now need to
   use the callback forms of the back-end(s) and set the
   PANTHEIOS_BE_INIT_F_NO_THREAD_ID flag in the callback function!
 * added support for GCC 4.3

Details:
--------

General:

Core:

 + pantheios_be_parseStockArgs() now recognises "showThreadId" boolean
   argument

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 + added PANTHEIOS_BE_INIT_F_NO_THREAD_ID flag to include/pantheios/backend.h

Distribution:

Makefiles / Project-files:

 + makefile for GCC 4.3

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



29th July 2008 - 1.0.1 beta 143
===============================

Summary:
--------

 * refactoring of process Id and thread Id functions
 * added support for GCC 4.3

Details:
--------

General:

Core:

Application Layer:

 - pantheios_processId() and pantheios_processIdLength() deprecated
 + pantheios_getCurrentProcessIdString() added, to replace
   pantheios_processId()
 + pantheios_getCurrentProcessIdStringLength() added, to replace
   pantheios_processIdLength()

Tracing:

Util:

 + pantheios_getCurrentProcessId() (and, in C++, pantheios::util::getCurrentProcessId())
 + include/pantheios/util/system/processid.h
 ~ include/pantheios/util/threading/threadid.h => include/pantheios/util/system/threadid.h
 ~ pantheios/src/util/threading.c => pantheios/src/util/threadid.c
 + pantheios/src/util/processid.c

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



25th July 2008 - 1.0.1 beta 142
===============================

Summary:
--------

 * minor adjustments of Application Layer
 * enhanced functionality of pantheios::args inserter class

Details:
--------

General:

Core:

Application Layer:

 ~ specification of PANTHEIOS_APPL_PARAMS_LIMIT_MAX_GENERATED, to better
   facilitate user-defined restriction of generated function templates
 + enhanced pantheios::args inserter class, to specify different separators
 ~ enhancement of pantheios::levels class template constant declarations to
   facilitate compatibility with FastFormat

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



24th July 2008 - 1.0.1 beta 141
===============================

Summary:
--------

 * deprecation of pantheios_exit_process(), and replacement with
   pantheios_exitProcess()
 * reduction in source code size of Application Layer generated function
   templates
 * fix to date-dependent bug in unit-test for pantheios_getCurrentTime()

Details:
--------

General:

Core:

 - pantheios_exit_process() deprecated
 + pantheios_exitProcess() added, to replace pantheios_exit_process()
 ~ pantheios_exitProcess() now does not invoke atexit() finalisers on
   non-Windows platforms (on which they're not invoked already)

Application Layer:

 ~ minor mods to pantheios::level class template
 ~ cosmetic changes to generated application layer code, to reduce source
   size

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 ~ fixed bug in UNIX date/time picture, which erroneously reports errors
   in July. (Oops!!)

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



19th June 2008 - 1.0.1 beta 140
===============================

Summary:
--------

 * correction of bug in pantheios.h introduced in beta 139

Details:
--------

General:

 ~ correction of bug in pantheios.h introduced in beta 139, whereby
   PANTHEIOS_CALL_DEPRECATED() had incorrect number of arguments
   in case where __declspec(deprecated) is not supported

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



18th June 2008 - 1.0.1 beta 139
===============================

Summary:
--------

 * deprecation of pantheios_puts() and pantheios::put(), in favour of
   pantheios_logputs() and pantheios::logputs()
 * minor makefile fixes and modifications
 * bundles xTests 0.8.3

Details:
--------

General:

Core:

 - pantheios_puts() is now deprecated (and issues a warning with
   compilers that support declspec(deprecated)); use pantheios_logputs()
 - pantheios::puts() is now deprecated (and issues a warning with
   compilers that support declspec(deprecated)); use pantheios::logputs()

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ trivial shuffling of examples compilation order
 + "compile.examples" target now works
 ~ suppression of deprecation warning (4996) on VC++ 8+ has been
   removed for C compilation units

Examples:

 ~ all instances of pantheios_puts() replaced by pantheios_logputs()
 ~ all instances of pantheios::puts() replaced by pantheios::logputs()

Test:

 ~ all instances of pantheios_puts() replaced by pantheios_logputs()
 ~ all instances of pantheios::puts() replaced by pantheios::logputs()

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



16th June 2008 - 1.0.1 beta 138
===============================

Summary:
--------

 * enhancements to customisation of Application Layer
 * implicit linking for fe.WindowsRegistry
 * added project files for Visual C++ v7.1 for Core, Util, backends, and
   frontends
 * added project files for Visual C++ v8 for Core, Util, backends, and
   frontends
 * bundles xTests 0.8.2

Details:
--------

General:

Core:

Application Layer:

 + can now specify PANTHEIOS_NO_INCLUDE_OS_AND_3PTYLIB_STRING_ACCESS to
   suppress ACE, ATL, COM, UNIX and Windows specific string access shims
     from inclusion

Tracing:

Util:

Front-ends:

 + implicit linking for fe.WindowsRegistry

Back-ends:

Distribution:

Makefiles / Project-files:

 + added project files for Visual C++ v7.1 for Core, Util, backends, and
   frontends
 + added project files for Visual C++ v8 for Core, Util, backends, and
   frontends

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.45 or later
   (http://stlsoft.org/)



2nd June 2008 - 1.0.1 beta 137
==============================

Summary:
--------

 * distribution cleanup release - no new functionality
 * minor fix to implicit linking for VC++ 8 & 9
 * bundles shwild 0.9.18

Details:
--------

General:

 ~ fixed up erroneous pre-processor symbol selector for x86 when
   implicit linking with Visual C++ 8 and 9

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 + all project files under projects/core/, projects/util/,
   projects/backends/ and projects/frontends/ are now included
 - all project/solution files under test/ are now removed from
   the distribution

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.44 or later
   (http://stlsoft.org/)



21st May 2008 - 1.0.1 beta 136
==============================

Summary:
--------

 * fixed a bug in the contract enforcements of fe.N
 * fixed a bug in the unit-test for pantheios_getCurrentTime()
 * bundles xTests 0.7.3

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 ~ fixed a bug in the contract enforcements of fe.N

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 ~ fixed a bug in the unit-test for pantheios_getCurrentTime()

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.42 or later
   (http://stlsoft.org/)



17th May 2008 - 1.0.1 beta 135
==============================

Summary:
--------

 * fully separated the Pantheios Util and Pantheios Core libraries,
   including source, makefiles and targets, and project files
 * NOTE: Now requires STLSoft 1.9.42
 * NOTE: These are breaking changes. Any code using the extant Pantheios
   Core library will need to be relinked (to also include the Util library)

Details:
--------

General:

Core:

 - src/core/strnlen.cpp => src/util/strnlen.cpp

Application Layer:

Tracing:

Util:

 + src/core/strnlen.cpp => src/util/strnlen.cpp

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 - removed all the util source files from the LIB_CORE_???? targets
 ~ all makefiles updated with requisite dependencies on LIB_UTIL_????
   along with, where required, LIB_CORE_????

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.42 or later
   (http://stlsoft.org/)



16th May 2008 - 1.0.1 beta 134
==============================

Summary:
--------

 * fixed bug in test.unit.util.getcurrenttime
 * bundles shwild 0.9.16

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 ~ fixed bug in test.unit.util.getcurrenttime, which was caused by
   a bug in shwild's range parsing - fixed as of shwild 0.9.16

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.41 or later
   (http://stlsoft.org/)



14th May 2008 - 1.0.1 beta 133
==============================

Summary:
--------

 * added unit-tests for fe.all, fe.fail, fe.null and fe.simple
 * minor modifications to contract enforcement macros
 * NOTE: Now requires STLSoft 1.9.41

Details:
--------

General:

 ~ requires STLSoft 1.9.41, because 1.9.40 fails for PowerPC+GCC

Core:

 ~ PANTHEIOS_CONTRACT_ENFORCE_PRECONDITION_ARGUMENT() to
   PANTHEIOS_CONTRACT_ENFORCE_PRECONDITION_PARAMETER(), for
   consistency with the upcoming FastFormat library

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 + test.unit.fe.all
 + test.unit.fe.fail
 + test.unit.fe.null
 + test.unit.fe.simple

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.41 or later
   (http://stlsoft.org/)



13th May 2008 - 1.0.1 beta 132
==============================

Summary:
--------

 * wholesale refactoring of front-end and back-end directory names
 * NOTE: Now requires STLSoft 1.9.40

Details:
--------

General:

 + new top-level directory projects/ to contain project files

Core:

 ~ renamed directory src/be => src/backends

 ~ renamed directory src/fe => src/frontends

 ~ movement of build/vc6/pantheios.core.dsp => projects/core/vc6/

 ~ movement of backends/* => projects/backends/*

 ~ movement of frontends/* => projects/frontends/*

Application Layer:

Tracing:

Util:

 ~ renamed directory include/util/be => include/util/backends

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.40 or later
   (http://stlsoft.org/)



11th May 2008 - 1.0.1 beta 131
==============================

Summary:
--------

 * enhanced the behaviour of the pantheios::args inserter
 * enhanced testability of bailout functionality
 * removal of obsolete implementation files
 * bundles xTests 0.7.2
 * NOTE: Now requires STLSoft 1.9.39

Details:
--------

General:

Core:

Application Layer:

 + enhanced the behaviour of the pantheios::args inserter to be able to
   represent the file-name of arg#0, without the rest of the path

Tracing:

Util:

 ~ enhanced testability of bailout functionality
 - removal of obsolete implementation file: strutil.cpp

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.39 or later
   (http://stlsoft.org/)



4th May 2008 - 1.0.1 beta 130
=============================

Summary:
--------

 * Win64 compatibility
 * bundles shwild 0.9.15
 * bundles xTests 0.7.1
 * NOTE: Now requires STLSoft 1.9.38

Details:
--------

General:

 ~ mods to implicit link headers, to discriminate between x86, x64 and ia64
   for VC++ 8 and 9

Core:

Application Layer:

Tracing:

Util:

 ~ minor mod in src/util/bailout.c to be compatible with the
   Safe String library

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

 ~ minor mod in examples/c/example.c.log_n/example.c.log_n.c to be
   compatible with the Safe String library

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.38 or later
   (http://stlsoft.org/)



3rd May 2008 - 1.0.1 beta 129
=============================

Summary:
--------

 * fix for minor errors in distribution
 * removal of incorrect auto-initialisation suppression in MFC client
   programs
 * bundles shwild 0.9.14
 * NOTE: Now requires STLSoft 1.9.37

Details:
--------

General:

 ~ fixed up the problems with the shwild: an invalid version got into
   the last distro of Pantheios and caused warnings (that are always
   interpreted as errors in the Pantheios makefiles)

Core:

 ~ removed the test for _AFXDLL in suppressing auto-initialisation

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.37 or later
   (http://stlsoft.org/)



1st May 2008 - 1.0.1 beta 128
=============================

Summary:
--------

 * now compatible with FreeBSD
 * minor bug fix in bail-out functionality on UNIX
 * NOTE: Now requires STLSoft 1.9.36

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 ~ fixed benign sprintf() formatting mismatch on UNIX

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.36 or later
   (http://stlsoft.org/)



29th April 2008 - 1.0.1 beta 127
================================

Summary:
--------

 * modification of measures to reduce compilation times on Windows
 * enhancement of bail-out functionality for UNIX
 * addition of unit test for bail-out
 * bundles xTests 0.6.5
 * NOTE: Now requires STLSoft 1.9.34

Details:
--------

General:

 ~ fixed bug in pantheios/internal/lean.h, which mean that
   pantheios/internal/winlean.h was only being included on Win64

Core:

Application Layer:

Tracing:

Util:

 ~ fixed incorrectly specified pantheios_call_fe_uninit()

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ shortened the name of the pantheios_logprintf component test to
   keep compatible with lesser-abled forms of make
 ~ updated all makefiles to include test.unit.util.onbailout

Examples:

Test:

Test.Unit:

 + test.unit.util.onbailout

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.34 or later
   (http://stlsoft.org/)



22nd April 2008 - 1.0.1 beta 126
================================

Summary:
--------

 * introduction of measures to reduce compilation times on Windows
 * various trivial warning suppressions
 * addition of UNIX emulation makefiles for VC++ 7.1, 8 and 9
 * NOTE: Now requires STLSoft 1.9.32

Details:
--------

General:

 + pantheios/internal/winlean.h, which #defines a large number of
   suppression symbols to reduce compilation time when including
   Windows headers
 + pantheios/internal/lean.h, which includes pantheios/internal/winlean.h
   when compiling on Windows

Core:

 ~ pantheios/util/be/context.hpp made self-contained (wrt pantheios/quality/contract.h)
 ~ pantheios/util/system/hostname.h made self-contained (wrt pantheios/quality/contract.h)

 ~ unused catch() block warning suppression in src/core/api.cpp

Application Layer:

Tracing:

Util:

 ~ unused warning suppression in src/util/bailout.c

Front-ends:

Back-ends:

 ~ unused warning suppression in src/be/bec.syslog.c

Distribution:

Makefiles / Project-files:

 ~ moved UNIX emulation makefile for VC++ 6 to its own dir (vc6_unixem)
 + UNIX emulation makefile for VC++ 7.1
 + UNIX emulation makefile for VC++ 8
 + UNIX emulation makefile for VC++ 9

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.32 or later
   (http://stlsoft.org/)



20th April 2008 - 1.0.1 beta 125
================================

Summary:
--------

 * fixes for UNIX/GCC compilation errors and warnings introduced in beta 124
 * refactoring of Util library header/implementation names
 * NOTE: These are breaking changes. Any code using the extant Pantheios
   current time API will need to be edited and rebuilt!

Details:
--------

General:

Core:

 ~ fix for misused contract enforcement (seen in compilation for
   non-atomic-integer platforms)

Application Layer:

Tracing:

Util:

 ~ refactored UNIX implementation of pantheios_getHostName(), to simplify
   and be thoroughly robust (when passed buffer length 0)

 ~ include/pantheios/util/be/apidefs.hpp => include/pantheios/util/core/apidefs.hpp
 ~ src/util/be.apidefs.cpp => src/util/core.apidefs.cpp

 ~ include/pantheios/util/be/time.h => include/pantheios/util/time/currenttime.h

 ~ all PANTHEIOS_BE_GETCURRENTTIME_* flags are renamed as PANTHEIOS_GETCURRENTTIME_*

Front-ends:

Back-ends:

 ~ fix for typos in src/be/bec.syslog.c
 ~ fix for warnings in src/be/bec.syslog.c

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.31 or later
   (http://stlsoft.org/)



20th April 2008 - 1.0.1 beta 124
================================

Summary:
--------

 * added full-fledged contract enforcement constructs
 * updates to test code in respect of enhancements of xTests 0.6.1
 * bundles xTests 0.6.1
 * NOTE: These are breaking changes. Any code using the extant Pantheios
   assert macros will need to be edited and rebuilt!

Details:
--------

General:

 ~ change of contract enforcement from the simple PANTHEIOS_ASSERT() and
   PANTHEIOS_MESSAGE_ASSERT() macros to fully-fledged contract enforcement
   constructs
 - pantheios/contract/assert.h was removed
 + pantheios/quality/contract.h was added
 + pantheios/quality/cover.h was added

Core:

 + added pantheios::sint8_t, pantheios::sint16_t, pantheios::sint32_t and
   pantheios::sint64_t basic typedefs

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.31 or later
   (http://stlsoft.org/)



19th April 2008 - 1.0.1 beta 123
================================

Summary:
--------

 * fix for VC++ 6 / Borland / DMC++ compilation problems with hostId
 * fix for ACE builds with VC++
 * refactoring of test directories/names
 * large-scale refactoring of Core and Util library header and
   implementation file and API member names
 * bundles xTests 0.5.2
 * NOTE: These are breaking changes. Any code using the Pantheios C
   API will need to be edited and rebuilt!

Details:
--------

General:

Core:

 ~ renamed pantheios_printf() => pantheios_logprintf()
 ~ renamed pantheios_vprintf() => pantheios_vlogprintf()

 ~ renamed src/core/printf.c => src/core/logprintf.c

 + src/core/strnlen.c (was parts of src/util/strutil.cpp)

Application Layer:

 ~ fix for VC++ 6 / Borland / DMC++ compilation problems with hostId

Tracing:

Util:

 - pantheios/util/string/string.h is now deprecated

 + pantheios/util/string/snprintf.h
 ~ moved pantheios_string_snprintf() => pantheios/util/string/snprintf.h
 ~ renamed pantheios_string_snprintf() => pantheios_util_snprintf()
 ~ moved pantheios_string_vsnprintf() => pantheios/util/string/snprintf.h
 ~ renamed pantheios_string_vsnprintf() => pantheios_util_vsnprintf()

 + pantheios/util/string/strdup.h
 ~ moved declarations of pantheios_strdup() / pantheios_strdup_throw() /
   pantheios_strfree() => pantheios/util/string/strdup.h
 ~ renamed pantheios_strdup() => pantheios_util_strdup()
   and pantheios::strdup() => pantheios::util::strdup()
 ~ renamed pantheios_strdup_throw() => pantheios_util_strdup_throw()
   and pantheios::util::strdup_throw() => pantheios::util::strdup_throw()
 ~ renamed pantheios_strfree() => pantheios_util_strfree()
   and pantheios::util::strfree() => pantheios::util::strfree()
 ~ pantheios_strdup_throw() and pantheios::strdup::throw() are now hidden
   when the compiler/build does not support throwing of std::bad_alloc on
   allocation failure. This is a change from the previous functionality,
   where the functions reverted to the behaviour of their non-throwing
   analogues

 - src/util/strutil.cpp is now deprecated

 ~ pantheios/util/threading/threading.h => pantheios/util/threading/threadid.h
 ~ pantheios::getCurrentThreadId() => pantheios::util::getCurrentThreadId()

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ fixed ACE build targets for VC++ (symbol was CC_INCLUDES_BACE rather than
   CC_INCLUDES_BASE :$)

Examples:

 ~ renamed examples/c/example.c.printf => examples/c/example.c.core.pantheios_logprintf

Test:

Test.Unit:

 ~ renamed test.unit.getcurrenttime => test.unit.util.getcurrenttime

Test.Component:

 ~ renamed test.component.core.pantheios_logprintf => test.component.core.pantheios_logprintf

Test.Scratch:

Depends on:

 * STLSoft 1.9.31 or later
   (http://stlsoft.org/)



16th April 2008 - 1.0.1 beta 122
================================

Summary:
--------

 * addition of missing back-end implicit link header files
 * new example for hostId inserter
 * workaround for VC++ 8/9 linker error
 * bundles xTests 0.5.1

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 ~ correction for VC++ 8/9 linker error (by specifying
   stlsoft::malloc_allocator instead of std::allocator for
   specialisations of stlsoft::auto_buffer)


Front-ends:

Back-ends:

 + pantheios/implicit_link/bel.ACE.h
 + pantheios/implicit_link/ber.ACE.h
 + pantheios/implicit_link/be.fail.h
 + pantheios/implicit_link/bel.fail.h
 + pantheios/implicit_link/ber.fail.h

Distribution:

Makefiles / Project-files:

Examples:

 + examples/cpp/example.cpp.host_id/example.cpp.host_id.cpp

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.31 or later
   (http://stlsoft.org/)



15th April 2008 - 1.0.1 beta 121
================================

Summary:
--------

 * addition of pantheios::hostId inserter class, and supporting utility
   functions
 * various minor back-end fixes and refactorings
 * NOTE: Now requires STLSoft 1.9.31

Details:
--------

General:

Core:

Application Layer:

 + pantheios::hostId inserter class
 ~ minor adjustments to pantheios::processId and pantheios::threadId
   inserter classes

Tracing:

Util:

 + pantheios_getHostName() API function, and C++ wrapper method (using
   stlsoft::auto_buffer)

Front-ends:

Back-ends:

 ~ fix to be.file to return more meaningful result code when cannot open a
   file
 ~ be.WindowsSyslog now implemented in terms of pantheios_getHostName()
 ~ minor adjustments to pantheios/util/be/context.hpp

Distribution:

Makefiles / Project-files:

 ~ renamed *be_time*.o* => *time*.o*
 + added in hostId inserter
 + unit/component tests
 ~ more preparatory steps for pantheios.1.util.*.{a|lib} library

Examples:

Test:

Test.Unit:

 + test.unit.util.gethostname

Test.Component:

 + test.unit.inserters.hostId

Test.Scratch:

Depends on:

 * STLSoft 1.9.31 or later
   (http://stlsoft.org/)



10th April 2008 - 1.0.1 beta 120
================================

Summary:
--------

 * addition of missing back-end implicit link header files
 * renamed supporting libraries to UNIX-conventional prefix/suffix

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 + pantheios/implicit_link/be.speech.h
 + pantheios/implicit_link/be.speech.WithCallback.h
 + pantheios/implicit_link/bel.speech.h
 + pantheios/implicit_link/bel.speech.WithCallback.h
 + pantheios/implicit_link/ber.speech.h
 + pantheios/implicit_link/ber.speech.WithCallback.h

Distribution:

Makefiles / Project-files:

 ~ all UNIX (incl. Mac OS-X) makefiles now use correct UNIX library naming
   convention for supporting libraries b64, shwild and xTests

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.30 or later
   (http://stlsoft.org/)



8th April 2008 - 1.0.1 beta 119
===============================

Summary:
--------

 * addition of missing back-end implicit link header files

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 + pantheios/implicit_link/be.COMErrorObject.WithCallback.h
 + pantheios/implicit_link/bel.COMErrorObject.WithCallback.h
 + pantheios/implicit_link/bel.file.h
 + pantheios/implicit_link/ber.file.h
 + pantheios/implicit_link/bel.WindowsSyslog.h
 + pantheios/implicit_link/bel.WindowsSyslog.WithCallback.h
 + pantheios/implicit_link/be.file.WithCallback.h
 + pantheios/implicit_link/bec.file.WithCallback.h
 + pantheios/implicit_link/bel.file.WithCallback.h
 + pantheios/implicit_link/ber.file.WithCallback.h

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.30 or later
   (http://stlsoft.org/)



6th April 2008 - 1.0.1 beta 118
===============================

Summary:
--------

 * minor contract enforcement enhancements in some front-/back-ends
 * bundles shwild 0.9.13

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 ~ minor contract enforcement enhancements in some front-ends

Back-ends:

 ~ minor contract enforcement enhancements in some back-ends

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.30 or later
   (http://stlsoft.org/)



5th April 2008 - 1.0.1 beta 117
===============================

Summary:
--------

 * fix for threadId component test on Mac OS-X (G4)

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 ~ test/component/test.component.inserters.threadId.cpp fixed (as there
   was a type-mismatch between the actual thread Id (sint64_t) and the
   the type used in the component test (uint64_t), which causes the string
   rendering to be different for very large numbers (only evident on Mac
   OS-X (G4))).

Test.Scratch:

Depends on:

 * STLSoft 1.9.30 or later
   (http://stlsoft.org/)



4th April 2008 - 1.0.1 beta 116
===============================

Summary:
--------

 * fix for b64 component test for big-endian architectures

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 ~ test/component/test.component.inserters.b64.cpp fix for b64 big-endian
   architectures - this was pretty dumb on my part, especially since I
   have a big-endian machine for the very purpose of checking that I've
   not introduced any endian-dependency. Still, at least it was just the
   test program, and not the libraries themselves.

Test.Scratch:

Depends on:

 * STLSoft 1.9.30 or later
   (http://stlsoft.org/)



3rd April 2008 - 1.0.1 beta 115
===============================

Summary:
--------

 * Visual C++ 8/9 compatiblity fixes
 * Solaris compatibility fixes
 * NOTE: Now requires STLSoft 1.9.30

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 ~ src/util/time.cpp now passes NULL as the second parameter to
   gettimeofday()

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ makefiles for Visual C++ 8 and 9 now define _CRT_SECURE_NO_DEPRECATE,
   which is required by the (still evolving) STLSoft safe string handling
   support

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.30 or later
   (http://stlsoft.org/)



2nd April 2008 - 1.0.1 beta 114
===============================

Summary:
--------

 * Syslog compatibility fixes

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ bec.syslog.c now just uses the absence of LOG_PERROR to determine whether
   to implement the functionality explicitly

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.28 or later
   (http://stlsoft.org/)



28th March 2008 - 1.0.1 beta 113
================================

Summary:
--------

 * Solaris compatibility fixes

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ bec.file.cpp now #includes sys/stat.h on UNIX
 ~ bec.syslog.c now hides the non-standard LOG_PERROR for platforms that do
   not support, and instead explicitly writes to stderr if
   PANTHEIOS_BE_SYSLOG_F_PERROR is specified in the initialisation options

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.28 or later
   (http://stlsoft.org/)



20th March 2008 - 1.0.1 beta 112
================================

Summary:
--------

 * renamed libraries to UNIX-conventional prefix/suffix

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ all UNIX (incl. Mac OS-X) makefiles now use correct UNIX library naming
   convention

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.27 or later
   (http://stlsoft.org/)



19th March 2008 - 1.0.1 beta 111
================================

Summary:
--------

 * added compatibility with VC++ 9
 * added compatibility with GCC 4.2
 * bundles shwild 0.9.12
 * fix for string conversion pedantic warning with GCC 4.2

Details:
--------

General:

 + added compatibility with VC++ 9
 + added compatibility with GCC 4.2

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

 ~ fix for string conversion pedantic warning with GCC 4.2 in
   test.component.inserters.args

Test.Scratch:

Depends on:

 * STLSoft 1.9.27 or later
   (http://stlsoft.org/)



18th March 2008 - 1.0.1 beta 110
================================

Summary:
--------

 * fix for weird namespace bug in pantheios::threadId inserter with GCC

Details:
--------

General:

Core:

Application Layer:

 ~ fix for weird namespace bug in pantheios::threadId inserter with some
   variants of GCC (seemingly not on Windows or Mac OS-X). This is
   another manifestation of a known 'feature' of GCC, and slipped past
   the filter in 107. :$

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.27 or later
   (http://stlsoft.org/)



17th March 2008 - 1.0.1 beta 109
================================

Summary:
--------

 * fix for bug in b64 inserter header (introduced in 1.0.1 beta 107)
 * fix for GCC 4.0 error in pantheios::integer inserter
 * fix for token-pasting error in tracing example
 * fix for test.component.inserters.threadid on OS-X
 * bundles xTests 0.3.2
 * now depends on STLSoft 1.9.27

Details:
--------

General:

Core:

Application Layer:

 ~ fix for bug in b64 inserter header (introduced in 1.0.1 beta 107)
 ~ fix for unwarranted GCC -pedantic warning in pantheios::integer inserter

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

 ~ fix to token-pasting error in example.cpp.tracing.with_function

Test:

Test.Unit:

Test.Component:

 ~ fix for test.component.inserters.threadid on OS-X

Test.Scratch:

Depends on:

 * STLSoft 1.9.27 or later
   (http://stlsoft.org/)



16th March 2008 - 1.0.1 beta 108
================================

Summary:
--------

 * added new be.WindowsMessageBox back-end
 * bundles b64 1.3.1
 * bundles shwild 0.9.11
 * bundles xTests 0.3.1
 * now requires STLSoft 1.9.26

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 + added new be.WindowsMessageBox back-end

Distribution:

Makefiles / Project-files:

 + added new be.WindowsMessageBox back-end

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.26 or later
   (http://stlsoft.org/)



15th March 2008 - 1.0.1 beta 107
================================

Summary:
--------

 * various adjustments to ensure correct functioning when compiling C++
   client code, but suppressing pantheios namespace
 * added example for namespace-suppressed use of library
 * added example for tracing
 * updated FAQ item
 * new FAQ item
 * updated to include xTests 0.3

Details:
--------

General:

Core:

 ~ adjustments to ensure correct functioning when PANTHEIOS_NO_NAMESPACE is
   defined

Application Layer:

 ~ adjustments to ensure correct functioning when PANTHEIOS_NO_NAMESPACE is
   defined

Tracing:

 ~ adjustments to ensure correct functioning when PANTHEIOS_NO_NAMESPACE is
   defined

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

 + added examples/cpp/example.cpp.api.no_namespace/example.cpp.api.no_namespace.cpp
 + added examples/cpp/example.cpp.tracing.with_function/example.cpp.tracing.with_function.cpp

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.25 or later
   (http://stlsoft.org/)



13th March 2008 - 1.0.1 beta 106
================================

Summary:
--------

 * complete back-end and front-end project files for Visual Studio '98
 * upgraded to use xTests 0.2.2
 * bug fix to pantheios_onBailOut3()

Details:
--------

General:

 ~ complete back-end and front-end project files for Visual Studio '98
 ~ upgraded to use xTests 0.2.2

Core:

Application Layer:

Tracing:

Util:

 ~ fix to pantheios_onBailOut3(), whereby file was not written on UNIX

Front-ends:

 + complete project files for Visual Studio '98

Back-ends:

 + complete project files for Visual Studio '98

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.24 or later
   (http://stlsoft.org/)



9th March 2008 - 1.0.1 beta 105
===============================

Summary:
--------

 * new front-end: fe.fail
 * use of forward include guards throughout include files to improve
   compilation times
 * fix for bug introducted in 1.0.1 beta 104
 * documentation improvements

Details:
--------

General:

 ~ use of forward include guards throughout include files to improve
   compilation times
 ~ several markup improvements for the auto-documentation

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 + fe.fail, which always fails initialisation; useful for testing

Back-ends:

 ~ fix to bug introduced into bec.file header in 1.0.1 beta 104

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.24 or later
   (http://stlsoft.org/)



8th March 2008 - 1.0.1 beta 104
===============================

Summary:
--------

 * new front-end: fe.null
 * documentation improvements

Details:
--------

General:

 ~ several markup improvements for the auto-documentation

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 + fe.null, which always suppresses all statements; useful for testing

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.23 or later
   (http://stlsoft.org/)



1st March 2008 - 1.0.1 beta 103
===============================

Summary:
--------

 * enhanced bail out features, to include a message qualifier
 * minor compiler warning modifications

Details:
--------

General:

Core:

Application Layer:

 ~ minor modification to avoid fatuous compiler warning with Borland

Tracing:

Util:

 ~ enhanced bail out features, to include a message qualifier

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.23 or later
   (http://stlsoft.org/)



25th February 2008 - 1.0.1 beta 102
===================================

Summary:
--------

 * upgraded to use xTests 0.1.15, to fix compilation bug when
   exception-handling support is switched off

Details:
--------

General:

 ~ upgraded to use xTests 0.1.15, to fix compilation bug when
   exception-handling support is switched off

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.23 or later
   (http://stlsoft.org/)



23rd February 2008 - 1.0.1 beta 101
===================================

Summary:
--------

 * makefile for GCC 4.1
 * upgraded to use xTests 0.1.14
 * upgraded to use STLSoft 1.9.23
 * minor implementation adjustments

Details:
--------

General:

 ~ upgraded to use xTests 0.1.14

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 ~ refactoring of implementations to ensure no name leakage at link time

Back-ends:

 ~ refactoring of implementations to ensure no name leakage at link time

Distribution:

Makefiles / Project-files:

 + makefile for GCC 4.1

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.23 or later
   (http://stlsoft.org/)



20th February 2008 - 1.0.1 beta 100
===================================

Summary:
--------

 * documentation improvements
 * added back-end structure initialisation
 * makefile improvements
 * upgraded to use xTests v0.1.11

Details:
--------

General:

 ~ upgraded to use xTests v0.1.11

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 ~ minor adjustments to documentation of pantheios_fe_getProcessIdentity()

Back-ends:

 + all back-end initialisation structures now invoke the requisite default
   initialisation function (e.g. pantheios_be_file_getDefaultAppInit()) in
   their constructors (in C++ compilation units, also)

Distribution:

Makefiles / Project-files:

 ~ minor correction to ensure shwild and xTests libraries are cleaned along
   with all others

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.22 or later
   (http://stlsoft.org/)



12th February 2008 - 1.0.1 beta 99
==================================

Summary:
--------

 * reduced compilation load for inserter classes
 * bug fix for Linux compilation

Details:
--------

General:

Core:

Application Layer:

 ~ defined PANTHEIOS_NO_INCLUDE_STLSOFT_STRING_ACCESS in all inserter class
   implementation files, to remove #inclusion of all string access shim
   headers, thereby reducing compilation load

Tracing:

Util:

 ~ fixed erroneous elision of <string.h> #include in
   refactoring of 1.0.1 beta 98

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.22 or later
   (http://stlsoft.org/)



9th February 2008 - 1.0.1 beta 98
=================================

Summary:
--------

 * added new test case
 * refactored back-end implementation files
 * bug fix to src/util/time.cpp

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 ~ fix for bug in src/util/time.cpp introduced in beta 97

Front-ends:

Back-ends:

 ~ all stock back-ends' be/bel/ber implementation files now use the back-end
   definition macros PANTHEIOS_BE_DEFINE_BE_FUNCTIONS(),
   PANTHEIOS_BE_DEFINE_BEL_FUNCTIONS(), or
   PANTHEIOS_BE_DEFINE_BER_FUNCTIONS()

Distribution:

Makefiles / Project-files:

 + builds test.component.core.initialisation_sequence

Examples:

Test:

Test.Unit:

Test.Component:

 + test.component.core.initialisation_sequence, which verifies the
   core/front-end/back-end initialisation sequence


Test.Scratch:

Depends on:

 * STLSoft 1.9.22 or later
   (http://stlsoft.org/)



8th February 2008 - 1.0.1 beta 97
=================================

Summary:
--------

 * NOTE: Now requires STLSoft 1.9.22
 * bundles b64 1.2.5
 * bundles shwild 0.9.9
 * bundles xTests 0.1.8
 * partial compatiblity with safe string library (VC8+)

Details:
--------

General:

 - removal of a large amount of hard-coded warning suppression
 - removal of a large amount of unnecessary #includes
 ~ partial compatibility with safe string library (VC8+)
 ~ clearing up of NoX effects in source-code (e.g. exception-specifications)

Core:

 ~ partial compatibility with safe string library (VC8+)

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 + builds b64 library for use with pantheios::b64 inserter class
 + builds test and example programs for b64
 ~ fixes mix-up in definition of bec.test.o, be.test.o, be;.test.o,
   ber.test.o, which led to subtle bugs on 64-bit UNIX

Examples:

 + now builds example.cpp.b64 as part of build

Test:

Test.Unit:

Test.Component:

 ~ fixes component test for threadId inserter class that was
   broken in 1.0.1 beta 96

Test.Scratch:

Depends on:

 * STLSoft 1.9.22 or later
   (http://stlsoft.org/)



5th February 2008 - 1.0.1 beta 96
=================================

Summary:
--------

 * fixed subtle makefile bug (pertaining to be.test)
 * workaround for odd (and breaking) #include behaviour of GCC on UNIX

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ src/be/bec.test.cpp now discriminates threading features _before_
   inclusion of API header, which #includes <string>, which, on GCC,
   #includes <pthread.h>!!!

Distribution:

Makefiles / Project-files:

 ~ the makefiles had the object file names for bec_test, be_test, bel_test
   and ber_test mixed up. Now fixed

Examples:

Test:

Test.Unit:

 + test.unit.be.N

Test.Component:

 * fixed bug in test.component.inserters.threadId program for
   pantheios::threadId inserter class introduced in beta 94, which did not
   keep up with the changes in behaviour of the class

Test.Scratch:

Depends on:

 * STLSoft 1.9.21 or later
   (http://stlsoft.org/)



5th February 2008 - 1.0.1 beta 95
=================================

Summary:
--------

 * NOTE: Now requires STLSoft 1.9.21
 * added unit test for be.N
 * fixed wrong test values in test.component.inserters.threadId

Details:
--------

General:

 ~ now requires STLSoft 1.9.21, since 1.9.20 had a subtle bug in the
   discrimination of multi-threaded features on UNIX

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 + test.unit.be.N

Test.Component:

 * fixed bug in test.component.inserters.threadId program for
   pantheios::threadId inserter class introduced in beta 94, which did not
   keep up with the changes in behaviour of the class

Test.Scratch:

Depends on:

 * STLSoft 1.9.21 or later
   (http://stlsoft.org/)



3rd February 2008 - 1.0.1 beta 94
=================================

Summary:
--------

 * NOTE: Now requires STLSoft 1.9.20
 * makefiles updated for separate single- and multi-threaded targets on UNIX
 * updated string API, and concomitant refactoring of inserter classes
 * removal of multi-threading constructs from core and back-end
   implementations in single-threading compilation contexts
 * updated to version 0.1.8 of xTests library

Details:
--------

General:

 + include/pantheios/internal/threading.h, which detects whether single- or
   multi-threaded compilation contexts
 ~ pantheios_inserter_snprintf_() becomes pantheios_string_snprintf(), and
   is no longer a macro with some compilers. Also, it no longer has a size
   restriction
 + pantheios_string_vsnprintf() function, in terms of which
   pantheios_string_snprintf() is implemented

Core:

 ~ core functions now only use thread_mutex in multithreaded compilation
   contexts

Application Layer:

 ~ trivial pre-processor syntax error cleared up
 ~ pantheios::integer, pantheios::pointer and pantheios::real inserter
   classes now implemented in terms of pantheios_string_snprintf()

Tracing:

Util:

Front-ends:

Back-ends:

 ~ be.file now only uses thread_mutex in multithreaded compilation contexts
 ~ be.test now only uses thread_mutex in multithreaded compilation contexts

Distribution:

Makefiles / Project-files:

 ~ Comeau makefiles now no longer specify --A, to compile cleanly on Windows
 ~ all GCC (UNIX) makefiles now specify single-threaded and multi-threaded
   variants separately

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.20 or later
   (http://stlsoft.org/)



2nd February 2008 - 1.0.1 beta 93
=================================

Summary:
--------

 * NOTE: Now requires STLSoft 1.9.19
 * increased severity levels ranges for be.fprintf and be.speech

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ be.fprintf can work with any severity levels in the range [0, 16)
 ~ be.speech can work with any severity levels in the range [0, 16)
 ~ enhanced contract programming enforcement messages in be.syslog,
   be.WindowsConsole, be.WindowsEventLog and be.COMErrorObject,
   explaining why severity levels must be in the range [0, 8)
 ~ be.speech now implemented in terms of STLSoft's
   comstl/speech/sapi_util.hpp; this is shared with the speech sink
   in the soon-to-be-released FastFormat (http://fastformat.org/)

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.19 or later
   (http://stlsoft.org/)



28th January 2008 - 1.0.1 beta 92
=================================

Summary:
--------

 * added more unit-tests
 * refactored back-end stock implementation class namespace
 * NOTE: These are breaking changes. Any custom back-ends
   defined using pantheios::internal::Context will have to
   be edited and recompiled

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ move the Context class from the pantheios::internal namespace to
   the pantheios::util::be namespace

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

 + test.unit.bec.fail
 + test.unit.be.fail
 + test.unit.be.lrsplit

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.18 or later
   (http://stlsoft.org/)



27th January 2008 - 1.0.1 beta 91
=================================

Summary:
--------

 * NOTE: Now requires STLSoft 1.9.18
 * refactoring of inserter classes
 * bug fix to makefile for GCC compilation

Details:
--------

General:

Core:

Application Layer:

 ~ refactored include/pantheios/inserters/integer.hpp to
   reduce physical dependencies
 ~ pantheios::integer inserter class now properly handles
   format situation of:
    + hex
    + zeroXPrefix
    + width > 0
    - not zeroPad
 ~ pantheios::pointer inserter class now assumes zeroPad
   if zeroXPrefix is specified along with a width

Tracing:

Util:

Front-ends:

Back-ends:

 + implicit link headers for bec.test and be.test

Distribution:

Makefiles / Project-files:

 ~ fixed compile error with making examples

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.18 or later
   (http://stlsoft.org/)



27th January 2008 - 1.0.1 beta 90
=================================

Summary:
--------

 * almost complete elimination of use of sprintf() / snprintf() except
   where necessary to support variadic API functions

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ refactored be.COMErrorObject and be.WindowsSyslog to remove more use of
   sprintf() / snprintf(). In the process, fixed a bug in be.COMErrorObject

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



26th January 2008 - 1.0.1 beta 89
=================================

Summary:
--------

 * refactored example directories and file-names
 * enhanced makefiles to incorporate all examples

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 - removed the "NoX" (no-exception; exception-support suppressed) builds
   from the makefiles for VC++ 7, 7.1 and 8. Only 5 & 6 have it still
 + incorporated the two "101" examples into the build

Examples:

 ~ changed all the names/directories of the examples from example_c_X and
   example_cpp_Y to example.c.X and example.cpp.Y

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



20th January 2008 - 1.0.1 beta 88
=================================

Summary:
--------

 * fixes for various minor bugs introduced in beta 87

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ fixed incorrectly calculated invariant in bec.file

Distribution:

Makefiles / Project-files:

 ~ fix for unit test program for bec.file, which did not link correctly with
   GCC

Examples:

Test:

Test.Unit:

 ~ fixed Windows dependency in test.unit.bec.file

 ~ changed test failure reporting mechanism in test.unit.getcurrenttime to
   provide more information

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



20th January 2008 - 1.0.1 beta 87
=================================

Summary:
--------

 * refactor threadId and pointer inserter classes
 * simplified Tracing API implementation
 * refactored 4 back-ends (be.file, be.speech, be.WindowsConsole,
   be.WindowsDebugger)
 * enhanced unit testing of be.COMErrorObject
 * added unit testing of be.file
 * added component testing of Tracing API
 * uses version 0.1.6 of xTests library

Details:
--------

General:

 - removed all vestiges of befe.test

Core:

Application Layer:

 ~ refactored threadId inserter to use pantheios_getCurrentThreadId(), and
   to not use sprintf()
 ~ refactored pointer inserter to minimise use of sprintf()

Tracing:

 ~ PANTHEIOS_TRACE_XXXX() now implemented in terms of pantheios::log(),
   rather than pantheios::log_XXXX() (e.g. pantheios::log_DEBUG())

Util:

Front-ends:

Back-ends:

 ~ refactored implementations of be.file, be.speech, be.WindowsConsole and
   be.WindowsDebugger to remove use of sprintf() and reduce compilation
   times

Distribution:

Makefiles / Project-files:

 ~ adjustments to incorporate new tests

Examples:

Test:

 ~ uses version 0.1.6 of xTests library

Test.Unit:

 ~ enhanced test.unit.be.COMErrorObject to verify behaviour of
   PANTHEIOS_BE_COMERROROBJECT_F_DONT_OVERWRITE_EXISTING

Test.Component:

 ~ fixed oversight in test.component.log.1 component test program

 + added test.component.trace.1 component test program

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



19th January 2008 - 1.0.1 beta 86
=================================

Summary:
--------

 * enhanced be.test, so it can be used in conjunction with other back-ends
 * minor changes/enhancements to memory handling
 * added more example projects

Details:
--------

General:

Core:

 ~ pantheios_printf() will now accept a format string and arguments up to a
   total of 4095 characters.

 ~ pantheios::log() (and all severity-specific logging) will now acquire
   memory from the heap if the total number of characters in the log
   statement is more than 2047, rather than the previous 2048.

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ be.test C++ test API is now in namespace 'pantheios::be::test', rather
   than 'pantheios::test'
 ~ renamed include/backends/bec.test.hpp => include/backends/bec.test.h
 ~ moved implementation of be.test into bec.test library. This means it
   can now be used in conjunction with other back-ends, via be.lrsplit or
   be.N

   NOTE: Only one instance of be.test may be used in any process. Behaviour
   is undefined if two or more instances are used in the same process.
 + added be.test library
 + added bel.test library
 + added ber.test library

Distribution:

Makefiles / Project-files:

 ~ adjusted all makefiles to use new be.test libraries

Examples:

 - removed examples/inserters/hexptr example, since hex_ptr now a stock
   inserter
 + added examples/c/example.c.101/example.c.101.c, which illustrates the
   basics of using the Pantheios C API
 + added examples/cpp/example.cpp.101/example.cpp.101.cpp, which illustrates
   the basics of using the Pantheios C++ API

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



15th January 2008 - 1.0.1 beta 85
=================================

Summary:
--------

 * Bug file in be.file
 * Updated error strings

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 + added PANTHEIOS_INIT_RC_CANNOT_CREATE_THREAD
 ~ adjusted src/init_error_strings.c for latest error codes

Front-ends:

Back-ends:

 ~ fixed bug in be.file (introduced in beta 84), which would cause a '\0'
   rather than '\n' (or "\r\n") to be written as a line terminator when
   none of processId, severity and time are displayed.

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



14th January 2008 - 1.0.1 beta 84
=================================

Summary:
--------

 * Minor enhancements to Application Layer
 * Refactoring of stock back-end common library, to enhance efficiency
 * Additional component tests

Details:
--------

General:

 + added include/pantheios/pan.hpp, which #includes
   include/pantheios/pantheios.hpp and aliases the
   pantheios namespace to pan. Thus, all symbols
   can be referenced via pan:: as well as pantheios::

Core:

Application Layer:

 + added include/pantheios/inserters/processid.hpp
    to include/pantheios/inserters.hpp
 + added include/pantheios/inserters/threadid.hpp
    to include/pantheios/inserters.hpp

Tracing:

Util:

Front-ends:

Back-ends:

 + added overload for rawLogEntry() to pantheios::internal::Context, to
   enable faster processing of entries when not including any of
   process Id, time and severity in the statement.
 ~ adjustment to bec.file, to add rawLogEntry() overload
 ~ adjustment to bec.fprintf, to add rawLogEntry() overload
 ~ adjustment to bec.speech, to add rawLogEntry() overload
 ~ adjustment to bec.WindowsConsole, to add rawLogEntry() overload
 ~ adjustment to bec.WindowsDebugger, to add rawLogEntry() overload

Distribution:

Makefiles / Project-files:

 ~ all necessary adjustments to the makefiles are made

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



13th January 2008 - 1.0.1 beta 83
=================================

Summary:
--------

 * Minor enhancements to Application Layer
 * Additional component tests

Details:
--------

General:

Core:

Application Layer:

 ~ include/pantheios/inserters/ids.hpp =>
     include/pantheios/inserters/processid.hpp and
     include/pantheios/inserters/threadid.hpp

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ all necessary adjustments to the makefiles are made

Examples:

Test:

Test.Unit:

Test.Component:

 + test/component/test.component.core.pantheios_printf

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



12th January 2008 - 1.0.1 beta 82
=================================

Summary:
--------

 * Changed befe.test to be.test, for increased flexibility in testing

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

 ~ befe.test has become be.test, which means it can be used to test
   various front-ends, as well as be used with be.N

Distribution:

Makefiles / Project-files:

 ~ all necessary adjustments to the makefiles are made

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



11th January 2008 - 1.0.1 beta 81
=================================

Summary:
--------

 * Bug fix for 64-bit Linux

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

 ~ fixed compilation bug in src/util/threading.c

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



8th January 2008 - 1.0.1 beta 80
================================

Summary:
--------

 * changed be.file API: BREAKING CHANGE!
 * NOTE: These are breaking changes. Any code using any be.file stock
   back-ends will need to be edited!
 * further refactoring of src directories

Details:
--------

General:

Core:

Application Layer:

 ~ refactored from:
     src/appl/inserters.cpp
     src/appl/inserters2.cpp

   to:
     src/appl/memory.cpp
     src/inserters/args.cpp
     src/inserters/blob.cpp
     src/inserters/integer.cpp
     src/inserters/pointer.cpp
     src/inserters/processid.cpp
     src/inserters/real.cpp
     src/inserters/threadid.cpp

Tracing:

Util:

 ~ fixed "bug" (warning) in GCC 4.0 on Mac OS-X

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ fixed broken UNIX makefiles introduced with beta 78

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



6th January 2008 - 1.0.1 beta 79
================================

Summary:
--------

 * fixed broken UNIX makefiles introduced with beta 78
 * incorporates shwild 0.9.9

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ fixed broken UNIX makefiles introduced with beta 78

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



6th January 2008 - 1.0.1 beta 78
================================

Summary:
--------

 * added new front-end: fe.all
 * compatibility release, to require v1.9.17 of STLSoft, which fixes
   a compilation issue with GCC on Leopard

Details:
--------

General:

Core:

Application Layer:

Tracing:

Util:

Front-ends:

 + fe.all, which always return 1 from pantheios_isSeverityLogged()

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ adjusted for all source file changes

Examples:

Test:

Test.Unit:

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.17 or later
   (http://stlsoft.org/)



5th January 2008 - 1.0.1 beta 77
================================

Summary:
--------

 * major code refactoring: moving all unnecessary code from Core into Util
   to facilitate future reductions in coupling between modules
 * minor addition to Util API

Details:
--------

General:

Core:

 - removed bailout.c from Core, and into Util
 - removed init_error_strings.c from Core, and into Util
 - removed severity_strings.c from Core, and into Util
 - removed strutil.cpp from Core, and into Util

Application Layer:

Tracing:

Util:

 + added pantheios_getCurrentThreadId(), which has a platform-independent
   signature. Declared in include/pantheios/util/threading/threading.h and
   defined in src/util/threading.c
 + moved bailout.c from Core into Util
 + moved init_error_strings.c from Core into Util
 + moved severity_strings.c from Core into Util
 + moved strutil.cpp from Core into Util
 ~ renamed context.cpp to be.context.cpp

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

 ~ adjusted for all source file changes
 ~ preparatory steps for separation of current Core lib into Util and Core
   libs

Examples:

Test:

 ~ incorporates latest minor changes to xTests, to address compiler warnings
   with various compilers

Test.Unit:

 ~ fixed a couple of compiler warnings with VC++ 6

Test.Component:

Test.Scratch:

Depends on:

 * STLSoft 1.9.16 or later
   (http://stlsoft.org/)



4th January 2008 - 1.0.1 beta 76
================================

Summary:
--------

 * workaround for VC++ 8 linker issue
 * minor bug fix in component test program
 * minor change in Core API to reduce coupling
 * minor compatibility changes with Win64

Details:
--------

General:

Core:

 ~ changed pantheios_onBailOut_() internal function to the API function
   pantheios_onBailOut3()
 ~ Win32 => Windows pre-processor discrimination adjustments

Application Layer:

Tracing:

Util:

 ~ reduction in coupling of src/util/time.cpp to Pantheios Core; now depends
   on pantheios_onBailOut3(), rather than on pantheios_onBailOut()

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

 ~ incorporates changed shwild, to fix inexplicable VC++ 8 linker problem in
   DLL builds

Test.Unit:

Test.Component:

 ~ fix of ambiguity in test/component/test.component.inserters.args.cpp
   with Borland

Test.Scratch:

Depends on:

 * STLSoft 1.9.16 or later
   (http://stlsoft.org/)



3rd January 2008 - 1.0.1 beta 75
================================

Summary:
--------

 * Included unit/component-testing framework into public distribution
 * Now bundles shwild library for use in unit-test pattern matching
 * Now bundles xTests library for component/unit-testing
 * Updated the error code strings in the Core to reflect recent additions
 * Enhanced pantheios::pointer inserter (Application Layer)
 * Fixed benign (but annoying) bug in time routines (Util)
 * Enhanced functionality of be.COMErrorObject (Back-end)
 * Adjusted all makefiles to build and execute new Unit and Component tests
 * Fixed compilation error in example 10 (Examples)
 * Added/adjusted 4 Unit tests (Test)
 * Added/adjusted 8 Component tests (Test)

Details:
--------

General:

Core:

 ~ updated core/init_error_strings.c to include string forms of
   PANTHEIOS_BE_INIT_RC_ARGUMENT_TOO_LONG and
   PANTHEIOS_BE_INIT_RC_ARGUMENT_OUT_OF_RANGE error codes (added in beta 72)


Application Layer:

 ~ pantheios::pointer now accepts void const volatile*, rather than
   void const*

Tracing:

Util:

 ~ bug whereby calling pantheios_util_getCurrentTime() with NULL to elicit
   required length would give wrong (but larger) length

Front-ends:

Back-ends:

 ~ be.COMErrorObject now recognises PANTHEIOS_BE_INIT_F_NO_SEVERITY

Distribution:

Makefiles / Project-files:

 ~ Adjusted all makefiles to invoke unit/component/scratch testing,
   including new make targets:
    build.test.component, test.component,
    build.test.scratch, test.scratch,
    build.test.unit, test.unit,

   If you type "make test" (or "make -f makefile.unix test"), then you
   will request build and execution of the Unit and Component tests
   only; you will NOT get the Scratch tests, as used to be the case. To
   get the Scratch tests either explicitly type "make test.scratch" or,
   to get all three test types, type "make test.all"

Examples:

 ~ fixed bug in example 10
   (examples/cpp/example_cpp_callback_be/example_cpp_callback_be.cpp)

Test:

 + Included unit/component-testing framework into public
   distribution

Test.Unit:

 + added test/unit/test.unit.bec.COMErrorObject
 + added test/unit/test.unit.levels.dynamic_initialisations
 + added test/unit/test.unit.levels.values
 ~ adjusted test/unit/test.unit.getcurrenttime to new test infrastructure

Test.Component:

 + added test/component/test.component.inserter.args
 + added test/component/test.component.inserter.integer
 + added test/component/test.component.inserter.pointer
 + added test/component/test.component.inserter.processId
 + added test/component/test.component.inserter.real
 + added test/component/test.component.inserter.threadId
 + added test/component/test.component.log.1
 ~ adjusted test/component/test.component.custom_severity to new test infrastructure

Test.Scratch:

Depends on:

 * STLSoft 1.9.16 or later
   (http://stlsoft.org/)



30th December 2007 - 1.0.1 beta 74
==================================

Summary:
--------

 * compatibility release, to require v1.9.16 of STLSoft, which fixes two
   bugs: -ve short/int formatting on 64-bit Linux; 12hr/24hr time
   representation on Windows

Details:
--------

General:

Core:

Application Layer:

Tracing:

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Depends on:

 * STLSoft 1.9.16 or later
   (http://stlsoft.org/)



29th December 2007 - 1.0.1 beta 73
==================================

Summary:
--------

 * fixed compilation error introduced in 1.0.1 beta 72

Details:
--------

General:

Core:

Application Layer:

Tracing:

Front-ends:

Back-ends:

 - removal of parsing of arguments 'port', 'address' and 'facility' in
   be.syslog, since it does not support them

Distribution:

Makefiles / Project-files:

Examples:

Test:

Depends on:

 * STLSoft 1.9.15 or later
   (http://stlsoft.org/)



28th December 2007 - 1.0.1 beta 72
==================================

Summary:
--------

 * Change of back-end initialisation flags and parsing: BREAKING CHANGE!
 * NOTE: These are breaking changes. Any code using any
   stock back-ends may need to be edited!
 * NOTE: *ALL* code using Pantheios must be recompiled, or
   runtime errors may occur!
 * Additional minor adjustments in application layer
 * Additional initialisation error codes defined

Details:
--------

General:

 ~ PANTHEIOS_BE_INIT_F_NO_TIME renamed to PANTHEIOS_BE_INIT_F_NO_DATETIME
 + addition of PANTHEIOS_BE_INIT_RC_ARGUMENT_TOO_LONG (in
   include/pantheios/error_codes.h)
 + addition of added PANTHEIOS_BE_INIT_RC_ARGUMENT_OUT_OF_RANGE (in
   include/pantheios/error_codes.h)

Core:

Application Layer:

 + added include/pantheios/inserters/args.hpp to
   include/pantheios/inserters.hpp

Tracing:

Front-ends:

Back-ends:

 - removal of all back-end specific analogues of the stock back-end argument
   flags, e.g. PANTHEIOS_BE_FILE_F_NO_PROCESS_ID is removed; users should
   now use PANTHEIOS_BE_INIT_F_NO_PROCESS_ID

 ~ fixed erroneous definition of pantheios_be_fprintf_parseArgs

 ~ fixed erroneous definition of pantheios_be_WindowsDebugger_parseArgs

 ~ fixed misspelling of be.speech argument 'speakPunctuation' (was
   'speakPuncutation')

 ~ adjustment of "true" / "false" symbols in back-end argument parsing, to
   support all of true/false, yes/no, on/off, 1/0

 ~ be.WindowsConsole argument parsing now recognises 'showColors' as well as
   'showColours' (as a boon to all the US users <g>)

 ~ be.syslog/be.WindowsSyslog now fully support parsing of arguments 'port',
   'address' and 'facility'

Distribution:

Makefiles / Project-files:

Examples:

Test:

Depends on:

 * STLSoft 1.9.15 or later
   (http://stlsoft.org/)



27th December 2007 - 1.0.1 beta 71
==================================

Summary:
--------

 * Cleanup release, preparing for introduction of unit/component-testing
   to the distribution

Details:
--------

General:

 + added PANTHEIOS_INIT_RC_CANNOT_CREATE_TSS_INDEX (in
   include/pantheios/error_codes.h)

Core:

Application Layer:

Tracing:

 ~ Definition of the eight severity-specific trace macros -
   PANTHEIOS_TRACE_EMERGENCY ... PANTHEIOS_TRACE_DEBUG - is now
   suspended when PANTHEIOS_NO_STOCK_LEVELS is specified

Front-ends:

Back-ends:

Distribution:

Makefiles / Project-files:

Examples:

Test:

Depends on:

 * STLSoft 1.9.15 or later
   (http://stlsoft.org/)



11th December 2007 - 1.0.1 beta 70
==================================

Summary:
--------

 * Shift of back-end initialisation flags: BREAKING CHANGE!
 * NOTE: These are breaking changes. All code using any
   stock back-ends will need to be edited and recompiled!
 * NOTE: *ALL* code using Pantheios must be recompiled, or
   runtime errors may occur

Details:
--------

General:

Distribution:

Makefiles / Project-files:

Application Layer:

Front-ends:

Back-ends:

 ~ reclassification of stock back-end flag range as 0x000fffff
   (#define PANTHEIOS_BE_INIT_F_COMMON_MASK) and custom range as
   ~0x000fffff (#define PANTHEIOS_BE_INIT_F_CUSTOM_MASK)

 ~ adjustment of:
    - include/pantheios/backends/be.N.h
    - include/pantheios/backends/be.COMErrorObject.h
    - include/pantheios/backends/be.file.h
    - include/pantheios/backends/be.speech.h
    - include/pantheios/backends/be.syslog.h
    - include/pantheios/backends/be.WindowsConsole.h
    - include/pantheios/backends/be.WindowsSyslog.h

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



10th December 2007 - 1.0.1 beta 69
==================================

Summary:
--------

 * Further documentation enhancements

Details:
--------

General:

 ~ documentation enhancements, including documenting Pantheios
   Tracing API

Distribution:

Makefiles / Project-files:

Application Layer:

Front-ends:

Back-ends:

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



8th December 2007 - 1.0.1 beta 68
=================================

Summary:
--------

 * Small refactoring of #include directories, and test programs
 * Further documentation enhancements
 * Corrected spelling errors (pantheios, not panthieos)

Details:
--------

General:

 ~ include/pantheios/converters.hpp is now obsolete, and breaks compilation
   with a #error

 ~ moved include/pantheios/assert.h => include/pantheios/contract/assert.h

 + added PANTHEIOS_BE_INIT_F_STOCK_MASK and PANTHEIOS_BE_INIT_F_CUSTOM_MASK
   back-end initialisation flag masks

 ~ Corrected spelling errors (panthieos, not pantheios)

Distribution:

Makefiles / Project-files:

Application Layer:

Front-ends:

Back-ends:

Examples:

Test:

 ~ Some cleanup of test/scratch programs - more needed

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



5th December 2007 - 1.0.1 beta 67
=================================

Summary:
--------

 * Substantial rework/enhancement to the documentation

Details:
--------

General:

 ~ documentation enhancements

Distribution:

Makefiles / Project-files:

Application Layer:

 ~ documentation enhancements

Front-ends:

 ~ documentation enhancements

Back-ends:

 ~ documentation enhancements

Examples:

 ~ documentation enhancements

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



4th December 2007 - 1.0.1 beta 66
=================================

Summary:
--------

 * Added new pantheios::hex_ptr inserter class, which provides
   a shorthand for using pantheios::pointer in hex format.

Details:
--------

General:

Distribution:

Makefiles / Project-files:

 ~ Adjusted all makefile dependencies

Application Layer:

 + New hex_ptr inserter class, based on the hexptr example

Front-ends:

Back-ends:

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



3rd December 2007 - 1.0.1 beta 65
=================================

Summary:
--------

 * Moved all remaining test files to new naming/directory
   scheme
 * Fixed compilation warnings with GCC in test files

Details:
--------

General:

Distribution:

Makefiles / Project-files:

 ~ Adjusted all makefiles to new test files naming/directory
   scheme

Application Layer:

Front-ends:

Back-ends:

Examples:

Test:

 ~ Moved all remaining test files to new naming/directory
   scheme
 ~ Fixed compilation warnings with GCC in test files

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



2nd December 2007 - 1.0.1 beta 64
=================================

Summary:
--------

 * Fixed weird behaviour in test programs with DMC++

Details:
--------

General:

Distribution:

Makefiles / Project-files:

Application Layer:

Front-ends:

Back-ends:

Examples:

Test:

 ~ several test files still had old way of handling
   PANTHEIOS_FE_PROCESS_IDENTITY with DMC++, which is no
   longer necessary (and produced erroneous output)

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



29th November 2007 - 1.0.1 beta 63
==================================

Summary:
--------

 * Further refactoring of test directories

Details:
--------

General:

Distribution:

Makefiles / Project-files:

Application Layer:

Front-ends:

Back-ends:

Examples:

Test:

 ~ movement of following remaining from test to
   test/scratch, test/unit or test/component

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



27th November 2007 - 1.0.1 beta 62
==================================

Summary:
--------

 * fixed compiler warnings with VC++ 8

Details:
--------

General:

Distribution:

Makefiles / Project-files:

Application Layer:

Front-ends:

Back-ends:

Examples:

 ~ fixed VC++ 8 compiler warning in
   examples/cpp/example_cpp_callback_be/example_cpp_callback_be.cpp

Test:

 ~ fixed VC++ 8 compiler warning in
   test/scratch/be.N.fail.test/be.N.fail.test.cpp

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



26th November 2007 - 1.0.1 beta 61
==================================

Summary:
--------

 * enhancement of fe.WindowsRegistry

Details:
--------

General:

Distribution:

Makefiles / Project-files:

Application Layer:

Front-ends:

 ~ fe.WindowsRegistry now checks in HKCU first, and then defaults to
   HKLM

Back-ends:

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



25th November 2007 - 1.0.1 beta 60
==================================

Summary:
--------

 * reduction of source code size in generated headers
 * ability to reduce compilation load of Application Layer by
   control of PANTHEIOS_APPL_PARAMS_LIMIT pre-processor symbol
 * new FAQ item
 * minor inconsistency fix in shim suppression symbols
 * minor changes in documentation

Details:
--------

General:

Distribution:

 + FAQ #6: "How do I alter the number of parameters in the Application Layer?"

Makefiles / Project-files:

 ~ separation of Test (Scratch) vs Example settings, so can use
   PANTHEIOS_APPL_PARAMS_LIMIT to speed compilation

Application Layer:

 + PANTHEIOS_APPL_PARAMS_LIMIT pre-processor symbol, which provides
   ability to reduce compilation load of Application Layer by
   limiting the visibility (to the compiler) of the N-ary Function
   Templates of the Application Layer. Defaults to 32 if not
   specified by user

 ~ fix in inconsistency between access shims suppression symbols. The
   symbol PANTHEIOS_NO_INCLUDE_STLSOFT_SHIM_ACCESS_SHIMS is deprecated
   in favour of PANTHEIOS_NO_INCLUDE_STLSOFT_STRING_ACCESS.

 - removal of unnecessary documentation comments from generated headers

 ~ reduction in source code size of generated headers

 - removal of pantheios/pantheios.hpp from inserter header files

Front-ends:

Back-ends:

Examples:

Test:



Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



24th November 2007 - 1.0.1 beta 59
==================================

Summary:
--------

 * Refactoring of test directories
 * Tidying of examples
 * Added hexptr inserter example

Details:
--------

General:

Makefiles / Project-files:

 ~ adjustment of all makefiles to reflect changed test
   directory structure

 ~ /pantheios.vc6.dsw => /test/scratch/pantheios.vc6.dsw
 ~ /pantheios.unix.vc6.dsw => /test/scratch/pantheios.unix.vc6.dsw

Application Layer:

Front-ends:

Back-ends:

Examples:

 ~ general tidying up of all examples' source
 + examples/inserters/hexptr/hexptr.cpp

Test:

 + creation of test/component, for component-tests
 + creation of test/unit, for unit-tests
 + creation of test/scratch, for scratch test programs
 ~ movement of following projects from test to
   test/scratch:


Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



23rd November 2007 - 1.0.1 beta 58
==================================

Summary:
--------

 * Refactoring of front-end include files and API symbols

Details:
--------

General:

Makefiles:

Application Layer:

Front-ends:

 + include/pantheios/frontends/stock.h, which defines
   PANTHEIOS_FE_PROCESS_IDENTITY
 ~ include/pantheios/frontends/fe.N.h, which includes
   include/pantheios/frontends/stock.h
 ~ include/pantheios/frontends/fe.simple.h, which includes
   include/pantheios/frontends/stock.h
 ~ include/pantheios/frontends/fe.WindowsRegistry.h, which includes
   include/pantheios/frontends/stock.h

Back-ends:

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



22nd November 2007 - 1.0.1 beta 57
==================================

Summary:
--------

 * Various necessary changes and enhancements to back-end argument
   parsing and documentation

Details:
--------

General:

Makefiles:

Application Layer:

Front-ends:

Back-ends:

 + added pantheios_be_COMErrorObject_parseArgs(). Recognises standard
   back-end arguments, and following custom arguments:
     overwriteExisting (Boolean)

 + added pantheios_be_speech_parseArgs(). Recognises standard
   back-end arguments, and following custom arguments:
     synchronous (Boolean)
     purgeBeforeSpeak (Boolean)
     speakPuncutation (Boolean)
     synchronousOnCritical (Boolean)

 ~ changed parameter order of pantheios_be_file_parseArgs(). Recognises
   standard back-end arguments, and following custom arguments:
     fileName (string)
     truncate (Boolean)
     discardCachedContents (Boolean)

 ~ changed parameter order of pantheios_be_syslog_parseArgs(). Recognises
   standard back-end arguments, and following custom arguments:
     address (hostname string, or dotted IP address)
     port (number)
     facility (string)
     useStderr (Boolean)
     useConsole (Boolean)
     showPid (Boolean)
     connectImmediately (Boolean)

 ~ changed parameter order of pantheios_be_WindowsConsole_parseArgs().
   Recognises standard back-end arguments, and following custom arguments:
     showColours (Boolean)

 ~ changed parameter order of pantheios_be_WindowsSyslog_parseArgs()
   Recognises standard back-end arguments, and following custom arguments:
     address (hostname string, or dotted IP address)
     port (number)
     facility (string)
     useStderr (Boolean)
     useConsole (Boolean)
     showPid (Boolean)
     connectImmediately (Boolean)

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



21st November 2007 - 1.0.1 beta 56
==================================

Summary:
--------

 * bug fix in pantheios::threadId inserter (when used on UNIX)
 * significant refactoring of back-end argument parsing API and
   include file directory structure

Details:
--------

General:

Makefiles:

Application Layer:

 ~ bug fix in pantheios::threadId inserter when used on UNIX: fixed up
   swapped threading/non-threading behaviours

Core:

 ~ Moved stock back-end argument parsing function declarations out of
   include/pantheios/backends.h => include/pantheios/util/be/arguments.h
 ~ Changed parameter order of
     pantheios_be_parseBooleanArg()
     pantheios_be_parseStringArg()
     pantheios_be_parseStockArgs()
 ~ Modified parsing functions to break after first matching argument found
     pantheios_be_parseBooleanArg()
     pantheios_be_parseStringArg()
 ~ Added support for following flags to pantheios_be_parseStockArgs():
     PANTHEIOS_BE_INIT_F_USE_UNIX_FORMAT
     PANTHEIOS_BE_INIT_F_HIDE_DATE
     PANTHEIOS_BE_INIT_F_HIDE_TIME
     PANTHEIOS_BE_INIT_F_HIGH_RESOLUTION
     PANTHEIOS_BE_INIT_F_LOW_RESOLUTION
 ~ Improved documentation of
     pantheios_be_parseBooleanArg()
     pantheios_be_parseStringArg()
     pantheios_be_parseStockArgs()

Front-ends:

Back-ends:

 ~ adjusted be.file to work with argument parsing changes
 ~ adjusted be.syslog to work with argument parsing changes
 ~ adjusted be.WindowsConsole to work with argument parsing changes
 ~ adjusted be.WindowsSyslog to work with argument parsing changes

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



20th November 2007 - 1.0.1 beta 55
==================================

Summary:
--------

 * Renamed be.Win32Console backend to be.WindowsConsole
 * Renamed be.Win32Debugger backend to be.WindowsDebugger
 * Renamed be.Win32syslog backed to be.WindowsSyslog
 * NOTE: These are breaking changes. All code using any
   stock back-ends will need to be edited and recompiled!
 * NOTE: *ALL* code using Pantheios must be recompiled, or
   linker errors may occur

Details:
--------

General:

Makefiles:

 ~ all Windows makefiles adjusted to new back-end names

Application Layer:

Core:

Front-ends:

Back-ends:

 ~ be.Win32Console => be.WindowsConsole

   include/pantheios/backends/bec.Win32Console.h => include/pantheios/backends/bec.WindowsConsole.h

   include/pantheios/implicit_link/be.Win32Console.h => include/pantheios/implicit_link/be.WindowsConsole.h
   include/pantheios/implicit_link/be.Win32Console.WithCallback.h => include/pantheios/implicit_link/be.WindowsConsole.WithCallback.h
   include/pantheios/implicit_link/bec.Win32Console.h => include/pantheios/implicit_link/bec.WindowsConsole.h
   include/pantheios/implicit_link/bec.Win32Console.WithCallback.h => include/pantheios/implicit_link/bec.WindowsConsole.WithCallback.h
   include/pantheios/implicit_link/bel.Win32Console.h => include/pantheios/implicit_link/bel.WindowsConsole.h
   include/pantheios/implicit_link/bel.Win32Console.WithCallback.h => include/pantheios/implicit_link/bel.WindowsConsole.WithCallback.h
   include/pantheios/implicit_link/ber.Win32Console.h => include/pantheios/implicit_link/ber.WindowsConsole.h
   include/pantheios/implicit_link/ber.Win32Console.WithCallback.h => include/pantheios/implicit_link/ber.WindowsConsole.WithCallback.h

 ~ be.Win32Debugger => be.WindowsDebugger

   include/pantheios/backends/bec.Win32Debugger.h => include/pantheios/backends/bec.WindowsDebugger.h

   include/pantheios/implicit_link/be.Win32Debugger.h => include/pantheios/implicit_link/be.WindowsDebugger.h
   include/pantheios/implicit_link/be.Win32Debugger.WithCallback.h => include/pantheios/implicit_link/be.WindowsDebugger.WithCallback.h
   include/pantheios/implicit_link/bec.Win32Debugger.h => include/pantheios/implicit_link/bec.WindowsDebugger.h
   include/pantheios/implicit_link/bec.Win32Debugger.WithCallback.h => include/pantheios/implicit_link/bec.WindowsDebugger.WithCallback.h
   include/pantheios/implicit_link/bel.Win32Debugger.h => include/pantheios/implicit_link/bel.WindowsDebugger.h
   include/pantheios/implicit_link/bel.Win32Debugger.WithCallback.h => include/pantheios/implicit_link/bel.WindowsDebugger.WithCallback.h
   include/pantheios/implicit_link/ber.Win32Debugger.h => include/pantheios/implicit_link/ber.WindowsDebugger.h
   include/pantheios/implicit_link/ber.Win32Debugger.WithCallback.h => include/pantheios/implicit_link/ber.WindowsDebugger.WithCallback.h

 ~ be.Win32syslog => be.WindowsSyslog

   include/pantheios/backends/bec.Win32Syslog.h => include/pantheios/backends/bec.WindowsSyslog.h

   include/pantheios/implicit_link/be.Win32Syslog.h => include/pantheios/implicit_link/be.WindowsSyslog.h
   include/pantheios/implicit_link/be.Win32Syslog.WithCallback.h => include/pantheios/implicit_link/be.WindowsSyslog.WithCallback.h
   include/pantheios/implicit_link/bec.Win32Syslog.h => include/pantheios/implicit_link/bec.WindowsSyslog.h
   include/pantheios/implicit_link/bec.Win32Syslog.WithCallback.h => include/pantheios/implicit_link/bec.WindowsSyslog.WithCallback.h
   include/pantheios/implicit_link/bel.Win32Syslog.h => include/pantheios/implicit_link/bel.WindowsSyslog.h
   include/pantheios/implicit_link/bel.Win32Syslog.WithCallback.h => include/pantheios/implicit_link/bel.WindowsSyslog.WithCallback.h
   include/pantheios/implicit_link/ber.Win32Syslog.h => include/pantheios/implicit_link/ber.WindowsSyslog.h
   include/pantheios/implicit_link/ber.Win32Syslog.WithCallback.h => include/pantheios/implicit_link/ber.WindowsSyslog.WithCallback.h

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



19th November 2007 - 1.0.1 beta 54
==================================

Summary:
--------

 * Standardisation of front-end process identity symbols.
   NOTE: This is a breaking change. All code using any
   stock front-ends will need to be edited and recompiled!
 * NOTE: *ALL* code using Pantheios must be recompiled, or
   linker errors may occur


Details:
--------

General:

Makefiles:

Application Layer:

Core:

Front-ends:

 ~ fe.simple now uses PANTHEIOS_FE_PROCESS_IDENTITY. Any code
   that uses the symbol FE_SIMPLE_PROCESS_IDENTITY will not
   compile.

   *ALL* code using Pantheios must be recompiled, or linker
   errors may occur

 ~ fe.N now uses PANTHEIOS_FE_PROCESS_IDENTITY. Any code
   that uses the symbol PAN_FE_N_PROCESS_IDENTITY will not
   compile.

   *ALL* code using Pantheios must be recompiled, or linker
   errors may occur

 ~ fe.WindowsRegistry now uses PANTHEIOS_FE_PROCESS_IDENTITY.
   Any code that uses the symbol PAN_FE_PROCESS_IDENTITY will
   not compile.

   *ALL* code using Pantheios must be recompiled, or linker
   errors may occur


Back-ends:

Examples:

 ~ adjusted all examples to use PANTHEIOS_FE_PROCESS_IDENTITY

Test:

 ~ adjusted all tests to use PANTHEIOS_FE_PROCESS_IDENTITY

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



18th November 2007 - 1.0.1 beta 53
==================================

Summary:
--------

 * NOTE: Now requires STLSoft 1.9.7
 * Facilities for accelerating compilation times by
   restricting function template parameter range
 * Various code cleanup in backend utility functions

Details:
--------

General:

 ~ compatibility with STLSoft 1.9.7

Makefiles:

Application Layer:

 + new PANTHEIOS_NO_STOCK_LEVELS symbol, which suppresses inclusion
   of include/pantheios/internal/levels.hpp

 + new PANTHEIOS_NO_GENERATED_FUNCTIONS symbol, which suppresses
   inclusion of all generated functions

 + new PANTHEIOS_NO_LOG_FUNCTIONS symbol, which suppresses
   inclusion of all log() generated functions

 + new PANTHEIOS_NO_LOG_SEV_FUNCTIONS symbol, which suppresses
   inclusion of all log-specific generated functions (i.e. log_DEBUG(),
   log_CRITICAL(), etc.)

Core:

Front-ends:

Back-ends:

 ~ added exception handling to pantheios_be_getCurrentTime()
 ~ minor cleanup in be.parse.cpp

Examples:

Test:

Depends on:

 * STLSoft 1.9.7 or later
   (http://stlsoft.org/)



17th November 2007 - 1.0.1 beta 52
==================================

Summary:
--------

 * Refactoring of include files
 * Removal of implementation functions from
   pantheios namespace, and documentation
 * Removed Windows-dependency that broke the build
   in beta 51

Details:
--------

General:

Makefiles:

Application Layer:

 ~ moved all generated files to include/internal/generated directory
 ~ moved include/cpp/initialiser.hpp => include/internal/initialiser.hpp
 ~ moved include/cpp/levels.hpp => include/internal/levels.hpp
 ~ moved all the log_dispatch_1(), log_dispatch_2(), etc. functions into
   the pantheios::internal namespace
 - removed the documentation tags from all the log_dispatch_1(),
   log_dispatch_2(), etc. functions

Core:

 ~ fixed erroneous dependency on pantheios/util/severity/WindowsEventLog.h
   from src/core/bailout.c

Front-ends:

Back-ends:

Examples:

Test:

Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



16th November 2007 - 1.0.1 beta 51
==================================

Summary:
--------

 * VC++ 2005 / 64-bit compilation fixes

Details:
--------

General:

 ~ compatibility with Visual C++ 2005 / 64-bit

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

Examples:

Test:

Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



15th November 2007 - 1.0.1 beta 50
==================================

Summary:
--------

 * re-issue due to distribution error with 1.0.1 beta 49

Details:
--------

General:

Makefiles:

Application Layer:

Core:

 ~ the latest version of src/util/time.cpp was not included
   in 1.0.1 beta 49

Front-ends:

Back-ends:

Examples:

Test:

Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



14th November 2007 - 1.0.1 beta 49
==================================

Summary:
--------

 * bug fix for VC++ 2005
 * refactoring of severity translations from ACE, syslog, log4???

Details:
--------

General:

 + pantheios/util/severity/ACE.h, which defines the translation function
   pantheios_severity_to_ACE_priority()

 + pantheios/util/severity/syslog.h, which defines the translation function
   pantheios_severity_to_syslog_severity()

 + pantheios/util/severity/WindowsEventLog.h, which defines the translation
   function pantheios_severity_to_WindowsEventLog_type()

Makefiles:

Application Layer:

Core:

 ~ src/core/bailout.c implemented in terms of the translation function
   pantheios_severity_to_WindowsEventLog_type()

Front-ends:

Back-ends:

 ~ fixed _time32_t / _time64_t compilation bug in VC++ 2..05

 ~ src/be/bec.ACE.cpp implemented in terms of the translation
   function pantheios_severity_to_ACE_priority()

 ~ src/be/bec.syslog.c implemented in terms of the translation
   function pantheios_severity_to_syslog_severity()

 ~ src/be/bec.WindowsEventLog.cpp implemented in terms of the translation
   function pantheios_severity_to_WindowsEventLog_type()

Examples:

Test:

Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



13th November 2007 - 1.0.1 beta 48
==================================

Summary:
--------

 * high and low resolution timing options in backend statement
   formatting
 * example programs for high and low resolution timing
 * adjustments to makefiles

Details:
--------

General:

Makefiles:

 + added examples 18 and 19

Application Layer:

Core:

Front-ends:

Back-ends:

 + addition of PANTHEIOS_BE_INIT_F_HIGH_RESOLUTION, to favour high
   resolution timing
 + addition of PANTHEIOS_BE_INIT_F_LOW_RESOLUTION, to favour low
   resolution timing

Examples:

 + examples/cpp/example_cpp_highres/example_cpp_highres.cpp
 + examples/cpp/example_cpp_lowres/example_cpp_lowres.cpp

Test:

Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



12th November 2007 - 1.0.1 beta 47
==================================

Summary:
--------

 * moved Pantheios Trace API into separate include file
 * minor adjustment to GCC makefiles
 * minor bug fix to address compiler warning on UNIX

Details:
--------

General:

Makefiles:

 ~ put -pedantic back into makefiles (as have moved Pantheios Trace API
   into separate file); separated test and non-test compilation flags
   to allow -pedantic to be removed from test (due to GCC's refusal to
   suppress its warning about variadic macros)

Application Layer:

Core:

 + added include/pantheios/trace.h

 ~ NOTE: Pantheios Trace API removed from include/pantheios/pantheios.h

 ~ eliminated compilation warnings in src/core/bailout.c

Front-ends:

Back-ends:

 ~ minor bug fix to address compiler warning on UNIX

Examples:

Test:

Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



11th November 2007 - 1.0.1 beta 46
==================================

Summary:
--------

 * considerable refactoring of date/time handling in back-end
   statement
 * minor fix to makefiles on Mac OS-X

Details:
--------

General:

 + pantheios_util_getCurrentTime() rewritten to take flags to
   omit date or time from date/time field in log statement

Makefiles:

 ~ removal of -pedantic flag from mac makefiles, to avoid the
   warning (as error) about variadic macros

Application Layer:

Core:

Front-ends:

Back-ends:

 + addition of PANTHEIOS_BE_GETCURRENTTIME_F_USE_UNIX_FORMAT flag,
   to cause UNIX-like strftime()-based format to be used always
 + addition of PANTHEIOS_BE_INIT_F_HIDE_DATE flag, to omit dates
   from back-end statement date/time fields
 + addition of PANTHEIOS_BE_INIT_F_HIDE_TIME flag, to omit times
   from back-end statement date/time fields

Examples:

Test:

 + getcurrenttime.test unit-test for time formatting

Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



10th November 2007 - 1.0.1 beta 45
==================================

Summary:
--------

 * code cleanup and refactoring, ready for several functional
   enhancements in next several releases
 * reduced size of N-ary Generated Function Templates in Application
   Layer
 * removal of obsolete KiwiSyslog KLOG back-end

Details:
--------

General:

 + include/util/memory/auto_buffer_selector.hpp. Defines the type
   generator template pantheios::auto_buffer_selector, which isolates
   code in the core and in several back-ends from a version change
   in STLSoft 1.9.1 of stlsoft::auto_buffer that reordered the
   template parameters. It's very unlikely that anyone's using STLSoft
   pre-1.9, but best to be sure. Also, the change results in a
   considerable cleanup and removal of pre-processor selection
   statements.
 ~

Makefiles:

Application Layer:

 ~ small refactoring to scripts/make_hdrs.rb, to generate smaller code.
   Results in a 9% saving in include/pantheios/c/log_functions.c. More
   work on this to come.

Core:

 ~ use of pantheios::auto_buffer_selector

Front-ends:

Back-ends:

 - removed KiwiSyslog KLOG back-end project: Windows users should have been
   using Win32syslog back-end since public beta phase.
 ~ use of pantheios::auto_buffer_selector in several backends

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



3rd November 2007 - 1.0.1 beta 44
=================================

Summary:
--------

 * more code tidying / refactoring

Details:
--------

General:

 ~ now all back-ends may implement their entry
   point functions without having regard to catching
   exceptions, by using the interception methods
   defined in include/pantheios/util/be/apidefs.hpp

Makefiles:

 ~ changes to reflect new files & directory structure

Application Layer:

Core:

 ~ fixed compilation errors in src/core/bailout.c
   introduced in beta 43

Front-ends:

Back-ends:

 + src/util/be.apidefs.cpp
 + include/pantheios/util/be/apidefs.hpp

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



3rd November 2007 - 1.0.1 beta 43
=================================

Summary:
--------

 * code tidying / refactoring

Details:
--------

General:

Makefiles:

 ~ changes to reflect new files & directory structure

Application Layer:

Core:

 ~ split out code from core/api.cpp
 + core/bailout.c
 + core/printf.c
 ~ renamed core/util.cpp => core/strutil.cpp

Front-ends:

Back-ends:

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



29th October 2007 - 1.0.1 beta 42
=================================

Summary:
--------

 * fix for fe.WindowsRegistry

Details:
--------

General:

Makefiles:

 + now builds fe.WindowsRegistry

Application Layer:

Core:

Front-ends:

 ~ fe.WindowsRegistry was released (in beta 41) with hard-coded
   processIdentity. (Embarassing, that!)

Back-ends:

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



28th October 2007 - 1.0.1 beta 41
=================================

Summary:
--------

 * added new frontend: fe.WindowsRegistry
 * further initialisation error codes
 * minor additions to core API

Details:
--------

General:

 + added more Initialisation Error Codes for be+fe. Codes
   defined in include/pantheios/error_codes.h; code strings
   defined in core/init_error_strings.c

Makefiles:

Application Layer:

Core:

 + pantheios::onBailOut() (inline for pantheios_onBailOut()

Front-ends:

 + first version of fe.WindowsRegistry
 + new PANTHEIOS_FE_INIT_RC_SYSTEM_NOT_CONFIGURED error code

Back-ends:

 + new PANTHEIOS_BE_INIT_RC_INIT_PARAM_REQUIRED error code
 + new PANTHEIOS_BE_INIT_RC_INVALID_ARGUMENT error code

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



26th October 2007 - 1.0.1 beta 40
=================================

Summary:
--------

 * minor bug fix in be.file back-end


Details:
--------

General:

Makefiles:

Application Layer:

Core:

Front-ends:



Back-ends:

 ~ fixed bug in be.file, to enable discard of cached contents before
   assigning file-path to back-end instance

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



25th October 2007 - 1.0.1 beta 39
=================================

Summary:
--------

 * minor modifications and code cleanup

Details:
--------

General:

Makefiles:

Application Layer:

 + added facility for user-supplied shim-#include file. To use, #define
   PANTHEIOS_CUSTOM_SHIM_INCLUDE with the path of your custom shim
   #include header file.

Core:

Front-ends:

 + version info in fe.XXXX.h files

Back-ends:

 + version info in be(c).XXXX.h files

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)



23rd October 2007 - 1.0.1 beta 38
=================================

Summary:
--------

 * added new be.speech back-end, which provides spoken output of
   log statements. (Note: currently for Windows only.)

Details:
--------

General:

Makefiles:

 + added bec.speech, bec.speech.WithCallback, be.speech, bel.speech
   and ber.speech library entries. Note: currently for Windows-only

Application Layer:

Core:

Front-ends:

Back-ends:

 + src/be/bec.speech.cpp                                     main implementation file
 + src/be/be.speech                                          sole library file
 + src/be/bel.speech                                         local library file
 + src/be/ber.speech                                         remote library file
 + include/pantheios/backends/bec.speech.h                   be.speech API file
 + include/pantheios/implicit_link/bec.speech.h              non-callback implicit link header
 + include/pantheios/implicit_link/bec.speech.WithCallback.h callback implicit link header

Examples:

Test:


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)




21st October 2007 - 1.0.1 beta 37
=================================

Summary:
--------

 * Changed PANTHEIOS_SEV_xxx from enumerators to SEV_xxx enumerators,
   and #define corresponding PANTHEIOS_SEV_xxx.
 * Changed implementation of levels "constant classes", to avoid
   dynamic initialisation ordering problems.
 * Tidying up code in test tree

Details:
--------

General:

Makefiles:

 ~ all changed to reflect name changes in test tree

Application Layer:

 ~ changed comments on auto-generated N-ary function templates, to
   take account of changes to PANTHEIOS_SEV_xxx (now)
   pre-processor symbols

Core:

Front-ends:

Back-ends:

 ~ all changed to remove pantheios:: from PANTHEIOS_SEV_xxx (now)
   pre-processor symbols

Examples:

Test:

 ~ renamed all Xxx_yyy_test to xxx_yyy.test


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)




20th October 2007 - 1.0.1 beta 36
=================================

Summary:
--------

 * further enhancements be.N to facilitate backup back-end to be
   initialised only if all prior back-end initialisations failed

Details:
--------

General:

Makefiles:

Application Layer:

 + include/pantheios/util/string/string.h

Core:

 ~ pantheios_onBailOut() now takes a severity parameter, in addition
   to the message param.

Front-ends:

Back-ends:

 + added PANTHEIOS_BE_N_F_INIT_ONLY_IF_PREVIOUS_FAILED to be.N, which
   causes a back-end to be initialised only if all the previous
   back-ends in the list have failed to initialise.

Examples:

Test:

 ~ update be.N.test to reflect changes


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)




19th October 2007 - 1.0.1 beta 35
=================================

Summary:
--------

 * further enhancements be.N to facilitate targeting messages to specific
   back-ends

Details:
--------

General:

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 + added PANTHEIOS_BE_N_F_IGNORE_NONMATCHED_CUSTOM28_ID to be.N, which
   allows a back-end to ignore those logging statements whose upper 28-bit
   value corresponds to a back-end id to the one configured with this flag.
   See be.N.test for an example of how this works.

 ~ deprecated PANTHEIOS_BE_N_ENTRY() macro in favour of the new macro
   PANTHEIOS_BE_N_STDFORM_ENTRY(), which places the flags parameter at the
   end to enhance readability.

Examples:

Test:

 ~ update be.N.test to reflect changes


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)




18th October 2007 - 1.0.1 beta 34
=================================

Summary:
--------

 * enhanced be.N to facilitate targeting messages to specific back-ends

Details:
--------

General:

Makefiles:

 ~ updated build/vc6/pantheios.core.dsp to latest file changes

Application Layer:

Core:

Front-ends:

Back-ends:

 + added PANTHEIOS_BE_N_F_ID_MUST_MATCH_CUSTOM28 to be.N, which allows a
   back-end to only respond to those logging statements whose upper 28-bit
   value corresponds to the back-end id configured with this flag.
   See be.N.test for an example of how this works.

 ~ VC 5 compatibility in be.Win32Console.


Examples:

Test:

 ~ update be.N.test to reflect changes


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)




7th October 2007 - 1.0.1 beta 33
================================


Summary:
--------

 * standardised Initialisation Error Codes
 * large number of makefile changes, to simplify & clean
 * callback functionality to be.COMErrorObject
 * minor bug-fix in be.Win32syslog


Details:
--------

General:

 + added Initialisation Error Codes for core+be+fe. Codes
   defined in include/pantheios/error_codes.h; code strings
   defined in core/init_error_strings.c

 + added                     include/pantheios/error_codes.h
 + added                     core/init_error_strings.c

 ~ renamed core/strings.c => core/severity_strings.c

 - removed all be.loader files from distribution, as it's
   not ready yet. (Should be in next release.)

Makefiles:

 + added in new strings file (core/init_error_strings.c)
 ~ adjustment for source renaming (core/severity_strings.c)
 + added in new target for bec.COMErrorObject.WithCallback
 ~ adjustments to play nice on silly old Windows when asked
   to clean and the to-be-cleaned items do not exist.
 ~ shortened some of the macros to work with old makes

Application Layer:

Core:

 + new pantheios_getInitErrorString() and
   pantheios_getInitErrorStringLength() API functions

 ~ changed all hard-coded error-codes to use the new
   Initialisation Error Codes

Front-ends:

 + added Initialisation Error Codes for core+be+fe

 ~ changed all hard-coded error-codes to use the new
   Initialisation Error Codes

Back-ends:

 + added Initialisation Error Codes for core+be+fe

 ~ changed all hard-coded error-codes to use the new
   Initialisation Error Codes

 be.COMErrorObject:

  + added initialisation & callback functionality
  + added pantheios_be_COMErrorObject_getDefaultAppInit()
  + PANTHEIOS_BE_COMERROROBJECT_F_DONT_OVERWRITE_EXISTING

 be.file:

  + added PANTHEIOS_BE_FILE_MAX_FILE_LEN
  ~ changed the buff init struct member to use this
    symbol.

 be.Win32Console:

  ~ strengthened exception-safety
    in Win32Console_Context::lookupConsoleMx() - now will
    either enter a full pairing of {name;mutex} or nothing.

 be.Win32syslog:

  ~ added the hostNameBuff init struct member.
  ~ now rejects process identities containing whitespace
  ~ bug fix to remove erroneous space between PRI and TIMESTAMP

Examples:

 ~ changed all hard-coded error-codes to use the new
   Initialisation Error Codes


Depends on:

 * STLSoft 1.9.6 or later
   (http://stlsoft.org/downloads.html)




3rd September 2007 - 1.0.1 beta 32
==================================

Summary:
--------

 * Fixes for 64-bit UNIX

Details:
--------

General:

Makefiles:

 ~ removal of -pedantic flag from GCC 4.x makefiles, to avoid
   "anonymous variadic macros were introduced in C99" warning, since
   -Wno-variadic-macros flag recognised only in GCC 4.x on Mac

Application Layer:

Core:

 ~ minor fix to name an unnamed union used for non-local variables

Front-ends:

Back-ends:

Examples:

Core:

 ~ minor fix to address pointer expression in fprintf() statements


Depends on:

 * STLSoft 1.9.4 or later
   (http://stlsoft.org/downloads.html)




17th August 2007 - 1.0.1 beta 31
================================

Summary:
--------

 * Fix to Pantheios Tracing API
 * Fix to GCC 3.x makefiles

Details:
--------

General:

Makefiles:

 ~ removal of -pedantic flag from GCC 3.x makefiles, to avoid
   "anonymous variadic macros were introduced in C99" warning, since
   -Wno-variadic-macros flag recognised in GCC 4.x

Application Layer:

 ~ fixed the PANTHEIOS_TRACE_PRINTF() macro, which didn't have a
   format parameter! :$

Core:

Front-ends:

Back-ends:

 ~ temporarily hiding Back-end Map API, which is not ready for use

Examples:

 + examples/cpp/example_cpp_tracing/example_cpp_tracing.cpp

   an example of how to use the Pantheios Tracing API from C++

Depends on:

 * STLSoft 1.9.4 or later
   (http://stlsoft.org/downloads.html)




16th August 2007 - 1.0.1 beta 30
================================

Summary:
--------

 * Added back-end generation macros, to ease compile-time
   selection/definition
 * fixed (benign) bug for Borland build

Details:
--------

General:

Makefiles:

 ~ changes to some OBJ make symbol names in preparation for significant
   refactoring in future release

Application Layer:

Core:

 ~ fix to suppress extraneous Borland compiler warning in context.cpp

Front-ends:

Back-ends:

 + macros to define back-ends:
    * single - PANTHEIOS_BE_DEFINE_BE_FUNCTIONS
    * local - PANTHEIOS_BE_DEFINE_BEL_FUNCTIONS
    * remote - PANTHEIOS_BE_DEFINE_BER_FUNCTIONS

    e.g. the following code will define the back-end functions
    pantheios_be_init(), pantheios_be_uninit() and
    pantheios_be_logEntry() in terms of the be.file back-end

      // in 'main'.cpp
      PANTHEIOS_BE_DEFINE_BE_FUNCTIONS(file)


Examples:

Depends on:

 * STLSoft 1.9.4 or later
   (http://stlsoft.org/downloads.html)








5th August 2007 - 1.0.1 beta 29
===============================

Summary:
--------

 * message-first statement composition

Details:
--------

General:

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 + message-first statement composition

Examples:

Depends on:

 * STLSoft 1.9.4 or later
   (http://stlsoft.org/downloads.html)




2nd August 2007 - 1.0.1 beta 28
===============================

Summary:
--------

 * added the Pantheios Tracing API
 * fixes for some back-end project files

Details:
--------

General:

Makefiles:

Application Layer:

 + added the Pantheios Tracing API

Core:

Front-ends:

Back-ends:

 ~ fixed up bec.Win32ConsoleWithCallback and bec.fprintfWithCallback
   project files

Examples:

Depends on:

 * STLSoft 1.9.4 or later
   (http://stlsoft.org/downloads.html)




29th July 2007 - 1.0.1 beta 27
==============================

Summary:
--------

 * bug fixes in be.file

Details:
--------

General:

Makefiles:

Application Layer:

 ~ adjustment to implicit link for pseudo-UNIX (on Win32) test builds

Core:

Front-ends:

Back-ends:

 ~ fix bug(s) in be.file, via refactoring of locking functionality
   between platforms that support atomic integer operations, and those
   that do not. Now properly supports multiple be.file backends on UNIX.

Examples:

Depends on:

 * STLSoft 1.9.3 or later
   (http://stlsoft.org/downloads.html)




11th April 2007 - 1.0.1 beta 26
===============================

Summary:
--------

 * Compatible with STLSoft 1.9.1 (version released with Extended
   STL, vol 1: CD)
 * bug fix in be.file

Details:
--------

General:

Makefiles:

Application Layer:

 + 0-parameter overloads of pantheios::com::invoke_nothrow_method()

Core:

 ~ compatible with STLSoft 1.9.1

Front-ends:

Back-ends:

 ~ fix bug in be.file

Examples:

Depends on:

 * STLSoft 1.9.1 or later
   (http://stlsoft.org/downloads.html)


11th April 2007 - 1.0.1 beta 25
===============================

Summary:
--------

 * reimplemented core initialisation on UNIX
 * bug fix for be.file on UNIX
 * added missing project files

Details:
--------

General:

Makefiles:

 + added missing pantheios.vc6.DSW file (for MSVC projs)

 ~ modified certain VC6 project files to support
   "Multithreaded pseudoUNIX". This is an internal use, and
   should probably be ignored by external users.

Application Layer:

Core:

 ~ reimplemented the core initialisation on UNIX, to remove the
   namespace scope (static) thread_mutex instance. Though not a
   bug (since it worked correctly) it was an ugly thing, as
   marked by a TODO. Now TODONE. :-)

 ~ fixed missing <pthread.h> inclusion in src/core/inserters2.cpp

Front-ends:

Back-ends:

 ~ fix bug in be.file, to correctly initialise in MT UNIX builds;
   removed the namespace scope (static) thread_mutex instance

Examples:

Depends on:

 * STLSoft 1.9.1 beta 47 or later
   (http://stlsoft.org/downloads.html)


6th April 2007 - 1.0.1 beta 24
==============================

Summary:
--------

 * intermediate release, containing a fix to be.file, and other
   minor changes

Details:
--------

General:

 ~ adjustments of pantheios.core project file to the new
   source structure introduced in 1.0.1 beta 23

 ~ minor adjustments to syntax to prepare for next beta
   changes

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 ~ fix to be.file, to allow other processes to read the file.

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 47 or later
   (http://stlsoft.org/downloads.html)


27th January 2007 - 1.0.1 beta 23
=================================

Summary:
--------

 * distribution now rooted at pantheios-1.0.1-beta23
 * refactoring of core implementation (.c, .cpp) files
 * DMC++ compiler improvement-related enhancements to fe.N and fe.simple;
 * more 64-bit fixes

Details:
--------

General:

 ~ distribution is now rooted at pantheios-1.0.1-beta23. In other
   words, the file include/pantheios/pantheios.h will now be at
   pantheios-1.0.1-beta23/include/pantheios/pantheios.h

Makefiles:

 ~ all makefiles are adjusted for the changes to the core
   implementation files

Application Layer:

Core:

 ~ refactoring core implementation files:

   pantheios_core.cpp       =>  core/api.cpp
                                    most core functions
   pantheios_core.cpp       =>  core/util.cpp
                                    pantheios_strdup_nothrow()
                                    pantheios_strdup_throw()
                                    pantheios_strfree()
                                    pan_slice_t::get_lazy_length()
                                    pantheios_strnlen()
                                    pantheios_inserter_snprintf_()
   pantheios_strings.c      =>  core/strings.c
   pantheios_appl.cpp       =>  core/auto.cpp
   pantheios_inserters.cpp  =>  appl/inserters.cpp
   pantheios_inserters2.cpp =>  appl/inserters2.cpp

Front-ends:

 ~ updated pantheios/frontends/fe.N.h to reflect now correct behaviour
   of Digital Mars with respect to external declarations of const char[]
 ~ updated pantheios/frontends/fe.simple.h to reflect now correct behaviour
   of Digital Mars with respect to external declarations of const char[]

Back-ends:

 ~ Minor mods to bec.file.cpp for Win64
 ~ 64-bit fixes to fe.N.c

Examples:

 ~ updated example_c_N to reflect now correct behaviour
   of Digital Mars with respect to external declarations of const char[]

Samples:

Depends on:

 * STLSoft 1.9.1 beta 43 or later
   (http://stlsoft.org/downloads.html)


15th January 2007 - 1.0.1 beta 22
=================================

Summary:
--------

 * fixes for 64-bit Linux compatibility

Details:
--------

Makefiles:

Application Layer:

Core:

 ~ core no longer assumes _any_ kind of atomic integer facilities in
   Linux; these are now only used with Mac OS-X and Windows

Front-ends:

Back-ends:

 ~ be.file no longer assumes _any_ kind of atomic integer facilities in
   Linux; these are now only used with Mac OS-X and Windows

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 42 or later
   (http://stlsoft.org/downloads.html)




9th January 2007 - 1.0.1 beta 21
================================

Summary:
--------

 * added fault-tolerance to be.N, so one or more (but not all) back-ends
   can fail and the application can proceed
 * added be.fail back-end that always fails (for testing be.N fault
   tolerance)

Details:
--------

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 + be.fail

 ~ be.N now always

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 40 or later
   (http://stlsoft.org/downloads.html)




5th January 2007 - 1.0.1 beta 20
================================

Summary:
--------

 * addition of missing implicit link file (be.file)

Details:
--------

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 + pantheios/implicit_link/be.file.h

 ~ formatting error in back-ends on Win32 (fixed in STLSoft
   1.9.1 beta 39; download from http://stlsoft.org/downloads.html)

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 39 or later
   (http://stlsoft.org/downloads.html)




2nd January 2007 - 1.0.1 beta 19
================================

Summary:
--------

 * dynamic control of severity ceiling for fe.N

Details:
--------

Makefiles:

Application Layer:

Core:

Front-ends:

 + pantheios_fe_simple_getSeverityCeiling() and
   pantheios_fe_simple_setSeverityCeiling(), to dynamically
   control the severity ceiling

Back-ends:

 ~ fix minor syntax error troubling Borland, DMC++ and GCC

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 37 or later
   (http://stlsoft.org/downloads.html)




23rd December 2006 - 1.0.1 beta 18
==================================

Summary:
--------

 * bug fix and performance enhancements to fe.N
 * addition of implicit link headers for be.N and fe.N
 * refactoring of several back-ends to use common processId+severity+time
   handling

Details:
--------

Makefiles:

Application Layer:

Core:

 + PANTHEIOS_CPP_CALL(), used to declare C++-only core functions
 + pantheios_strdup_throw(), pantheios_strdup_nothrow(),
   pantheios_strfree()

Front-ends:

 ~ fixed bug in fe.N, whereby the 0 (backEndId) level would mask
   that of other non-0 (backEndId) levels - i.e. if the 0 level
   is NOTICE and back-end 1's level is DEBUG, the DEBUG and INFO
   output from back-end 1 is never seen
 ~ caches the 0 level once, in front-end initialisation, rather
   than on each call to pantheios_fe_isSeverityLogged()
 ~ tries using the back-end id as the the index of a (non-0)
   back-end; if it does not match, reverts to linear search. If
   the user uses the back-end ids 1, 2, 3, ... in order, indexed
   access (which is faster) will always be used.

Back-ends:

 + pantheios/implicit_link/fe.N.h
 + pantheios/implicit_link/be.N.h
 ~ refactoring of pantheios::internal::Context
 ~ examples now implementated in terms of the new
   pantheios_strdup_XXX() functions
 ~ fixes to minor exception-safety issues in some back-ends
 ~ be.file now implemented in terms of pantheios::internal::Context
 ~ be.Win32Console now implemented in terms of pantheios::internal::Context
 ~ be.Win32Debugger now implemented in terms of pantheios::internal::Context

Examples:

 ~ Digital Mars compatibility fixes
 ~ examples now implementated in terms of the new
   pantheios_strdup_XXX() functions

Samples:

Depends on:

 * STLSoft 1.9.1 beta 33 or later
   (http://stlsoft.org/downloads.html)




20th December 2006 - 1.0.1 beta 17
==================================

Summary:
--------

 * Refactoring of several back-end implementations
 * Finalising of functionality of be.fprintf

Details:
--------

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 + abstract class pantheios::internal::Context, which can
   be used to implement
 + finalised functionality of be.fprintf

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 33 or later
   (http://stlsoft.org/downloads.html)




18th December 2006 - 1.0.1 beta 16
==================================

Summary:
--------

 * Minor fix for dynamic library builds

Details:
--------

Makefiles:

Application Layer:

 ~

Core:

 ~ now correctly discriminates for __DLL__ / _USRDLL / _WINDLL / _AFXDLL
   for determining whether to include the auto-initialisation
   header file (initialiser.hpp)

Front-ends:

Back-ends:

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 33 or later
   (http://stlsoft.org/downloads.html)




16th December 2006 - 1.0.1 beta 15
==================================

Summary:
--------

 * Minor fix for C++/COM compilation

Details:
--------

Makefiles:

Application Layer:

 ~ include/pantheios/util/com/exception_helpers.hpp was
   discriminating on the non-existent symbol
   STLSOFT_CF_COMPILER_SUPPORT, rather than the one it
   should have used: STLSOFT_CF_EXCEPTION_SUPPORT

Core:

Front-ends:

Back-ends:

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 33 or later
   (http://stlsoft.org/downloads.html)




12th December 2006 - 1.0.1 beta 14
==================================

Summary:
--------

 * Minor fix for dynamic library builds

Details:
--------

Makefiles:

Application Layer:

Core:

 ~ now correctly discriminates for _DLL / __DLL__ for
   determining whether to include the auto-initialisation
   header file (initialiser.hpp)

Front-ends:

Back-ends:

Examples:

Samples:

Depends on:

 * STLSoft 1.9.1 beta 32 or later
   (http://stlsoft.org/downloads.html)




7th December 2006 - 1.0.1 beta 13
=================================

Summary:
--------

 * Added be.N and fe.N, for splitting to multiple
   back-ends
 * Fixes to header files (names)
 * Fix to be.file

Details:
--------

Makefiles:

 + builds new example project (examples/example_c_N/example_c_N.c)
   that demonstrates fe.N and be.N working together

Application Layer:

Core:

Front-ends:

 + fe.N - filters an arbitrary number of back-ends

Back-ends:

 + be.N - splits to an arbitrary number of back-ends

 - deprecation of pantheios/backends/lrsplit.h
 + addition of pantheios/backends/be.lrsplit.h
 ~ pantheios/backends/be.lrsplit.h

 ~ fix to "feature" in be.file whereby setting the file name after all
   statements meant that no output would be written.

Examples:

 + examples/example_c_N/example_c_N.c, which
   demonstrates fe.N and be.N working together

Samples:

Depends on:

 * STLSoft 1.9.1 beta 32 or later
   (http://stlsoft.org/downloads.html)




5th December 2006 - 1.0.1 beta 12
=================================

Summary:
--------

 * Fixes to VC++ 8 build/linking

Details:
--------

Makefiles:

 - removed the single-threaded variants of the build (since MS no longer
   supports this as of VC 8)

Application Layer:

Core:

Front-ends:

Back-ends:

Examples:

Samples:




3rd December 2006 - 1.0.1 beta 11
=================================

Summary:
--------

 * Fixes to be.COMErrorObject

Details:
--------

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 ~ fix to garbage output in be.COMErrorObject
 + implicit link header for be.file (include/pantheios/implicit_link/bec.file.h)

Examples:

Samples:




1st December 2006 - 1.0.1 beta 10
=================================

Summary:
--------

 * Fixes to be.file
 * Fixes to C compilation


Details:
--------

Makefiles:

Application Layer:

Core:

 ~ Fix to bug encountered in compilation of C source files on
   some platforms

Front-ends:

Back-ends:

 ~ be.file - fixes to problems in Mac compilation

Examples:

Samples:




29th November 2006 - 1.0.1 beta 9
=================================

Summary:
--------

 * Fixes to be.file

 * Example for be.file


Details:
--------

Makefiles:

Application Layer:

Core:

Front-ends:

Back-ends:

 ~ be.file - fixes to problems in UNIX compilation

Examples:

 + examples/cpp/example_cpp_file

Samples:




27th November 2006 - 1.0.1 beta 8
=================================

Summary:
--------

 * Added new backend - be.file

 * Resolved some compiler compatibility issues


Details:
--------

Makefiles:

Application Layer:

 ~ fix to function suite implementations to make compatible with DMC++ and
   GCC compilers

 ~ fix to args inserter class for Borland compiler

Core:

 ~ fixed time functionality that (on Win32-only) showed time but not date.
   Now includes both date and time.

Front-ends:

Back-ends:

 + be.file - new file back-end logs to a file

Examples:

 ~ fix to example_cpp_custom_type_1.cpp, for VC++ 5

Samples:




29th October 2006 - 1.0.1 beta 7
================================

Summary:
--------

 * minor increased in efficiency in a couple of areas

Details:
--------

Makefiles:

Application Layer:

Core:

 ~ pantheios_getSeverityStringLength() now avoids runtime calculation of
   string length

Front-ends:

Back-ends:

 ~ be.COMErrorObject now avoids a memory allocation in translation of
   ANSI/multibyte string to wide string




21st October 2006 - 1.0.1 beta 6
================================

Summary:
--------

 + 3 new inserter classes: args, processId, threadId
 + 3 more examples
 ~ improvements in compiler compatility

Details:
--------

Makefiles:

 + three new examples for new inserter classes

Application Layer:

 + args inserter (for inserting argc+argv pairs)
 + processId inserter (for inserting the current process id)
 + threadId inserter (for inserting the current thread id)

Core:

 + support for new inserter classes
 ~ fixed up VC++ 5 compatility (which is required for reasons best kept
   to myself :$)

Front-ends:

Back-ends:

 + be.Win32syslog sets socket option SO_BROADCAST when bcast addr

 ~ fixed up VC++ 5 compatility




8th October 2006 - 1.0.1 beta 5
===============================

Summary:
--------

 * Fixed broken UNIX makefiles (broken in beta 4)
 * Fixed Win32syslog facility codes (broken in beta 4)

Details:
--------

Makefiles:

 ~ Fixed corruption in makefile generator template that caused
   all UNIX makefiles to be missing fe.simple and test program
   targets

Back-ends:

 ~ Corrected PANTHEIOS_SYSLOG_FAC_* constants in
   include/pantheios/backends/bec.Win32syslog.h

Dependencies:
-------------

  * Requires STLSoft 1.9.1 beta 25 or later, available from
    http://stlsoft.org/downloads.html.
  * Use of the pantheios::b64 inserter (for Base-64 expression of
    binary regions) requires b64 1.1.3 or later, available from
    http://synesis.com.au/software/b64.html




5th October 2006 - 1.0.1 beta 4
===============================

Summary:
--------

 * Fixed UNIX/GCC compilation/build issues
 * Added bail-out functionality (to handle init failures)
 * be.syslog Back-end functionality expanded

Details:
--------

Makefiles:

 - removed KLOG targets

 ~ Makefiles that support NOX (NO eXception builds) no longer
   build NOX versions of test programs

 ~ UNIX makefiles:

  + bec.syslog.WithCallback library variant for altering
    SysLog setting via callback.
  + now specify -lpthread, to link in PThreads
  - spurious Windows-specific library references removed
  ~ fix for missing symbols when compiling with GCC
  - removal of GCC/Mac-OSX flag -Wno-long-double for non-Mac
  compilation

Core:

 + pantheios_onBailOut(), a fallback log function that is used
   by the Core (and Front/Back-end(s)) to report on a failure to
   initialise Pantheios. The output facilities are operating
   system-dependent:
    * on UNIX the bail-out message is written to syslog() and to
      the console of the calling process (via fprintf()), and to
      a local file "logging-bailout.txt" (appending if already
      exists)
    * on Windows the bail-out message is written to the debugger
      (via OutputDebugString()), the console (if any) of the
      calling process (via WriteFile()), to a local file
      "logging-bailout.txt" (appending if already exists), and to
      the Windows Event Log (under the source "logging-bailout").

      Note: The Event Log messages will not be correctly formatted
      (although their information will be accessible), unless
      pantheios.COM is installed: The Windows bail-out
      functionality piggy backs on the Event Log message resources
      in pantheios.COM (version 1.0.1 beta 3 or later).

Application Layer:

 ~ pantheios/util/com/exception_helpers.hpp now correctly defined
   for non-exception compilation

Back-ends:

 + be.syslog now supports callbacks, via the pan_be_syslog_init_t
   structure and the pantheios_be_syslog_getAppInit() and
   pantheios_be_syslog_getDefaultAppInit() functions.

 + be.Win32syslog now supports customisation of the facility, via
   the new member 'facility' in the pan_be_Win32syslog_init_t
   structure

 + be.lrsplit uses pantheios_onBailOut() if local and/or remote
   Back-end fail to initialise

Examples:

 ~ fixed examples/cpp/example_cpp_custom_type_1/example_cpp_custom_type_1.cpp
   for compilation with GCC (whose 2-phase lookup is not up
   to scruff)




24th September 2006 - 1.0.1 beta 3
==================================

Makefiles:

 ~ Makefiles that support NOX (NO eXception builds) no longer
  build NOX versions of ACE and KLOG projects, since those
  configurations

 ~ Visual C++ 8 makefile
   + now includes -w4996 to suppress the somewhat silly warnings
     about so-called "safe" functions
   - single-threaded variants no longer specify the obsolete
     compiler flags -ML / -MLd

Core:

 + pantheios_getSeverityStringLength()

 + string access shims for the pan_severity_t type

 ~ pantheios_getNextBackEndId() now implemented in terms of a
   mutex (platformstl::process_mutex) when compiling on a
   platform that does not provide an atomic_preincrement()
   function.

Application Layer:

 ~ changes to all log()/log_XXXX() function templates to use
   "using declarations" rather than explicit qualification of the
   string access shim functions, in order to cover up a problem
   that GCC has in its ADL (argument-dependent lookup).

 ~ pantheios::blob() now does 1-grouping when the two-parameter
   constructor is used.

pantheios::com:

 + more function overloads




2nd September 2006 - 1.0.1 beta 2
=================================

There have been myriad small changes, and some breaking changes, to
previous non-public releases of Pantheios (and its preceeding
proprietary Synesis Software incarnation). However, they're way too
many to list here, and those who have those previous non-public
versions are sufficiently in the know (including my phone number)
that there's no need to enumerate the differences here.

To all intents and purposes, this is the first public release of
Pantheios. From here on in, it gets interesting ....

=============================== End of file ================================

